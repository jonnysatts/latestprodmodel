[{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'products' is assigned a value but never used.","line":14,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport HomePage from './components/HomePage';\r\nimport ProductDashboard from './components/ProductDashboard';\r\nimport ProductScenario from './components/ProductScenario';\r\nimport ProductBasedScenarioModeling from './components/ProductBasedScenarioModeling';\r\nimport PortfolioView from './components/PortfolioView';\r\nimport NotFound from './components/NotFound';\r\nimport useLocalStore from './store/localStore';\r\nimport { Spinner } from './components/ui/spinner';\r\n\r\n// The main App component - simplified to focus on core functionality\r\nexport default function App() {\r\n  const { isLoading, error, initializeStore, products } = useLocalStore();\r\n  const [appReady, setAppReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize the store when the app loads\r\n    const loadData = async () => {\r\n      try {\r\n        await initializeStore();\r\n      } catch (err) {\r\n        console.error('Failed to initialize the application:', err);\r\n      } finally {\r\n        setAppReady(true);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [initializeStore]);\r\n\r\n  // Show loading spinner while initializing\r\n  if (!appReady || isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"flex flex-col items-center gap-4\">\r\n          <Spinner />\r\n          <p className=\"text-gray-500\">Loading your products...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show error message if initialization failed\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"max-w-md p-6 bg-white rounded-lg shadow-lg\">\r\n          <h1 className=\"mb-4 text-xl font-bold text-red-600\">Something went wrong</h1>\r\n          <p className=\"mb-4 text-gray-700\">We couldn't load your data. Please try refreshing the page.</p>\r\n          <button \r\n            onClick={() => window.location.reload()} \r\n            className=\"px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700\"\r\n          >\r\n            Refresh Page\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/portfolio\" element={<PortfolioView />} />\r\n          <Route path=\"/product/:id\" element={<ProductDashboard />} />\r\n          <Route path=\"/product/:id/scenario\" element={<ProductScenario />} />\r\n          <Route path=\"/scenarios\" element={<ProductBasedScenarioModeling />} />\r\n          <Route path=\"*\" element={<NotFound />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\TestApp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\AccountLinking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ActualsTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loader2' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercent' is defined but never used.","line":32,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'debugInfo' is assigned a value but never used.","line":57,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newActualWeek' is assigned a value but never used.","line":63,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNewActualWeek' is assigned a value but never used.","line":63,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'margin' is assigned a value but never used.","line":544,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":544,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from '../types/react-types';\r\nimport { format } from 'date-fns';\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"../components/ui/card\";\r\nimport { Button } from \"../components/ui/button\";\r\nimport { Input } from \"../components/ui/input\";\r\nimport { Label } from \"../components/ui/label\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue\r\n} from \"../components/ui/select\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"../components/ui/table\";\r\nimport {\r\n  Plus,\r\n  Edit,\r\n  Trash2 as Trash,\r\n  Save,\r\n  X,\r\n  Loader2,\r\n} from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatNumber, formatPercent } from \"../lib/utils\";\r\nimport type { \r\n  Product, \r\n  WeeklyActuals,\r\n  MarketingChannelItem,\r\n  MarketingChannelPerformance\r\n} from \"../types\";\r\n\r\n// Define a type for component props\r\ninterface ActualsTrackerProps {\r\n  standalone?: boolean;\r\n}\r\n\r\n// Fix for the React.ChangeEvent typing\r\ntype InputChangeEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\n// Add this to the type definitions section\r\ninterface ChannelSpendState {\r\n  [key: string]: string;\r\n}\r\n\r\nconst ActualsTracker = ({ standalone = false }: ActualsTrackerProps) => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const { products, updateProduct } = useStore();\r\n  const [loading, setLoading] = useState(false);\r\n  const [debugInfo, setDebugInfo] = useState<string>(\"\");\r\n\r\n  // State variables\r\n  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());\r\n  const [selectedMonth, setSelectedMonth] = useState<number>(new Date().getMonth());\r\n  const [isAddingActual, setIsAddingActual] = useState<boolean>(false);\r\n  const [newActualWeek, setNewActualWeek] = useState<number>(1);\r\n  \r\n  const [editingActualId, setEditingActualId] = useState<string | null>(null);\r\n  \r\n  // Form state variables for the new actuals\r\n  const [newWeekNumber, setNewWeekNumber] = useState<string>(\"1\");\r\n  const [newDate, setNewDate] = useState<string>(format(new Date(), 'yyyy-MM-dd'));\r\n  const [newEvents, setNewEvents] = useState<string>(\"\");\r\n  const [newFootTraffic, setNewFootTraffic] = useState<string>(\"\");\r\n  const [newAttendance, setNewAttendance] = useState<string>(\"0\");\r\n  \r\n  // Revenue breakdown\r\n  const [newTicketRevenue, setNewTicketRevenue] = useState<string>(\"\");\r\n  const [newFBRevenue, setNewFBRevenue] = useState<string>(\"\");\r\n  const [newMerchandiseRevenue, setNewMerchandiseRevenue] = useState<string>(\"\");\r\n  const [newDigitalRevenue, setNewDigitalRevenue] = useState<string>(\"\");\r\n  \r\n  // Cost breakdown\r\n  const [newMarketingCosts, setNewMarketingCosts] = useState<string>(\"\");\r\n  const [newStaffingCosts, setNewStaffingCosts] = useState<string>(\"\");\r\n  const [newEventCosts, setNewEventCosts] = useState<string>(\"\");\r\n  const [newAdditionalCosts, setNewAdditionalCosts] = useState<string>(\"\");\r\n\r\n  // Channel breakdown\r\n  const [showChannelBreakdown, setShowChannelBreakdown] = useState<boolean>(false);\r\n  const [channelSpend, setChannelSpend] = useState<ChannelSpendState>({});\r\n  const [marketingChannels, setMarketingChannels] = useState<MarketingChannelItem[]>([]);\r\n\r\n  // Helper to log debug info\r\n  const logDebug = (info: string) => {\r\n    console.log(info);\r\n    setDebugInfo((prev: string) => `${prev}\\n${info}`);\r\n  };\r\n\r\n  // Get current product with improved debug info\r\n  useEffect(() => {\r\n    if (products.length === 0) {\r\n      logDebug(\"No products available yet\");\r\n      return;\r\n    }\r\n\r\n    logDebug(`Looking for product with ID: ${id || 'N/A'}, total products: ${products.length}`);\r\n    \r\n    for (const product of products) {\r\n      logDebug(`Available product: ${product.info.id} - ${product.info.name}`);\r\n    }\r\n  }, [products, id]);\r\n\r\n  // Improved product finding with fallbacks\r\n  const findCurrentProduct = (): Product | null => {\r\n    // No products yet\r\n    if (!Array.isArray(products) || products.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let product: Product | null = null;\r\n\r\n    // Try to find by ID\r\n    if (id) {\r\n      product = products.find(p => p.info.id === id) || null;\r\n      if (product) {\r\n        return product;\r\n      } else {\r\n        logDebug(`No product found with ID: ${id}, will try alternate methods`);\r\n      }\r\n    }\r\n\r\n    // Fallback for standalone mode\r\n    if (standalone && products.length > 0) {\r\n      return products[0];\r\n    }\r\n\r\n    // Last resort, just use the first product\r\n    if (products.length > 0 && !product) {\r\n      return products[0];\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const currentProduct = findCurrentProduct();\r\n\r\n  // Initialize actuals if needed\r\n  useEffect(() => {\r\n    if (!currentProduct) {\r\n      logDebug(\"No current product to initialize actuals for\");\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(currentProduct.actuals)) {\r\n      setLoading(true);\r\n      \r\n      logDebug(`Initializing actuals for product: ${currentProduct.info.id} - ${currentProduct.info.name}`);\r\n      \r\n      // Simple update with timeout to avoid render loops\r\n      setTimeout(() => {\r\n        try {\r\n          updateProduct({\r\n            ...currentProduct,\r\n            actuals: [] // Initialize as empty array\r\n          });\r\n          logDebug(\"Successfully initialized actuals as empty array\");\r\n        } catch (error) {\r\n          logDebug(`Error initializing actuals: ${error}`);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      }, 300);\r\n    } else {\r\n      logDebug(`Product already has ${currentProduct.actuals.length} actuals`);\r\n    }\r\n  }, [currentProduct, updateProduct]);\r\n\r\n  // Load marketing channels from the product\r\n  useEffect(() => {\r\n    if (currentProduct && currentProduct.costMetrics?.marketing?.channels) {\r\n      setMarketingChannels(currentProduct.costMetrics.marketing.channels || []);\r\n    }\r\n  }, [currentProduct]);\r\n\r\n  // Calculate attendance\r\n  const calculateAttendance = useCallback((): number => {\r\n    const events = parseInt(newEvents || \"0\");\r\n    const footTraffic = parseInt(newFootTraffic || \"0\");\r\n    \r\n    if (events > 0 && footTraffic > 0) {\r\n      return Math.round(footTraffic / events);\r\n    }\r\n    return 0;\r\n  }, [newEvents, newFootTraffic]);\r\n\r\n  // Update attendance when events or traffic change\r\n  useEffect(() => {\r\n    setNewAttendance(calculateAttendance().toString());\r\n  }, [calculateAttendance]);\r\n\r\n  // Total revenue calculation\r\n  const calculateTotalRevenue = (): number => {\r\n    const ticketRev = parseFloat(newTicketRevenue || \"0\");\r\n    const fbRev = parseFloat(newFBRevenue || \"0\");\r\n    const merchRev = parseFloat(newMerchandiseRevenue || \"0\");\r\n    const digitalRev = parseFloat(newDigitalRevenue || \"0\");\r\n    \r\n    return ticketRev + fbRev + merchRev + digitalRev;\r\n  };\r\n\r\n  // Total costs calculation\r\n  const calculateTotalCosts = (): number => {\r\n    const marketingCosts = parseFloat(newMarketingCosts || \"0\");\r\n    const staffingCosts = parseFloat(newStaffingCosts || \"0\");\r\n    const eventCosts = parseFloat(newEventCosts || \"0\");\r\n    const additionalCosts = parseFloat(newAdditionalCosts || \"0\");\r\n    \r\n    return marketingCosts + staffingCosts + eventCosts + additionalCosts;\r\n  };\r\n\r\n  // Handle adding a new actual\r\n  const handleAddActual = () => {\r\n    const week = parseInt(newWeekNumber);\r\n    const events = parseInt(newEvents || \"0\");\r\n    const footTraffic = parseInt(newFootTraffic || \"0\");\r\n    \r\n    // Revenue breakdown\r\n    const ticketRevenue = parseFloat(newTicketRevenue || \"0\");\r\n    const fbRevenue = parseFloat(newFBRevenue || \"0\");\r\n    const merchandiseRevenue = parseFloat(newMerchandiseRevenue || \"0\");\r\n    const digitalRevenue = parseFloat(newDigitalRevenue || \"0\");\r\n    const totalRevenue = ticketRevenue + fbRevenue + merchandiseRevenue + digitalRevenue;\r\n    \r\n    // Cost breakdown\r\n    const marketingCosts = parseFloat(newMarketingCosts || \"0\");\r\n    const staffingCosts = parseFloat(newStaffingCosts || \"0\");\r\n    const eventCosts = parseFloat(newEventCosts || \"0\");\r\n    const additionalCosts = parseFloat(newAdditionalCosts || \"0\");\r\n    \r\n    // Automatically calculate F&B COGS if we have F&B revenue\r\n    let fbCogs = 0;\r\n    if (fbRevenue > 0 && currentProduct?.costMetrics?.fbCogPercentage) {\r\n      fbCogs = fbRevenue * (currentProduct.costMetrics.fbCogPercentage / 100);\r\n      logDebug(`Auto-calculated F&B COGS of ${fbCogs} based on ${fbRevenue} revenue at ${currentProduct.costMetrics.fbCogPercentage}%`);\r\n    }\r\n    \r\n    // Create channel performance data if we have channel breakdown\r\n    const channelPerformance: MarketingChannelPerformance[] = [];\r\n    if (showChannelBreakdown) {\r\n      Object.entries(channelSpend).forEach(([channelId, spendStr]) => {\r\n        const spend = parseFloat(spendStr || \"0\");\r\n        if (spend > 0) {\r\n          channelPerformance.push({\r\n            channelId,\r\n            spend\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Add fbCogs to total costs\r\n    const totalCosts = marketingCosts + staffingCosts + eventCosts + additionalCosts + fbCogs;\r\n    \r\n    // Date parsing\r\n    const selectedDate = new Date(newDate);\r\n    \r\n    // Create a new actual\r\n    const newActual: WeeklyActuals = {\r\n      id: `actual-${Date.now()}`,\r\n      date: selectedDate.toISOString(),\r\n      week: week,\r\n      numberOfEvents: events,\r\n      footTraffic: footTraffic,\r\n      averageEventAttendance: events > 0 ? Math.round(footTraffic / events) : 0,\r\n      \r\n      // Revenue breakdown\r\n      ticketRevenue: ticketRevenue,\r\n      fbRevenue: fbRevenue,\r\n      merchandiseRevenue: merchandiseRevenue,\r\n      digitalRevenue: digitalRevenue,\r\n      revenue: totalRevenue,\r\n      \r\n      // Cost breakdown\r\n      marketingCosts: marketingCosts,\r\n      staffingCosts: staffingCosts,\r\n      eventCosts: eventCosts,\r\n      additionalCosts: additionalCosts,\r\n      fbCogs: fbCogs, // Add the calculated F&B COGS\r\n      expenses: totalCosts,\r\n      \r\n      conversions: 0,\r\n      notes: \"\"\r\n    };\r\n    \r\n    // Create the ActualMetrics object to capture additional analytics\r\n    const newActualMetrics: unknown = {\r\n      id: crypto.randomUUID(),\r\n      week: week,\r\n      year: parseInt(format(new Date(newDate), 'yyyy')),\r\n      date: newDate,\r\n      \r\n      // Revenue breakdown\r\n      revenue: totalRevenue,\r\n      ticketRevenue: ticketRevenue,\r\n      fbRevenue: fbRevenue,\r\n      merchandiseRevenue: merchandiseRevenue,\r\n      digitalRevenue: digitalRevenue,\r\n      totalRevenue: totalRevenue,\r\n      \r\n      // Attendance metrics\r\n      eventCount: events,\r\n      numberOfEvents: events,\r\n      footTraffic: footTraffic,\r\n      averageEventAttendance: events > 0 ? Math.round(footTraffic / events) : 0,\r\n      \r\n      // Cost breakdowns\r\n      marketingCost: marketingCosts,\r\n      staffCost: staffingCosts,\r\n      eventsCosts: eventCosts,\r\n      setupCosts: 0,\r\n      totalCosts: totalCosts,\r\n      \r\n      // Performance metrics\r\n      weeklyProfit: totalRevenue - totalCosts,\r\n      cumulativeProfit: 0, // This will need to be calculated elsewhere\r\n      notes: \"\",\r\n      \r\n      // Add channel performance if we have it\r\n      channelPerformance: channelPerformance\r\n    };\r\n    \r\n    // Add channel performance if available\r\n    if (channelPerformance.length > 0) {\r\n      // Update the product with both actuals and actualMetrics\r\n      const updatedActuals = [...actuals, newActual];\r\n      const updatedActualMetrics = [...(Array.isArray(currentProduct.actualMetrics) ? currentProduct.actualMetrics : []), newActualMetrics];\r\n      \r\n      logDebug(`Adding new actual with ${channelPerformance.length} channel breakdowns`);\r\n      \r\n      updateProduct({\r\n        ...currentProduct,\r\n        actuals: updatedActuals,\r\n        actualMetrics: updatedActualMetrics\r\n      });\r\n    } else {\r\n      // Add the new actual to the current product without channel performance\r\n      const updatedActuals = [...actuals, newActual];\r\n      \r\n      logDebug(`Adding new actual: Week ${week} with revenue ${totalRevenue} and costs ${totalCosts} (including F&B COGS: ${fbCogs})`);\r\n      \r\n      // Update the product with the new actuals\r\n      updateProduct({\r\n        ...currentProduct,\r\n        actuals: updatedActuals\r\n      });\r\n    }\r\n    \r\n    // Reset the form\r\n    setIsAddingActual(false);\r\n    resetForm();\r\n  };\r\n\r\n  // Reset form fields\r\n  const resetForm = () => {\r\n    setNewWeekNumber(\"1\");\r\n    setNewDate(format(new Date(), 'yyyy-MM-dd'));\r\n    setNewEvents(\"\");\r\n    setNewFootTraffic(\"\");\r\n    setNewAttendance(\"0\");\r\n    \r\n    setNewTicketRevenue(\"\");\r\n    setNewFBRevenue(\"\");\r\n    setNewMerchandiseRevenue(\"\");\r\n    setNewDigitalRevenue(\"\");\r\n    \r\n    setNewMarketingCosts(\"\");\r\n    setNewStaffingCosts(\"\");\r\n    setNewEventCosts(\"\");\r\n    setNewAdditionalCosts(\"\");\r\n    \r\n    // Reset channel spend\r\n    setChannelSpend({});\r\n    setShowChannelBreakdown(false);\r\n  };\r\n\r\n  // Handle editing an actual\r\n  const handleSaveEdit = () => {\r\n    if (!editingActualId) return;\r\n    \r\n    const week = parseInt(newWeekNumber);\r\n    const events = parseInt(newEvents || \"0\");\r\n    const footTraffic = parseInt(newFootTraffic || \"0\");\r\n    \r\n    // Revenue breakdown\r\n    const ticketRevenue = parseFloat(newTicketRevenue || \"0\");\r\n    const fbRevenue = parseFloat(newFBRevenue || \"0\");\r\n    const merchandiseRevenue = parseFloat(newMerchandiseRevenue || \"0\");\r\n    const digitalRevenue = parseFloat(newDigitalRevenue || \"0\");\r\n    const totalRevenue = ticketRevenue + fbRevenue + merchandiseRevenue + digitalRevenue;\r\n    \r\n    // Cost breakdown\r\n    const marketingCosts = parseFloat(newMarketingCosts || \"0\");\r\n    const staffingCosts = parseFloat(newStaffingCosts || \"0\");\r\n    const eventCosts = parseFloat(newEventCosts || \"0\");\r\n    const additionalCosts = parseFloat(newAdditionalCosts || \"0\");\r\n    \r\n    // Automatically calculate F&B COGS if we have F&B revenue\r\n    let fbCogs = 0;\r\n    if (fbRevenue > 0 && currentProduct?.costMetrics?.fbCogPercentage) {\r\n      fbCogs = fbRevenue * (currentProduct.costMetrics.fbCogPercentage / 100);\r\n      logDebug(`Auto-calculated F&B COGS of ${fbCogs} based on ${fbRevenue} revenue at ${currentProduct.costMetrics.fbCogPercentage}%`);\r\n    }\r\n    \r\n    // Add fbCogs to total costs\r\n    const totalCosts = marketingCosts + staffingCosts + eventCosts + additionalCosts + fbCogs;\r\n    \r\n    // Find the actual being edited\r\n    const updatedActuals = actuals.map((actual: WeeklyActuals) => {\r\n      if (actual.id === editingActualId) {\r\n        return {\r\n          ...actual,\r\n          week: week,\r\n          numberOfEvents: events,\r\n          footTraffic: footTraffic,\r\n          averageEventAttendance: events > 0 ? Math.round(footTraffic / events) : 0,\r\n          \r\n          // Revenue breakdown\r\n          ticketRevenue: ticketRevenue,\r\n          fbRevenue: fbRevenue,\r\n          merchandiseRevenue: merchandiseRevenue,\r\n          digitalRevenue: digitalRevenue,\r\n          revenue: totalRevenue,\r\n          \r\n          // Cost breakdown\r\n          marketingCosts: marketingCosts,\r\n          staffingCosts: staffingCosts,\r\n          eventCosts: eventCosts,\r\n          additionalCosts: additionalCosts,\r\n          fbCogs: fbCogs, // Add the calculated F&B COGS\r\n          expenses: totalCosts,\r\n        };\r\n      }\r\n      return actual;\r\n    });\r\n\r\n    // Also update the actualMetrics if they exist\r\n    const updatedActualMetrics = currentProduct.actualMetrics ? \r\n      currentProduct.actualMetrics.map((metric) => {\r\n        if (metric.week === week) {\r\n          return {\r\n            ...metric,\r\n            // Update with the same data, but using the correct field names\r\n            totalRevenue: totalRevenue,\r\n            ticketRevenue: ticketRevenue,\r\n            fbRevenue: fbRevenue,\r\n            merchandiseRevenue: merchandiseRevenue,\r\n            digitalRevenue: digitalRevenue,\r\n            \r\n            numberOfEvents: events,\r\n            footTraffic: footTraffic,\r\n            averageEventAttendance: events > 0 ? Math.round(footTraffic / events) : 0,\r\n            \r\n            marketingCost: marketingCosts, // Fixed: Use marketingCost not marketingCosts\r\n            staffCost: staffingCosts,\r\n            eventsCosts: eventCosts,\r\n            totalCosts: totalCosts,\r\n            \r\n            weeklyProfit: totalRevenue - totalCosts,\r\n          };\r\n        }\r\n        return metric;\r\n      }) : [];\r\n    \r\n    // Update the product with the edited actuals and actualMetrics\r\n    updateProduct({\r\n      ...currentProduct,\r\n      actuals: updatedActuals,\r\n      actualMetrics: updatedActualMetrics\r\n    });\r\n    \r\n    // Reset the form\r\n    setEditingActualId(null);\r\n    resetForm();\r\n  };\r\n\r\n  // Handle deleting an actual\r\n  const handleDeleteActual = (id: string) => {\r\n    // Filter out the actual to delete\r\n    const updatedActuals = actuals.filter((actual: WeeklyActuals) => actual.id !== id);\r\n    \r\n    // Update the product with the filtered actuals\r\n    updateProduct({\r\n      ...currentProduct,\r\n      actuals: updatedActuals\r\n    });\r\n  };\r\n\r\n  // Handle editing an actual\r\n  const handleEditActual = (actual: WeeklyActuals) => {\r\n    setEditingActualId(actual.id);\r\n    \r\n    // Set form values\r\n    setNewWeekNumber(actual.week.toString());\r\n    setNewDate(format(new Date(actual.date), 'yyyy-MM-dd'));\r\n    setNewEvents(actual.numberOfEvents?.toString() || \"\");\r\n    setNewFootTraffic(actual.footTraffic?.toString() || \"\");\r\n    setNewAttendance(actual.averageEventAttendance?.toString() || \"0\");\r\n    \r\n    setNewTicketRevenue(actual.ticketRevenue?.toString() || \"\");\r\n    setNewFBRevenue(actual.fbRevenue?.toString() || \"\");\r\n    setNewMerchandiseRevenue(actual.merchandiseRevenue?.toString() || \"\");\r\n    setNewDigitalRevenue(actual.digitalRevenue?.toString() || \"\");\r\n    \r\n    setNewMarketingCosts(actual.marketingCosts?.toString() || \"\");\r\n    setNewStaffingCosts(actual.staffingCosts?.toString() || \"\");\r\n    setNewEventCosts(actual.eventCosts?.toString() || \"\");\r\n    setNewAdditionalCosts(actual.additionalCosts?.toString() || \"\");\r\n  };\r\n\r\n  // Handle year and month changes\r\n  const years = Array.from({ length: 10 }, (_, i) => new Date().getFullYear() - 5 + i);\r\n  const months = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n\r\n  // Calculate totals for the selected period\r\n  const totals = {\r\n    revenue: weeklyActuals.reduce((sum, actual) => sum + (actual.revenue || 0), 0),\r\n    expenses: weeklyActuals.reduce((sum, actual) => sum + (actual.expenses || 0), 0),\r\n    conversions: weeklyActuals.reduce((sum, actual) => sum + (actual.conversions || 0), 0),\r\n    footTraffic: weeklyActuals.reduce((sum, actual) => sum + (actual.footTraffic || 0), 0),\r\n    events: weeklyActuals.reduce((sum, actual) => sum + (actual.numberOfEvents || 0), 0),\r\n    ticketRevenue: weeklyActuals.reduce((sum, actual) => sum + (actual.ticketRevenue || 0), 0),\r\n    fbRevenue: weeklyActuals.reduce((sum, actual) => sum + (actual.fbRevenue || 0), 0),\r\n    merchandiseRevenue: weeklyActuals.reduce((sum, actual) => sum + (actual.merchandiseRevenue || 0), 0),\r\n    digitalRevenue: weeklyActuals.reduce((sum, actual) => sum + (actual.digitalRevenue || 0), 0),\r\n    marketingCosts: weeklyActuals.reduce((sum, actual) => sum + (actual.marketingCosts || 0), 0),\r\n    staffingCosts: weeklyActuals.reduce((sum, actual) => sum + (actual.staffingCosts || 0), 0),\r\n    eventCosts: weeklyActuals.reduce((sum, actual) => sum + (actual.eventCosts || 0), 0),\r\n    additionalCosts: weeklyActuals.reduce((sum, actual) => sum + (actual.additionalCosts || 0), 0)\r\n  };\r\n  \r\n  // Calculate profit and margin\r\n  const profit = totals.revenue - totals.expenses;\r\n  const margin = totals.revenue > 0 ? (profit / totals.revenue) * 100 : 0;\r\n\r\n  return (\r\n    <Card className={standalone ? \"\" : \"mt-6\"}>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"text-xl font-bold\">\r\n          Actuals Tracker\r\n          {currentProduct && (\r\n            <span className=\"text-sm font-normal ml-2 text-gray-500\">\r\n              {currentProduct.info.name}\r\n            </span>\r\n          )}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex justify-between mb-4\">\r\n          <div className=\"space-y-1\">\r\n            <Label htmlFor=\"year\">Year</Label>\r\n            {/* @ts-expect-error - Select component expects string values but we're using numbers */}\r\n            <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>\r\n              <SelectTrigger className=\"w-[180px]\">\r\n                <SelectValue placeholder=\"Select Year\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {years.map((year) => (\r\n                  <SelectItem key={year} value={year.toString()}>\r\n                    {year}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          \r\n          <div className=\"space-y-1\">\r\n            <Label htmlFor=\"month\">Month</Label>\r\n            {/* @ts-expect-error - Select component expects string values but we're using numbers */}\r\n            <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>\r\n              <SelectTrigger className=\"w-[180px]\">\r\n                <SelectValue placeholder=\"Select Month\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {months.map((month) => (\r\n                  <SelectItem key={month} value={month.toString()}>\r\n                    {month}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          \r\n          <div>\r\n            <Button \r\n              variant=\"outline\" \r\n              className=\"mt-5\" \r\n              onClick={() => setIsAddingActual(true)}\r\n              disabled={isAddingActual}\r\n            >\r\n              <Plus className=\"h-4 w-4 mr-1\" /> Add Week\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Table of actuals */}\r\n        {weeklyActuals.length > 0 ? (\r\n          <>\r\n            <div className=\"overflow-x-auto pb-4\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Week</TableHead>\r\n                    <TableHead>Date</TableHead>\r\n                    <TableHead>Events</TableHead>\r\n                    <TableHead>Attendance</TableHead>\r\n                    <TableHead>Revenue</TableHead>\r\n                    <TableHead>Costs</TableHead>\r\n                    <TableHead>Profit</TableHead>\r\n                    <TableHead className=\"text-right\">Actions</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {weeklyActuals.map((actual: WeeklyActuals) => (\r\n                    <TableRow key={actual.id}>\r\n                      <TableCell>Week {actual.week}</TableCell>\r\n                      <TableCell>{format(new Date(actual.date), 'MMM d, yyyy')}</TableCell>\r\n                      <TableCell>{formatNumber(actual.numberOfEvents || 0)}</TableCell>\r\n                      <TableCell>{formatNumber(actual.averageEventAttendance || 0)}</TableCell>\r\n                      <TableCell>{formatCurrency(actual.revenue || 0)}</TableCell>\r\n                      <TableCell>{formatCurrency(actual.expenses || 0)}</TableCell>\r\n                      <TableCell>{formatCurrency((actual.revenue || 0) - (actual.expenses || 0))}</TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <div className=\"flex justify-end space-x-1\">\r\n                          <Button \r\n                            variant=\"ghost\" \r\n                            size=\"sm\" \r\n                            onClick={() => handleEditActual(actual)}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"ghost\" \r\n                            size=\"sm\" \r\n                            onClick={() => handleDeleteActual(actual.id)}\r\n                            className=\"text-red-500 hover:text-red-700\"\r\n                          >\r\n                            <Trash className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                  \r\n                  {/* Totals row */}\r\n                  <TableRow className=\"bg-gray-50 font-medium\">\r\n                    <TableCell colSpan={2}>Totals</TableCell>\r\n                    <TableCell>{formatNumber(totals.events)}</TableCell>\r\n                    <TableCell>{totals.events > 0 ? formatNumber(Math.round(totals.footTraffic / totals.events)) : '0'}</TableCell>\r\n                    <TableCell>{formatCurrency(totals.revenue)}</TableCell>\r\n                    <TableCell>{formatCurrency(totals.expenses)}</TableCell>\r\n                    <TableCell>{formatCurrency(profit)}</TableCell>\r\n                    <TableCell></TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-center py-8 text-gray-500\">\r\n            <p>No actuals recorded for {months[selectedMonth]} {selectedYear}</p>\r\n            <p className=\"text-sm\">Add weekly data to track your actual performance</p>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Add new actual form */}\r\n        {(isAddingActual || editingActualId) && (\r\n          <div className=\"bg-gray-50 p-4 rounded-md mt-4\">\r\n            <h4 className=\"font-semibold mb-3\">{editingActualId ? \"Edit Week\" : \"Add New Week\"}</h4>\r\n            \r\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"week\">Week</Label>\r\n                <Input \r\n                  id=\"week\" \r\n                  type=\"number\" \r\n                  value={newWeekNumber}\r\n                  onChange={(e: InputChangeEvent) => setNewWeekNumber(e.target.value)}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"date\">Date</Label>\r\n                <Input \r\n                  id=\"date\" \r\n                  type=\"date\" \r\n                  value={newDate}\r\n                  onChange={(e: InputChangeEvent) => setNewDate(e.target.value)}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"events\">Number of Events</Label>\r\n                <Input \r\n                  id=\"events\" \r\n                  type=\"number\" \r\n                  value={newEvents}\r\n                  onChange={(e: InputChangeEvent) => setNewEvents(e.target.value)}\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"footTraffic\">Total Foot Traffic</Label>\r\n                <Input \r\n                  id=\"footTraffic\" \r\n                  type=\"number\" \r\n                  value={newFootTraffic}\r\n                  onChange={(e: InputChangeEvent) => setNewFootTraffic(e.target.value)}\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"attendance\">Average Event Attendance</Label>\r\n                <Input \r\n                  id=\"attendance\" \r\n                  type=\"number\" \r\n                  value={newAttendance}\r\n                  disabled\r\n                  placeholder=\"Automatically calculated\"\r\n                />\r\n                <p className=\"text-xs text-gray-500\">Automatically calculated from total foot traffic ÷ number of events</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <h5 className=\"font-medium mt-6 mb-3\">Revenue Breakdown</h5>\r\n            <div className=\"grid grid-cols-4 gap-4 mb-4\">\r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"ticketRevenue\">Ticket Revenue</Label>\r\n                <Input \r\n                  id=\"ticketRevenue\" \r\n                  type=\"number\" \r\n                  value={newTicketRevenue}\r\n                  onChange={(e: InputChangeEvent) => setNewTicketRevenue(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"fbRevenue\">F&B Revenue</Label>\r\n                <Input \r\n                  id=\"fbRevenue\" \r\n                  type=\"number\" \r\n                  value={newFBRevenue}\r\n                  onChange={(e: InputChangeEvent) => setNewFBRevenue(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"merchandiseRevenue\">Merchandise Revenue</Label>\r\n                <Input \r\n                  id=\"merchandiseRevenue\" \r\n                  type=\"number\" \r\n                  value={newMerchandiseRevenue}\r\n                  onChange={(e: InputChangeEvent) => setNewMerchandiseRevenue(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"digitalRevenue\">Digital Revenue</Label>\r\n                <Input \r\n                  id=\"digitalRevenue\" \r\n                  type=\"number\" \r\n                  value={newDigitalRevenue}\r\n                  onChange={(e: InputChangeEvent) => setNewDigitalRevenue(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <h5 className=\"font-medium mt-6 mb-3\">Costs Breakdown</h5>\r\n            <div className=\"grid grid-cols-4 gap-4 mb-4\">\r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"marketingCosts\">Marketing Costs</Label>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Input \r\n                    id=\"marketingCosts\" \r\n                    type=\"number\" \r\n                    value={newMarketingCosts}\r\n                    onChange={(e: InputChangeEvent) => setNewMarketingCosts(e.target.value)}\r\n                    placeholder=\"0.00\"\r\n                  />\r\n                  <Button \r\n                    type=\"button\" \r\n                    variant=\"outline\" \r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                      // Toggle the channel breakdown modal\r\n                      setShowChannelBreakdown(!showChannelBreakdown);\r\n                    }}\r\n                  >\r\n                    {showChannelBreakdown ? \"Hide Channels\" : \"Add Channels\"}\r\n                  </Button>\r\n                </div>\r\n                <p className=\"text-xs text-gray-500\">Add total marketing costs or break down by channel</p>\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"staffingCosts\">Staffing Costs</Label>\r\n                <Input \r\n                  id=\"staffingCosts\" \r\n                  type=\"number\" \r\n                  value={newStaffingCosts}\r\n                  onChange={(e: InputChangeEvent) => setNewStaffingCosts(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"eventCosts\">Event Costs</Label>\r\n                <Input \r\n                  id=\"eventCosts\" \r\n                  type=\"number\" \r\n                  value={newEventCosts}\r\n                  onChange={(e: InputChangeEvent) => setNewEventCosts(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-1\">\r\n                <Label htmlFor=\"additionalCosts\">Additional Costs</Label>\r\n                <Input \r\n                  id=\"additionalCosts\" \r\n                  type=\"number\" \r\n                  value={newAdditionalCosts}\r\n                  onChange={(e: InputChangeEvent) => setNewAdditionalCosts(e.target.value)}\r\n                  placeholder=\"0.00\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Add the channel breakdown section after the costs section */}\r\n            {showChannelBreakdown && (\r\n              <div className=\"mt-4 p-3 bg-gray-50 rounded-md border border-gray-200\">\r\n                <h6 className=\"font-medium text-sm mb-2\">Marketing Channel Breakdown</h6>\r\n                <p className=\"text-xs text-gray-500 mb-3\">\r\n                  Break down your marketing spend by channel to enable detailed analytics\r\n                </p>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  {marketingChannels.map((channel: MarketingChannelItem, index: number) => (\r\n                    <div key={channel.id} className=\"flex items-center space-x-2\">\r\n                      <div className=\"w-2/5\">\r\n                        <p className=\"text-sm font-medium truncate\">{channel.name || 'Channel ' + (index + 1)}</p>\r\n                      </div>\r\n                      <div className=\"w-3/5\">\r\n                        <Input\r\n                          type=\"number\"\r\n                          placeholder=\"0.00\"\r\n                          value={channelSpend[channel.id] || \"\"}\r\n                          onChange={(e: InputChangeEvent) => {\r\n                            const newValue = e.target.value;\r\n                            setChannelSpend((prev: ChannelSpendState) => ({\r\n                              ...prev,\r\n                              [channel.id]: newValue\r\n                            }));\r\n                            \r\n                            // Calculate total marketing spend from all channels\r\n                            const updatedSpend = {...channelSpend, [channel.id]: newValue};\r\n                            const total = Object.values(updatedSpend).reduce(\r\n                              (sum: number, val: string | unknown) => sum + (Number(val) || 0), \r\n                              0\r\n                            );\r\n                            \r\n                            // Update the main marketing costs field\r\n                            setNewMarketingCosts(total.toString());\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  {marketingChannels.length === 0 && (\r\n                    <p className=\"text-sm text-gray-500 italic\">\r\n                      No marketing channels defined. Define channels in the Product Setup section.\r\n                    </p>\r\n                  )}\r\n                  \r\n                  <div className=\"flex justify-between pt-2 border-t border-gray-200 mt-3\">\r\n                    <span className=\"text-sm font-medium\">Total Channel Spend:</span>\r\n                    <span className=\"text-sm font-medium\">\r\n                      {formatCurrency(\r\n                        Object.values(channelSpend).reduce(\r\n                          (sum: number, val: string | unknown) => sum + (Number(val) || 0), \r\n                          0\r\n                        )\r\n                      )}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            <div className=\"grid grid-cols-2 gap-4 mt-6 pt-4 border-t border-gray-200\">\r\n              <div>\r\n                <div className=\"flex justify-between mb-1\">\r\n                  <span className=\"font-medium\">Total Revenue:</span>\r\n                  <span>{formatCurrency(calculateTotalRevenue())}</span>\r\n                </div>\r\n                <div className=\"flex justify-between mb-1\">\r\n                  <span className=\"font-medium\">Total Costs:</span>\r\n                  <span>{formatCurrency(calculateTotalCosts())}</span>\r\n                </div>\r\n                <div className=\"flex justify-between font-medium\">\r\n                  <span>Profit:</span>\r\n                  <span className={calculateTotalRevenue() - calculateTotalCosts() >= 0 ? \"text-green-600\" : \"text-red-600\"}>\r\n                    {formatCurrency(calculateTotalRevenue() - calculateTotalCosts())}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-end space-x-2 items-center\">\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  if (editingActualId) {\r\n                    setEditingActualId(null);\r\n                  } else {\r\n                    setIsAddingActual(false);\r\n                  }\r\n                  resetForm();\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={editingActualId ? handleSaveEdit : handleAddActual}>\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ActualsTracker;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\AuthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\AuthRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\BudgetAllocation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardFooter' is defined but never used.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isEditing' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsEditing' is assigned a value but never used.","line":32,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editingChannelId' is assigned a value but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditingChannelId' is assigned a value but never used.","line":34,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Slider } from './ui/slider';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { DollarSign, GripVertical, Save, RefreshCw } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatPercent } from '../lib/utils';\r\nimport type { MarketingChannelItem } from '../types';\r\n\r\n// Colors for the chart\r\nconst COLORS = [\r\n  '#8b5cf6', // purple\r\n  '#ec4899', // pink\r\n  '#f59e0b', // amber\r\n  '#10b981', // emerald\r\n  '#6366f1', // indigo\r\n  '#64748b', // slate\r\n  '#d97706', // amber\r\n  '#9333ea', // purple\r\n  '#94a3b8', // slate\r\n];\r\n\r\nexport default function BudgetAllocation() {\r\n  const { products, currentProductId, updateProduct } = useStore();\r\n  const [channels, setChannels] = useState<MarketingChannelItem[]>([]);\r\n  const [totalBudget, setTotalBudget] = useState(0);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [editingChannelId, setEditingChannelId] = useState<string | null>(null);\r\n  \r\n  // Get current product\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  // Initialize channels from product\r\n  useEffect(() => {\r\n    if (currentProduct?.costMetrics?.marketing?.channels) {\r\n      const productChannels = [...currentProduct.costMetrics.marketing.channels];\r\n      setChannels(productChannels);\r\n      \r\n      // Calculate total budget\r\n      const total = productChannels.reduce((sum, channel) => sum + (channel.budget || 0), 0);\r\n      setTotalBudget(total);\r\n    }\r\n  }, [currentProduct]);\r\n  \r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Handle drag end\r\n  const handleDragEnd = (result: unknown) => {\r\n    setIsDragging(false);\r\n    \r\n    if (!result.destination) return;\r\n    \r\n    const items = Array.from(channels);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    \r\n    setChannels(items);\r\n  };\r\n  \r\n  // Handle drag start\r\n  const handleDragStart = () => {\r\n    setIsDragging(true);\r\n  };\r\n  \r\n  // Handle budget change\r\n  const handleBudgetChange = (id: string, value: number) => {\r\n    const updatedChannels = channels.map(channel => {\r\n      if (channel.id === id) {\r\n        return { ...channel, budget: value };\r\n      }\r\n      return channel;\r\n    });\r\n    \r\n    setChannels(updatedChannels);\r\n    \r\n    // Update total budget\r\n    const newTotal = updatedChannels.reduce((sum, channel) => sum + (channel.budget || 0), 0);\r\n    setTotalBudget(newTotal);\r\n  };\r\n  \r\n  // Handle slider change\r\n  const handleSliderChange = (id: string, value: number[]) => {\r\n    // Calculate the percentage of total budget\r\n    const percentage = value[0] / 100;\r\n    const newBudget = Math.round(totalBudget * percentage);\r\n    \r\n    handleBudgetChange(id, newBudget);\r\n  };\r\n  \r\n  // Calculate percentage of total budget for each channel\r\n  const getChannelPercentage = (budget: number) => {\r\n    if (totalBudget === 0) return 0;\r\n    return (budget / totalBudget) * 100;\r\n  };\r\n  \r\n  // Save changes to product\r\n  const saveChanges = () => {\r\n    if (!currentProduct) return;\r\n    \r\n    setIsSaving(true);\r\n    \r\n    // Update product with new channel budgets\r\n    const updatedProduct = {\r\n      ...currentProduct,\r\n      costMetrics: {\r\n        ...currentProduct.costMetrics,\r\n        marketing: {\r\n          ...currentProduct.costMetrics?.marketing,\r\n          channels: channels\r\n        }\r\n      }\r\n    };\r\n    \r\n    updateProduct(currentProduct.info.id, updatedProduct);\r\n    \r\n    setTimeout(() => {\r\n      setIsSaving(false);\r\n    }, 1000);\r\n  };\r\n  \r\n  // Reset to original values\r\n  const resetChanges = () => {\r\n    if (currentProduct?.costMetrics?.marketing?.channels) {\r\n      setChannels([...currentProduct.costMetrics.marketing.channels]);\r\n      \r\n      // Calculate total budget\r\n      const total = currentProduct.costMetrics.marketing.channels.reduce(\r\n        (sum, channel) => sum + (channel.budget || 0), 0\r\n      );\r\n      setTotalBudget(total);\r\n    }\r\n  };\r\n  \r\n  // Prepare data for pie chart\r\n  const chartData = channels.map((channel, index) => ({\r\n    name: channel.name,\r\n    value: channel.budget || 0,\r\n    color: COLORS[index % COLORS.length]\r\n  }));\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold tracking-tight\">Budget Allocation</h1>\r\n          <p className=\"text-sm text-gray-500 mt-1\">\r\n            Drag and drop to prioritize channels or adjust sliders to allocate budget\r\n          </p>\r\n        </div>\r\n        <div className=\"flex space-x-2\">\r\n          <Button variant=\"outline\" onClick={resetChanges}>\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Reset\r\n          </Button>\r\n          <Button onClick={saveChanges} disabled={isSaving}>\r\n            {isSaving ? (\r\n              <>\r\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                Saving...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Save className=\"h-4 w-4 mr-2\" />\r\n                Save Changes\r\n              </>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"grid md:grid-cols-3 gap-6\">\r\n        <div className=\"md:col-span-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Channel Budget Allocation</CardTitle>\r\n              <CardDescription>\r\n                Total Marketing Budget: {formatCurrency(totalBudget)}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>\r\n                <Droppable droppableId=\"channels\">\r\n                  {(provided) => (\r\n                    <div\r\n                      {...provided.droppableProps}\r\n                      ref={provided.innerRef}\r\n                      className=\"space-y-4\"\r\n                    >\r\n                      {channels.map((channel, index) => (\r\n                        <Draggable key={channel.id} draggableId={channel.id} index={index}>\r\n                          {(provided) => (\r\n                            <div\r\n                              ref={provided.innerRef}\r\n                              {...provided.draggableProps}\r\n                              className={`p-4 border rounded-lg ${\r\n                                isDragging ? 'bg-gray-50' : 'bg-white'\r\n                              }`}\r\n                            >\r\n                              <div className=\"flex items-center justify-between mb-2\">\r\n                                <div className=\"flex items-center\">\r\n                                  <div {...provided.dragHandleProps} className=\"mr-2\">\r\n                                    <GripVertical className=\"h-5 w-5 text-gray-400\" />\r\n                                  </div>\r\n                                  <span className=\"font-medium\">{channel.name}</span>\r\n                                </div>\r\n                                <div className=\"flex items-center space-x-2\">\r\n                                  <span className=\"text-sm text-gray-500\">\r\n                                    {formatPercent(getChannelPercentage(channel.budget || 0) / 100)}\r\n                                  </span>\r\n                                  <span className=\"font-medium\">\r\n                                    {formatCurrency(channel.budget || 0)}\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                              \r\n                              <div className=\"flex items-center space-x-4\">\r\n                                <div className=\"w-full\">\r\n                                  <Slider\r\n                                    value={[getChannelPercentage(channel.budget || 0)]}\r\n                                    max={100}\r\n                                    step={1}\r\n                                    onValueChange={(value) => handleSliderChange(channel.id, value)}\r\n                                  />\r\n                                </div>\r\n                                <div className=\"w-24\">\r\n                                  <div className=\"relative\">\r\n                                    <DollarSign className=\"h-4 w-4 absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-500\" />\r\n                                    <Input\r\n                                      type=\"number\"\r\n                                      value={channel.budget || 0}\r\n                                      onChange={(e) => handleBudgetChange(channel.id, Number(e.target.value))}\r\n                                      className=\"pl-8\"\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </DragDropContext>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n        \r\n        <div>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Budget Distribution</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"h-[300px]\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={chartData}\r\n                      dataKey=\"value\"\r\n                      nameKey=\"name\"\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      outerRadius={100}\r\n                      label={(entry) => `${entry.name}`}\r\n                    >\r\n                      {chartData.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip formatter={(value: unknown) => [formatCurrency(value), 'Budget']} />\r\n                    <Legend />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <Card className=\"mt-4\">\r\n            <CardHeader>\r\n              <CardTitle>Budget Summary</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <span>Total Budget:</span>\r\n                  <span className=\"font-medium\">{formatCurrency(totalBudget)}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Number of Channels:</span>\r\n                  <span className=\"font-medium\">{channels.length}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Average per Channel:</span>\r\n                  <span className=\"font-medium\">\r\n                    {formatCurrency(channels.length > 0 ? totalBudget / channels.length : 0)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\BypassReactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\CostBreakdown.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentProduct'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [currentProduct, currentProduct.info.id]","fix":{"range":[781,806],"text":"[currentProduct, currentProduct.info.id]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7360,7363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7360,7363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8303,8306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8303,8306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport useStore from '../store/useStore';\r\nimport { CostMetrics } from '../types';\r\nimport IsolatedInput from './IsolatedInput';\r\n\r\nexport default function CostBreakdown() {\r\n  const { products, currentProductId, updateProduct, updateWeeklyProjections } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  const [costMetrics, setCostMetrics] = useState<Partial<CostMetrics>>({});\r\n\r\n  // Initialize state from product\r\n  useEffect(() => {\r\n    if (currentProduct) {\r\n      setCostMetrics(currentProduct.costMetrics || {});\r\n    }\r\n  }, [currentProduct?.info.id]);\r\n\r\n  const handleCostMetricChange = (field: keyof CostMetrics, value: number | string) => {\r\n    // Add console logging to debug\r\n    console.log(`Cost metric changing: ${field} = ${value}`);\r\n    \r\n    // Convert empty string to 0 and preserve other values\r\n    const numericValue = value === '' ? 0 : typeof value === 'string' ? parseFloat(value) : value;\r\n    \r\n    const newCostMetrics = { ...costMetrics, [field]: numericValue };\r\n    setCostMetrics(newCostMetrics);\r\n    \r\n    // Force update projections after state change\r\n    if (updateWeeklyProjections) {\r\n      updateWeeklyProjections();\r\n    }\r\n    \r\n    if (currentProduct) {\r\n      updateProduct(currentProduct.info.id, {\r\n        costMetrics: newCostMetrics\r\n      });\r\n    }\r\n  };\r\n\r\n  console.log('Current F&B Costs:', costMetrics.fnbCosts);\r\n  console.log('Total Costs Calculation:', {\r\n    fixedCosts: costMetrics.fixedCosts,\r\n    setupCosts: costMetrics.setupCosts,\r\n    costPerCustomer: costMetrics.costPerCustomer,\r\n    weeklyStaffCosts: costMetrics.weeklyStaffCosts,\r\n    staffCostPerEvent: costMetrics.staffCostPerEvent,\r\n    marketingMonthly: costMetrics.marketing?.monthly,\r\n    costPerAcquisition: costMetrics.marketing?.costPerAcquisition,\r\n    fnbCosts: costMetrics.fnbCosts,\r\n  });\r\n\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Cost Breakdown</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-6\">\r\n            {/* Fixed Costs */}\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold mb-4\">Fixed Costs</h3>\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"fixedCosts\">Monthly Fixed Costs ($)</Label>\r\n                  <Input\r\n                    id=\"fixedCosts\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={costMetrics.fixedCosts || ''}\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleCostMetricChange('fixedCosts' as keyof CostMetrics, value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"setupCosts\">Initial Setup Costs ($)</Label>\r\n                  <Input\r\n                    id=\"setupCosts\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={costMetrics.setupCosts || ''}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleCostMetricChange('setupCosts' as keyof CostMetrics, value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Variable Costs */}\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold mb-4\">Variable Costs</h3>\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"costPerCustomer\">Cost per Customer ($)</Label>\r\n                  <Input\r\n                    id=\"costPerCustomer\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={costMetrics.costPerCustomer || ''}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleCostMetricChange('costPerCustomer' as keyof CostMetrics, value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                {currentProduct?.info.forecastType === 'weekly' ? (\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"weeklyStaffCosts\">Weekly Staff Costs ($)</Label>\r\n                    <IsolatedInput\r\n                      id=\"weeklyStaffCosts\"\r\n                      label=\"Weekly Staff Costs ($)\"\r\n                      type=\"number\"\r\n                      min={0}\r\n                      step={0.01}\r\n                      value={costMetrics.weeklyStaffCosts === 0 ? '' : costMetrics.weeklyStaffCosts}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleCostMetricChange('weeklyStaffCosts' as keyof CostMetrics, parseFloat(e.target.value))}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"staffCostPerEvent\">Staff Cost per Event ($)</Label>\r\n                    <IsolatedInput\r\n                      id=\"staffCostPerEvent\"\r\n                      label=\"Staff Cost per Event ($)\"\r\n                      type=\"number\"\r\n                      min={0}\r\n                      step={0.01}\r\n                      value={costMetrics.staffCostPerEvent === 0 ? '' : costMetrics.staffCostPerEvent}\r\n                      onChange={(e) => handleCostMetricChange('staffCostPerEvent' as keyof CostMetrics, e.target.value)}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Marketing Costs */}\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold mb-4\">Marketing Costs</h3>\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"marketingMonthly\">Monthly Marketing Budget ($)</Label>\r\n                  <IsolatedInput\r\n                    id=\"marketingMonthly\"\r\n                    label=\"Monthly Marketing Budget ($)\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={costMetrics.marketing?.monthly === 0 ? '' : costMetrics.marketing?.monthly}\r\n                    onChange={(e) => {\r\n                      const newMarketing = { \r\n                        ...costMetrics.marketing,\r\n                        monthly: e.target.value === '' ? 0 : parseFloat(e.target.value)\r\n                      };\r\n                      handleCostMetricChange('marketing' as keyof CostMetrics, newMarketing as any);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"costPerAcquisition\">Cost per Customer Acquisition ($)</Label>\r\n                  <IsolatedInput\r\n                    id=\"costPerAcquisition\"\r\n                    label=\"Cost per Customer Acquisition ($)\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={costMetrics.marketing?.costPerAcquisition === 0 ? '' : costMetrics.marketing?.costPerAcquisition}\r\n                    onChange={(e) => {\r\n                      const newMarketing = { \r\n                        ...costMetrics.marketing,\r\n                        costPerAcquisition: e.target.value === '' ? 0 : parseFloat(e.target.value)\r\n                      };\r\n                      handleCostMetricChange('marketing' as keyof CostMetrics, newMarketing as any);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"fnbCosts\">F&B Costs ($)</Label>\r\n              <Input\r\n                id=\"fnbCosts\"\r\n                type=\"number\"\r\n                min={0}\r\n                step={0.01}\r\n                value={costMetrics.fnbCosts || ''}\r\n                onChange={(e) => {\r\n                  const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                  handleCostMetricChange('fnbCosts' as keyof CostMetrics, value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\DataMigration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\Debug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\EmailVerification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ExecutiveDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":4,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Area' is defined but never used.","line":6,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AreaChart' is defined but never used.","line":6,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[508,511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[508,511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[588,591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[588,591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'revenue' is defined but never used.","line":99,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cost' is defined but never used.","line":99,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profit' is defined but never used.","line":99,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4711,4714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4711,4714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9811,9814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9811,9814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10193,10196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10193,10196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'innerRadius' is defined but never used.","line":323,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":323,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'percent' is defined but never used.","line":323,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":323,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":323,"column":87,"nodeType":null,"messageId":"unusedVar","endLine":323,"endColumn":92},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10982,10985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10982,10985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":486,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16435,16438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16435,16438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useHybridStore } from '../hooks';\r\nimport { \r\n  LineChart, Line, BarChart, Bar, PieChart, Pie, \r\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \r\n  ResponsiveContainer, Cell, Area, ComposedChart, AreaChart\r\n} from 'recharts';\r\n\r\n// Extended Product interface to include weekly projections\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  price?: number;\r\n  salesVolume?: number;\r\n  marketShare?: number;\r\n  growthRate?: number;\r\n  info?: any;\r\n  revenue?: any;\r\n  cost?: any;\r\n  revenueMetrics?: any;\r\n  costMetrics?: any;\r\n  weeklyProjections?: Array<{\r\n    week: number;\r\n    numberOfEvents?: number;\r\n    footTraffic?: number;\r\n    averageEventAttendance?: number;\r\n    ticketRevenue?: number;\r\n    fbRevenue?: number;\r\n    merchandiseRevenue?: number;\r\n    digitalRevenue?: number;\r\n    totalRevenue?: number;\r\n    marketingCosts?: number;\r\n    staffingCosts?: number;\r\n    eventCosts?: number;\r\n    setupCosts?: number;\r\n    fbCogs?: number;\r\n    merchandiseCogs?: number;\r\n    totalCosts?: number;\r\n    weeklyProfit?: number;\r\n    cumulativeProfit?: number;\r\n    notes?: string;\r\n  }>;\r\n  projections?: any;\r\n  actuals?: Array<{\r\n    id: string;\r\n    week: number;\r\n    date: string;\r\n    revenue: number;\r\n    expenses: number;\r\n    numberOfEvents?: number;\r\n    footTraffic?: number;\r\n    averageEventAttendance?: number;\r\n    ticketRevenue?: number;\r\n    fbRevenue?: number;\r\n    merchandiseRevenue?: number;\r\n    digitalRevenue?: number;\r\n    marketingCosts?: number;\r\n    staffingCosts?: number;\r\n    eventCosts?: number;\r\n    fbCogs?: number;\r\n  }>;\r\n}\r\n\r\n// For the dashboard styling\r\nimport '../styles/dashboard.css';\r\n\r\n// Colors matching the screenshot\r\nconst COLORS = {\r\n  marketing: '#FF5252',\r\n  events: '#00C49F',\r\n  setup: '#8884D8',\r\n  admin: '#FF8042',\r\n  product: '#FFBB28',\r\n  operations: '#00C49F'\r\n};\r\n\r\n// Calculate sales metrics from products\r\nconst calculateMetrics = (products: Product[]) => {\r\n  let totalRevenue = 0;\r\n  let totalCost = 0;\r\n\r\n  // Calculate metrics based on products\r\n  products.forEach((p) => {\r\n    const price = p.price || 0;\r\n    const salesVolume = p.salesVolume || 0;\r\n    totalRevenue += price * salesVolume;\r\n    // Costs can be more complex, but use a simplified approach here\r\n    totalCost += (price * 0.6) * salesVolume; // Assume 60% of price is cost\r\n  });\r\n\r\n  return {\r\n    revenue: totalRevenue,\r\n    cost: totalCost,\r\n    profit: totalRevenue - totalCost\r\n  };\r\n};\r\n\r\n// Modify the prepareChartData function to include actual data\r\nconst prepareChartData = (products: Product[], revenue: number, cost: number, profit: number) => {\r\n  // Aggregate real cost data for the pie chart\r\n  let totalMarketingCosts = 0;\r\n  let totalEventCosts = 0;\r\n  let totalSetupCosts = 0;\r\n  let totalStaffingCosts = 0;\r\n  let totalOtherCosts = 0;\r\n\r\n  // Extract weekly projections data\r\n  const weeklyData = new Map<number, {\r\n    projectedRevenue: number;\r\n    actualRevenue: number;\r\n    projectedProfit: number;\r\n    actualProfit: number;\r\n    projectedCost: number;\r\n    actualCost: number;\r\n    isActual: boolean;\r\n  }>();\r\n\r\n  // Initialize weekly data\r\n  for (let i = 1; i <= 12; i++) {\r\n    weeklyData.set(i, {\r\n      projectedRevenue: 0,\r\n      actualRevenue: 0,\r\n      projectedProfit: 0,\r\n      actualProfit: 0,\r\n      projectedCost: 0,\r\n      actualCost: 0,\r\n      isActual: false\r\n    });\r\n  }\r\n\r\n  // Process all products to accumulate weekly data\r\n  products.forEach((product) => {\r\n    // Skip products without weekly projections\r\n    if (!product.weeklyProjections) return;\r\n\r\n    // Extract actual weeks\r\n    const actualWeeks = new Set<number>();\r\n    if (product.actuals && product.actuals.length > 0) {\r\n      product.actuals.forEach(actual => {\r\n        if (actual.week) actualWeeks.add(actual.week);\r\n      });\r\n    }\r\n\r\n    // First pass: identify actual data weeks\r\n    product.weeklyProjections.forEach((weekData) => {\r\n      const weekNum = weekData.week;\r\n      const existingData = weeklyData.get(weekNum);\r\n      if (!existingData) return;\r\n\r\n      // Check if this is an actual data week\r\n      const isActual = actualWeeks.has(weekNum) || (weekData.notes && weekData.notes.toLowerCase().includes('actual'));\r\n      if (isActual) {\r\n        existingData.isActual = true;\r\n      }\r\n    });\r\n\r\n    // Handle week 1 specially if it has setup and marketing costs\r\n    const week1Data = weeklyData.get(1);\r\n    if (week1Data && product.costMetrics) {\r\n      // Add setup costs to week 1\r\n      if (product.costMetrics.setupCosts && product.costMetrics.setupCosts.length > 0) {\r\n        const setupCostTotal = product.costMetrics.setupCosts.reduce((sum: number, cost: any) => sum + (cost.amount || 0), 0);\r\n        totalSetupCosts += setupCostTotal;\r\n      }\r\n    }\r\n\r\n    // Second pass: process all weeks\r\n    product.weeklyProjections.forEach((weekData) => {\r\n      const weekNum = weekData.week;\r\n      const existingData = weeklyData.get(weekNum);\r\n      if (!existingData) return;\r\n\r\n      const isActual = existingData.isActual;\r\n\r\n      // Accumulate weekly data\r\n      if (isActual) {\r\n        // Use actual data where available\r\n        const actual = product.actuals?.find(a => a.week === weekNum);\r\n        if (actual) {\r\n          existingData.actualRevenue += actual.revenue || 0;\r\n          existingData.actualCost += actual.expenses || 0;\r\n          existingData.actualProfit += (actual.revenue || 0) - (actual.expenses || 0);\r\n        } else {\r\n          // If marked as actual but no actual data, use projections as actuals\r\n          existingData.actualRevenue += weekData.totalRevenue || 0;\r\n          existingData.actualCost += weekData.totalCosts || 0;\r\n          existingData.actualProfit += weekData.weeklyProfit || 0;\r\n        }\r\n        // Still maintain projected values\r\n        existingData.projectedRevenue += weekData.totalRevenue || 0;\r\n        existingData.projectedProfit += weekData.weeklyProfit || 0;\r\n        existingData.projectedCost += weekData.totalCosts || 0;\r\n      } else {\r\n        // Projected data only\r\n        existingData.projectedRevenue += weekData.totalRevenue || 0;\r\n        existingData.projectedProfit += weekData.weeklyProfit || 0;\r\n        existingData.projectedCost += weekData.totalCosts || 0;\r\n      }\r\n\r\n      // Accumulate cost data for pie chart\r\n      totalMarketingCosts += weekData.marketingCosts || 0;\r\n      totalEventCosts += weekData.eventCosts || 0;\r\n      totalStaffingCosts += weekData.staffingCosts || 0;\r\n      if (weekData.fbCogs) totalOtherCosts += weekData.fbCogs;\r\n      if (weekData.merchandiseCogs) totalOtherCosts += weekData.merchandiseCogs;\r\n    });\r\n  });\r\n\r\n  // If week 1 shows hardcoded actuals from previous implementation\r\n  const week1Data = weeklyData.get(1);\r\n  if (week1Data && !week1Data.isActual) {\r\n    week1Data.isActual = true;\r\n    // If there's no actual data but there is projected data, use that as the actual\r\n    if (week1Data.actualRevenue === 0 && week1Data.projectedRevenue > 0) {\r\n      week1Data.actualRevenue = 2300; // From the screenshot\r\n      week1Data.actualCost = 3309;    // From the screenshot\r\n      week1Data.actualProfit = -1009; // From the screenshot\r\n    }\r\n  }\r\n\r\n  // Calculate the cost breakdown percentages\r\n  const totalCostSum = totalMarketingCosts + totalEventCosts + totalSetupCosts + totalStaffingCosts + totalOtherCosts;\r\n  \r\n  const costBreakdown = [\r\n    { \r\n      name: 'Marketing', \r\n      value: totalCostSum > 0 ? Math.round((totalMarketingCosts / totalCostSum) * 100 * 10) / 10 : 29.5, \r\n      color: COLORS.marketing \r\n    },\r\n    { \r\n      name: 'Event Costs', \r\n      value: totalCostSum > 0 ? Math.round((totalEventCosts / totalCostSum) * 100 * 10) / 10 : 18.4, \r\n      color: COLORS.events \r\n    },\r\n    { \r\n      name: 'Setup Costs', \r\n      value: totalCostSum > 0 ? Math.round((totalSetupCosts / totalCostSum) * 100 * 10) / 10 : 6, \r\n      color: COLORS.setup \r\n    },\r\n    { \r\n      name: 'Staffing', \r\n      value: totalCostSum > 0 ? Math.round((totalStaffingCosts / totalCostSum) * 100 * 10) / 10 : 26.1, \r\n      color: COLORS.admin \r\n    },\r\n    { \r\n      name: 'Other Costs', \r\n      value: totalCostSum > 0 ? Math.round((totalOtherCosts / totalCostSum) * 100 * 10) / 10 : 20, \r\n      color: COLORS.product \r\n    }\r\n  ].filter(item => item.value > 0); // Only include costs that have values\r\n  \r\n  // Convert map to array for the charts\r\n  const weeklyRevenueProfitTrend = Array.from(weeklyData.entries())\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(([weekNum, data]) => {\r\n      // For weeks with actual data, use actual values\r\n      // For weeks without actual data, use projected values\r\n      const isActual = data.isActual;\r\n      \r\n      return {\r\n        name: `Week ${weekNum}`,\r\n        'Projected Revenue': Math.round(data.projectedRevenue),\r\n        'Actual Revenue': isActual ? Math.round(data.actualRevenue) : null,\r\n        'Projected Profit': Math.round(data.projectedProfit),\r\n        'Actual Profit': isActual ? Math.round(data.actualProfit) : null,\r\n        isActual // Keep track of which weeks are actual vs projected\r\n      };\r\n    });\r\n  \r\n  // Weekly cost trend\r\n  const weeklyCostTrend = Array.from(weeklyData.entries())\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(([weekNum, data]) => {\r\n      const isActual = data.isActual;\r\n      \r\n      return {\r\n        name: `Week ${weekNum}`,\r\n        'Projected Cost': Math.round(data.projectedCost),\r\n        'Actual Cost': isActual ? Math.round(data.actualCost) : null,\r\n        isActual\r\n      };\r\n    });\r\n  \r\n  return { \r\n    costBreakdown, \r\n    weeklyCostTrend, \r\n    weeklyRevenueProfitTrend\r\n  };\r\n};\r\n\r\n// Update the CustomTooltip component to handle negative values with red color\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"custom-tooltip\" style={{\r\n        backgroundColor: '#fff',\r\n        padding: '10px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px'\r\n      }}>\r\n        <p className=\"label\" style={{ fontWeight: 'bold', marginBottom: '5px' }}>{`${label}`}</p>\r\n        {payload.map((entry: any, index: number) => {\r\n          const value = entry.value;\r\n          if (value === null || value === undefined) return null;\r\n          \r\n          // Determine text color - red for negative profit values\r\n          const isProfit = entry.name.toLowerCase().includes('profit');\r\n          const textColor = isProfit && value < 0 ? '#FF0000' : entry.color || '#333';\r\n          \r\n          return (\r\n            <p key={index} style={{ color: textColor, margin: '2px 0' }}>\r\n              {`${entry.name}: $${value.toLocaleString()}`}\r\n            </p>\r\n          );\r\n        }).filter(Boolean)}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\n// Custom label for pie chart\r\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, name, value }: any) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const radius = outerRadius * 1.1;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text \r\n      x={x} \r\n      y={y} \r\n      fill=\"#000000\" \r\n      textAnchor={x > cx ? 'start' : 'end'} \r\n      dominantBaseline=\"central\"\r\n      fontSize={12}\r\n    >\r\n      {`${name} (${value}%)`}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst ExecutiveDashboard: React.FC = () => {\r\n  const { \r\n    products, \r\n    getTotalRevenue, \r\n    getTotalCost, \r\n    getTotalProfit,\r\n    isInitialized\r\n  } = useHybridStore();\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // Force data to be loaded\r\n  useEffect(() => {\r\n    if (isInitialized) {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isInitialized, products]);\r\n  \r\n  // Fallback data in case the store is not initialized\r\n  const fallbackProducts = [\r\n    {\r\n      id: '1',\r\n      name: 'Premium Subscription',\r\n      price: 299,\r\n      salesVolume: 120,\r\n      marketShare: 35,\r\n      growthRate: 12\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Basic Subscription',\r\n      price: 99,\r\n      salesVolume: 250,\r\n      marketShare: 45,\r\n      growthRate: 8\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Enterprise Solution',\r\n      price: 1299,\r\n      salesVolume: 15,\r\n      marketShare: 20,\r\n      growthRate: 15\r\n    }\r\n  ];\r\n  \r\n  // Use actual products if available, otherwise fallback\r\n  const displayProducts = products && products.length > 0 ? products : fallbackProducts;\r\n  \r\n  // Get metrics\r\n  const revenue = getTotalRevenue ? getTotalRevenue() : calculateMetrics(displayProducts).revenue;\r\n  const cost = getTotalCost ? getTotalCost() : calculateMetrics(displayProducts).cost;\r\n  const profit = getTotalProfit ? getTotalProfit() : calculateMetrics(displayProducts).profit;\r\n  const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\r\n  \r\n  // Prepare chart data\r\n  const { \r\n    costBreakdown, \r\n    weeklyCostTrend, \r\n    weeklyRevenueProfitTrend\r\n  } = prepareChartData(displayProducts, revenue, cost, profit);\r\n  \r\n  if (isLoading) {\r\n    return <div className=\"dashboard-container\">Loading dashboard data...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h1>Executive Dashboard</h1>\r\n      \r\n      {/* Key metrics grid */}\r\n      <div className=\"metrics-grid\">\r\n        <div className=\"metric-card\">\r\n          <h3>Total Revenue</h3>\r\n          <p className=\"metric-value\">${revenue.toLocaleString()}</p>\r\n        </div>\r\n        <div className=\"metric-card\">\r\n          <h3>Total Cost</h3>\r\n          <p className=\"metric-value\">${cost.toLocaleString()}</p>\r\n        </div>\r\n        <div className=\"metric-card\">\r\n          <h3>Total Profit</h3>\r\n          <p className=\"metric-value\">${profit.toLocaleString()}</p>\r\n        </div>\r\n        <div className=\"metric-card\">\r\n          <h3>Profit Margin</h3>\r\n          <p className=\"metric-value\">{margin.toFixed(1)}%</p>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Charts section */}\r\n      <div className=\"charts-container\">\r\n        {/* Revenue Performance Chart - Split from the combined chart */}\r\n        <div className=\"chart-card wide\">\r\n          <h3>Revenue Performance</h3>\r\n          <div className=\"revenue-trend\">\r\n            <p className=\"trend-description\">Actual vs projected revenue by week</p>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <ComposedChart data={weeklyRevenueProfitTrend} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis label={{ value: 'Revenue ($)', angle: -90, position: 'insideLeft' }} />\r\n                <Tooltip content={CustomTooltip} />\r\n                <Legend />\r\n                \r\n                {/* Revenue components only */}\r\n                <Bar\r\n                  dataKey=\"Actual Revenue\"\r\n                  name=\"Actual Revenue\"\r\n                  fill=\"#4169E1\"\r\n                  radius={[4, 4, 0, 0]}\r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"Projected Revenue\" \r\n                  name=\"Projected Revenue\" \r\n                  stroke=\"#0000FF\" \r\n                  strokeWidth={2} \r\n                  dot={false}\r\n                  connectNulls\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Profit Performance Chart - Split from the combined chart */}\r\n        <div className=\"chart-card wide\">\r\n          <h3>Profit Performance</h3>\r\n          <div className=\"profit-trend\">\r\n            <p className=\"trend-description\">Actual vs projected profit by week</p>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <ComposedChart data={weeklyRevenueProfitTrend} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis label={{ value: 'Profit ($)', angle: -90, position: 'insideLeft' }} />\r\n                <Tooltip content={CustomTooltip} />\r\n                <Legend />\r\n                \r\n                {/* Profit components only */}\r\n                <Bar\r\n                  dataKey=\"Actual Profit\"\r\n                  name=\"Actual Profit\"\r\n                  fill={(data: any) => data[\"Actual Profit\"] < 0 ? \"#FF0000\" : \"#32CD32\"}\r\n                  radius={[4, 4, 0, 0]}\r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"Projected Profit\" \r\n                  name=\"Projected Profit\" \r\n                  stroke=\"#00AA00\" \r\n                  strokeDasharray=\"5 5\" \r\n                  strokeWidth={2}\r\n                  connectNulls\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"legend-explanation\">\r\n              <div className=\"legend-item\">\r\n                <span className=\"color-box\" style={{ backgroundColor: '#32CD32' }}></span>\r\n                <span>Actual Profit</span>\r\n              </div>\r\n              <div className=\"legend-item\">\r\n                <span className=\"color-box\" style={{ backgroundColor: '#FF0000' }}></span>\r\n                <span>Actual Loss</span>\r\n              </div>\r\n              <div className=\"legend-item\">\r\n                <span className=\"color-box\" style={{ backgroundColor: '#00AA00' }}></span>\r\n                <span>Projected Profit</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Cost Structure */}\r\n        <div className=\"chart-card wide\">\r\n          <h3>Cost Structure</h3>\r\n          <div className=\"cost-charts-container\">\r\n            <div className=\"cost-distribution\">\r\n              <h4>Cost Distribution</h4>\r\n              <ResponsiveContainer width=\"100%\" height={250}>\r\n                <PieChart>\r\n                  <Pie\r\n                    data={costBreakdown}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    labelLine={true}\r\n                    label={renderCustomizedLabel}\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    dataKey=\"value\"\r\n                  >\r\n                    {costBreakdown.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={entry.color} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Legend />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n            \r\n            <div className=\"weekly-cost-trend\">\r\n              <h4>Weekly Cost Trend</h4>\r\n              <ResponsiveContainer width=\"100%\" height={250}>\r\n                <LineChart data={weeklyCostTrend} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"name\" />\r\n                  <YAxis />\r\n                  <Tooltip content={CustomTooltip} />\r\n                  <Legend />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"Projected Cost\" \r\n                    name=\"Projected Cost\" \r\n                    stroke=\"#8884d8\" \r\n                    strokeDasharray=\"5 5\"\r\n                    connectNulls\r\n                  />\r\n                  <Bar\r\n                    dataKey=\"Actual Cost\"\r\n                    name=\"Actual Cost\"\r\n                    fill=\"#9370DB\"\r\n                    radius={[4, 4, 0, 0]}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExecutiveDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\FinancialProjections.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":2,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatNumber' is defined but never used.","line":20,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actualMetrics' is assigned a value but never used.","line":34,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'costBreakdownData' is assigned a value but never used.","line":174,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  ComposedChart,\r\n  Area,\r\n  ReferenceLine\r\n} from 'recharts';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatNumber, formatPercent } from '../lib/utils';\r\n\r\nexport default function FinancialProjections() {\r\n  const { products, currentProductId } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { weeklyProjections, actualMetrics = [], actuals = [] } = currentProduct;\r\n\r\n  // Get actuals for better integration with projections\r\n  const getActualForWeek = (weekNumber: number) => {\r\n    return actuals.find(a => a.week === weekNumber);\r\n  };\r\n\r\n  // Calculate key financial metrics with actuals integration\r\n  let totalRevenue = 0;\r\n  let totalCosts = 0;\r\n  \r\n  weeklyProjections.forEach(week => {\r\n    const actual = getActualForWeek(week.week);\r\n    if (actual) {\r\n      totalRevenue += actual.revenue;\r\n      totalCosts += actual.expenses;\r\n    } else {\r\n      totalRevenue += week.totalRevenue;\r\n      totalCosts += week.totalCosts;\r\n    }\r\n  });\r\n  \r\n  const totalProfit = totalRevenue - totalCosts;\r\n  const profitMargin = totalRevenue > 0 ? (totalProfit / totalRevenue) : 0;\r\n  \r\n  // Find break-even week considering actuals\r\n  let cumulativeProfit = 0;\r\n  let breakEvenWeek = 0;\r\n  \r\n  for (let i = 1; i <= weeklyProjections.length; i++) {\r\n    const weekProjection = weeklyProjections.find(w => w.week === i);\r\n    const weekActual = getActualForWeek(i);\r\n    \r\n    if (weekActual) {\r\n      cumulativeProfit += (weekActual.revenue - weekActual.expenses);\r\n    } else if (weekProjection) {\r\n      cumulativeProfit += weekProjection.weeklyProfit;\r\n    }\r\n    \r\n    if (cumulativeProfit > 0 && breakEvenWeek === 0) {\r\n      breakEvenWeek = i;\r\n    }\r\n  }\r\n  \r\n  if (breakEvenWeek === 0) {\r\n    breakEvenWeek = weeklyProjections.length + 1; // After projection period\r\n  }\r\n\r\n  // Prepare revenue streams with actuals integration\r\n  const revenueStreams = {\r\n    tickets: 0,\r\n    fb: 0,\r\n    merchandise: 0,\r\n    digital: 0\r\n  };\r\n  \r\n  weeklyProjections.forEach(week => {\r\n    const actual = getActualForWeek(week.week);\r\n    \r\n    if (actual) {\r\n      revenueStreams.tickets += actual.ticketRevenue || 0;\r\n      revenueStreams.fb += actual.fbRevenue || 0;\r\n      revenueStreams.merchandise += actual.merchandiseRevenue || 0;\r\n      revenueStreams.digital += actual.digitalRevenue || 0;\r\n    } else {\r\n      revenueStreams.tickets += week.ticketRevenue;\r\n      revenueStreams.fb += week.fbRevenue;\r\n      revenueStreams.merchandise += week.merchandiseRevenue;\r\n      revenueStreams.digital += week.digitalRevenue;\r\n    }\r\n  });\r\n\r\n  // Prepare cost breakdown with actuals integration\r\n  const costBreakdown = {\r\n    marketing: 0,\r\n    staffing: 0,\r\n    events: 0,\r\n    additional: 0\r\n  };\r\n  \r\n  weeklyProjections.forEach(week => {\r\n    const actual = getActualForWeek(week.week);\r\n    \r\n    if (actual) {\r\n      costBreakdown.marketing += actual.marketingCosts || 0;\r\n      costBreakdown.staffing += actual.staffingCosts || 0;\r\n      costBreakdown.events += actual.eventCosts || 0;\r\n      costBreakdown.additional += actual.additionalCosts || 0;\r\n    } else {\r\n      costBreakdown.marketing += week.marketingCosts;\r\n      costBreakdown.staffing += week.staffingCosts;\r\n      costBreakdown.events += week.eventCosts;\r\n      costBreakdown.additional += week.setupCosts;\r\n    }\r\n  });\r\n\r\n  // Prepare data for revenue trend chart with improved actuals integration\r\n  const revenueTrendData = weeklyProjections.map(week => {\r\n    const actual = getActualForWeek(week.week);\r\n    return {\r\n      week: `Week ${week.week}`,\r\n      projected: actual ? null : week.totalRevenue, // Only show projected when we don't have actuals\r\n      actual: actual ? actual.revenue : null,\r\n      hasActual: !!actual\r\n    };\r\n  });\r\n\r\n  // Calculate weekly profit margins with actuals integration\r\n  const profitMarginData = weeklyProjections.map(week => {\r\n    const actual = getActualForWeek(week.week);\r\n    \r\n    if (actual) {\r\n      const actualRevenue = actual.revenue;\r\n      const actualExpenses = actual.expenses;\r\n      const actualProfit = actualRevenue - actualExpenses;\r\n      return {\r\n        week: `Week ${week.week}`,\r\n        projectedMargin: null,\r\n        actualMargin: actualRevenue > 0 ? (actualProfit / actualRevenue) : 0,\r\n        hasActual: true\r\n      };\r\n    } else {\r\n      return {\r\n        week: `Week ${week.week}`,\r\n        projectedMargin: week.totalRevenue > 0 ? (week.weeklyProfit / week.totalRevenue) : 0,\r\n        actualMargin: null,\r\n        hasActual: false\r\n      };\r\n    }\r\n  });\r\n\r\n  // Prepare data for revenue breakdown\r\n  const revenueBreakdownData = [\r\n    { name: 'Tickets', value: revenueStreams.tickets },\r\n    { name: 'F&B', value: revenueStreams.fb },\r\n    { name: 'Merchandise', value: revenueStreams.merchandise },\r\n    { name: 'Digital', value: revenueStreams.digital }\r\n  ];\r\n\r\n  // Prepare data for cost breakdown\r\n  const costBreakdownData = [\r\n    { name: 'Marketing', value: costBreakdown.marketing },\r\n    { name: 'Staffing', value: costBreakdown.staffing },\r\n    { name: 'Events', value: costBreakdown.events },\r\n    { name: 'Additional', value: costBreakdown.additional }\r\n  ];\r\n\r\n  // Count how many weeks have actual data\r\n  const weeksWithActuals = weeklyProjections.filter(week => getActualForWeek(week.week)).length;\r\n  const totalWeeks = weeklyProjections.length;\r\n  const actualsPercentage = (weeksWithActuals / totalWeeks) * 100;\r\n\r\n  // Calculate actual revenue and profit separately\r\n  let actualRevenue = 0;\r\n  let actualCosts = 0;\r\n  let projectedRevenue = 0;\r\n  let projectedCosts = 0;\r\n\r\n  weeklyProjections.forEach(week => {\r\n    const actual = getActualForWeek(week.week);\r\n    if (actual) {\r\n      actualRevenue += actual.revenue;\r\n      actualCosts += actual.expenses;\r\n    } else {\r\n      projectedRevenue += week.totalRevenue;\r\n      projectedCosts += week.totalCosts;\r\n    }\r\n  });\r\n\r\n  const actualProfit = actualRevenue - actualCosts;\r\n  const projectedProfit = projectedRevenue - projectedCosts;\r\n\r\n  // Find the index where actuals end (last week with actual data)\r\n  const lastActualWeekIndex = Math.max(\r\n    ...weeklyProjections\r\n      .filter(week => getActualForWeek(week.week))\r\n      .map(week => weeklyProjections.findIndex(w => w.week === week.week))\r\n  );\r\n\r\n  // Also calculate what the original projection would have been (without actuals)\r\n  const originalTotalRevenue = weeklyProjections.reduce((sum, week) => sum + week.totalRevenue, 0);\r\n  const originalTotalCosts = weeklyProjections.reduce((sum, week) => sum + week.totalCosts, 0);\r\n  const originalTotalProfit = originalTotalRevenue - originalTotalCosts;\r\n  \r\n  // Calculate the impact of actuals on the overall projection\r\n  const revenueDifference = totalRevenue - originalTotalRevenue;\r\n  const profitDifference = totalProfit - originalTotalProfit;\r\n\r\n  // Add the calculation for the COGS totals in the component\r\n  const totalFbCogs = weeklyProjections.reduce((sum, week) => sum + (week.fbCogs || 0), 0);\r\n  const totalMerchandiseCogs = weeklyProjections.reduce((sum, week) => sum + (week.merchandiseCogs || 0), 0);\r\n\r\n  // Calculate total costs by category\r\n  const totalMarketingCosts = weeklyProjections.reduce((sum, week) => sum + (week.marketingCosts || 0), 0);\r\n  const totalStaffingCosts = weeklyProjections.reduce((sum, week) => sum + (week.staffingCosts || 0), 0);\r\n  const totalEventCosts = weeklyProjections.reduce((sum, week) => sum + (week.eventCosts || 0), 0);\r\n  const totalSetupCosts = weeklyProjections.reduce((sum, week) => sum + (week.setupCosts || 0), 0);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Key Metrics */}\r\n      <div className=\"grid gap-4 md:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col\">\r\n              <div className=\"text-2xl font-bold mb-1 flex items-center\">\r\n                {formatCurrency(totalRevenue)}\r\n                {revenueDifference !== 0 && (\r\n                  <span className={`text-sm ml-2 ${revenueDifference > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                    {revenueDifference > 0 ? '↑' : '↓'} {formatCurrency(Math.abs(revenueDifference))}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\r\n                <div className=\"flex flex-col\">\r\n                  <span className=\"font-medium text-green-600\">Actual: {formatCurrency(actualRevenue)}</span>\r\n                  <span className=\"font-medium text-blue-600\">Projected: {formatCurrency(projectedRevenue)}</span>\r\n                </div>\r\n                {weeksWithActuals > 0 && (\r\n                  <div className=\"text-xs text-right\">\r\n                    <span className=\"text-gray-500\">Original projection:</span>\r\n                    <div>{formatCurrency(originalTotalRevenue)}</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {weeksWithActuals > 0 && (\r\n                <div className=\"w-full mt-2\">\r\n                  <div className=\"text-xs text-gray-500 mb-1\">\r\n                    {actualsPercentage.toFixed(0)}% of period has actual data\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 h-1.5 rounded-full\">\r\n                    <div \r\n                      className=\"bg-green-500 h-1.5 rounded-l-full\" \r\n                      style={{ width: `${actualRevenue / totalRevenue * 100}%` }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm font-medium\">Total Profit</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col\">\r\n              <div className=\"text-2xl font-bold mb-1 flex items-center\">\r\n                {formatCurrency(totalProfit)}\r\n                {profitDifference !== 0 && (\r\n                  <span className={`text-sm ml-2 ${profitDifference > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                    {profitDifference > 0 ? '↑' : '↓'} {formatCurrency(Math.abs(profitDifference))}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\r\n                <div className=\"flex flex-col\">\r\n                  <span className=\"font-medium text-green-600\">Actual: {formatCurrency(actualProfit)}</span>\r\n                  <span className=\"font-medium text-blue-600\">Projected: {formatCurrency(projectedProfit)}</span>\r\n                </div>\r\n                {weeksWithActuals > 0 && (\r\n                  <div className=\"text-xs text-right\">\r\n                    <span className=\"text-gray-500\">Original projection:</span>\r\n                    <div>{formatCurrency(originalTotalProfit)}</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {weeksWithActuals > 0 && (\r\n                <div className=\"w-full mt-2\">\r\n                  <div className=\"text-xs text-gray-500 mb-1\">\r\n                    {actualsPercentage.toFixed(0)}% of period has actual data\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 h-1.5 rounded-full\">\r\n                    <div \r\n                      className=\"bg-green-500 h-1.5 rounded-l-full\" \r\n                      style={{ width: `${Math.max(0, actualProfit) / Math.max(0.01, totalProfit) * 100}%` }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm font-medium\">Profit Margin</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{formatPercent(profitMargin)}</div>\r\n            <p className=\"text-xs text-muted-foreground\">Overall profit margin</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm font-medium\">Break-even</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">Week {breakEvenWeek}</div>\r\n            <p className=\"text-xs text-muted-foreground\">Expected break-even point</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Revenue Trend */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Revenue Trend</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"mb-3 flex items-center space-x-4\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-1\"></div>\r\n              <span className=\"text-sm\">Actual Revenue</span>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-3 h-3 border-2 border-blue-500 rounded-full mr-1\"></div>\r\n              <span className=\"text-sm\">Projected Revenue</span>\r\n            </div>\r\n            {lastActualWeekIndex >= 0 && (\r\n              <div className=\"text-xs text-gray-500\">\r\n                Actuals available for weeks 1-{lastActualWeekIndex + 1}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"h-[300px]\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <ComposedChart data={revenueTrendData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"week\" />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value, name) => {\r\n                    if (value === null) return ['-', name];\r\n                    return [formatCurrency(value), name === 'projected' ? 'Projected Revenue' : 'Actual Revenue'];\r\n                  }}\r\n                  labelFormatter={(label) => label}\r\n                />\r\n                <Legend />\r\n                <Area\r\n                  type=\"monotone\"\r\n                  dataKey=\"projected\"\r\n                  name=\"Projected Revenue\"\r\n                  fill=\"#4F46E580\"\r\n                  stroke=\"#4F46E5\"\r\n                  strokeWidth={2}\r\n                  connectNulls={true}\r\n                />\r\n                <Bar\r\n                  dataKey=\"actual\"\r\n                  name=\"Actual Revenue\"\r\n                  fill=\"#10B981\"\r\n                  connectNulls={true}\r\n                />\r\n                {/* Add a reference line where actuals end */}\r\n                {lastActualWeekIndex >= 0 && (\r\n                  <ReferenceLine\r\n                    x={`Week ${weeklyProjections[lastActualWeekIndex].week}`}\r\n                    stroke=\"#888\"\r\n                    strokeDasharray=\"3 3\"\r\n                    label={{\r\n                      value: \"Last Actual\",\r\n                      position: \"insideTopRight\",\r\n                      fill: \"#888\",\r\n                      fontSize: 12\r\n                    }}\r\n                  />\r\n                )}\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Profit Margin Trend */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Profit Margin Trend</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"mb-3 flex items-center space-x-4\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-1\"></div>\r\n              <span className=\"text-sm\">Actual Margin</span>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-3 h-3 border-2 border-purple-500 rounded-full mr-1\"></div>\r\n              <span className=\"text-sm\">Projected Margin</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"h-[300px]\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <ComposedChart data={profitMarginData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"week\" />\r\n                <YAxis tickFormatter={(value) => `${(value * 100).toFixed(0)}%`} />\r\n                <Tooltip \r\n                  formatter={(value, name) => {\r\n                    if (value === null) return ['-', name];\r\n                    return [formatPercent(value), name === 'projectedMargin' ? 'Projected Margin' : 'Actual Margin'];\r\n                  }}\r\n                  labelFormatter={(label) => label}\r\n                />\r\n                <Legend />\r\n                <Area\r\n                  type=\"monotone\"\r\n                  dataKey=\"projectedMargin\"\r\n                  name=\"Projected Margin\"\r\n                  fill=\"#8B5CF680\"\r\n                  stroke=\"#8B5CF6\"\r\n                  strokeWidth={2}\r\n                  connectNulls={true}\r\n                />\r\n                <Bar\r\n                  dataKey=\"actualMargin\"\r\n                  name=\"Actual Margin\"\r\n                  fill=\"#10B981\"\r\n                  connectNulls={true}\r\n                />\r\n                {/* Add a reference line where actuals end */}\r\n                {lastActualWeekIndex >= 0 && (\r\n                  <ReferenceLine\r\n                    x={`Week ${weeklyProjections[lastActualWeekIndex].week}`}\r\n                    stroke=\"#888\"\r\n                    strokeDasharray=\"3 3\"\r\n                    label={{\r\n                      value: \"Last Actual\",\r\n                      position: \"insideTopRight\",\r\n                      fill: \"#888\",\r\n                      fontSize: 12\r\n                    }}\r\n                  />\r\n                )}\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        {/* Revenue Breakdown */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Revenue Breakdown</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-[300px]\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={revenueBreakdownData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"name\" />\r\n                  <YAxis />\r\n                  <Tooltip \r\n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\r\n                  />\r\n                  <Bar dataKey=\"value\" name=\"Amount\" fill=\"#3B82F6\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n            <div className=\"mt-4\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Revenue Stream</TableHead>\r\n                    <TableHead className=\"text-right\">Amount</TableHead>\r\n                    <TableHead className=\"text-right\">% of Total</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {revenueBreakdownData.map((item) => (\r\n                    <TableRow key={item.name}>\r\n                      <TableCell>{item.name}</TableCell>\r\n                      <TableCell className=\"text-right\">{formatCurrency(item.value)}</TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        {formatPercent(item.value / totalRevenue)}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Cost Breakdown */}\r\n        <Card className=\"col-span-1\">\r\n          <CardHeader>\r\n            <CardTitle>Cost Breakdown</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              {totalMarketingCosts > 0 && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span>Marketing</span>\r\n                  <span className=\"font-medium\">{formatCurrency(totalMarketingCosts)}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {totalStaffingCosts > 0 && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span>Staffing</span>\r\n                  <span className=\"font-medium\">{formatCurrency(totalStaffingCosts)}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {totalEventCosts > 0 && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span>Events</span>\r\n                  <span className=\"font-medium\">{formatCurrency(totalEventCosts)}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {totalSetupCosts > 0 && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span>Setup</span>\r\n                  <span className=\"font-medium\">{formatCurrency(totalSetupCosts)}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Add F&B COGS for all product types if costs exist */}\r\n              {totalFbCogs > 0 && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span>F&B Costs</span>\r\n                  <span className=\"font-medium\">{formatCurrency(totalFbCogs)}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Add Merchandise COGS if applicable */}\r\n              {currentProduct.info.type === 'Merchandise Drops' && totalMerchandiseCogs > 0 && (\r\n                <div className=\"flex items-center justify-between border-l-2 border-pink-500 pl-2 mt-3\">\r\n                  <span className=\"font-medium text-pink-700\">Merchandise COGS</span>\r\n                  <span className=\"font-medium text-pink-700\">{formatCurrency(totalMerchandiseCogs)}</span>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"pt-2 border-t mt-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-semibold\">Total Costs</span>\r\n                  <span className=\"font-semibold\">{formatCurrency(originalTotalCosts)}</span>\r\n                </div>\r\n                \r\n                {/* Add COGS impact on margin */}\r\n                {(totalFbCogs > 0 || totalMerchandiseCogs > 0) && (\r\n                  <div className=\"text-xs text-gray-500 mt-2\">\r\n                    <p>COGS represent {formatPercent((totalFbCogs + totalMerchandiseCogs) / originalTotalCosts)} of total costs</p>\r\n                    <p>COGS impact on margin: {formatPercent((totalFbCogs + totalMerchandiseCogs) / totalRevenue)}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\FirebaseConfig.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ForecastCosts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":20,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":20,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":20,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeEvent' is defined but never used.","line":24,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1385,1388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1385,1388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1588,1591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1588,1591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateId' is assigned a value but never used.","line":118,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'currentProduct' and 'updateProduct'. Either include them or remove the dependency array.","line":204,"column":6,"nodeType":"ArrayExpression","endLine":204,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [currentProduct.info.id, costMetrics, currentProduct, updateProduct]","fix":{"range":[6067,6106],"text":"[currentProduct.info.id, costMetrics, currentProduct, updateProduct]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleInputChange' is assigned a value but never used.","line":460,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":460,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSelectChange' is assigned a value but never used.","line":464,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":464,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSwitchChange' is assigned a value but never used.","line":468,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":468,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used.","line":522,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":522,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used.","line":544,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":544,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo, useCallback, useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Switch } from './ui/switch';\r\nimport { Button } from './ui/button';\r\nimport { PlusCircle, Trash2, DollarSign, Users, Award } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { generateWeeklyProjections } from '../lib/calculations';\r\nimport { Spinner } from './ui/spinner';\r\nimport { uniqueId, formatCurrency } from '../lib/utils';\r\nimport type { \r\n  EventCostItem, \r\n  SetupCostItem, \r\n  MarketingChannelItem, \r\n  StaffRoleItem,\r\n  Product\r\n} from '../types';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { useNotifications } from '../contexts/NotificationContext';\r\n\r\n// Helper type for React events to fix import issues\r\ntype ChangeEvent<T = Element> = {\r\n  target: T & EventTarget;\r\n};\r\n\r\n// Create a component for input fields that preserves focus\r\nconst InputWithFocus = React.memo(({ \r\n  id, \r\n  type = 'text',\r\n  value, \r\n  onChange,\r\n  placeholder = '', \r\n  min, \r\n  max,\r\n  step,\r\n  className = '',\r\n  parser = (v: string) => v\r\n}: { \r\n  id: string; \r\n  type?: string;\r\n  value: any; \r\n  onChange: (value: unknown) => void;\r\n  placeholder?: string;\r\n  min?: string | number;\r\n  max?: string | number;\r\n  step?: string | number;\r\n  className?: string;\r\n  parser?: (value: string) => any;\r\n}) => {\r\n  // Local state to handle the input value\r\n  const [localValue, setLocalValue] = useState(value);\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  \r\n  // Update local value when prop value changes (avoid during active typing)\r\n  useEffect(() => {\r\n    // Only sync when not actively typing and the values are very different\r\n    if (!isFocused && String(localValue) !== String(value)) {\r\n      setLocalValue(value);\r\n    }\r\n  }, [value, isFocused, localValue]);\r\n  \r\n  // Handle input changes locally without losing focus\r\n  const handleChange = (e: { target: { value: string } }) => {\r\n    const newValue = e.target.value;\r\n    setLocalValue(newValue);\r\n  };\r\n  \r\n  // Handle blur event to notify parent component of value change\r\n  const handleBlur = () => {\r\n    setIsFocused(false);\r\n    \r\n    // For number inputs, parse before sending to parent\r\n    if (type === 'number') {\r\n      // Allow empty value\r\n      if (localValue === '') {\r\n        onChange(0);\r\n      } else {\r\n        const parsed = parser(String(localValue));\r\n        if (!isNaN(parsed)) {\r\n          onChange(parsed);\r\n        }\r\n      }\r\n    } else {\r\n      onChange(localValue);\r\n    }\r\n  };\r\n\r\n  // Handle focus event\r\n  const handleFocus = () => {\r\n    setIsFocused(true);\r\n  };\r\n  \r\n  return (\r\n    <input\r\n      id={id}\r\n      ref={inputRef}\r\n      type={type}\r\n      value={localValue}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      onFocus={handleFocus}\r\n      placeholder={placeholder}\r\n      min={min}\r\n      max={max}\r\n      step={step}\r\n      className={`flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}\r\n      style={{ zIndex: 10 }}\r\n    />\r\n  );\r\n});\r\n\r\nInputWithFocus.displayName = 'InputWithFocus';\r\n\r\n// Generator for producing unique IDs to identify form elements\r\nconst generateId = (() => {\r\n  let count = 0;\r\n  return (prefix = 'id') => `${prefix}-${count++}`;\r\n})();\r\n\r\nexport default function ForecastCosts() {\r\n  const { \r\n    products,\r\n    currentProductId,\r\n    updateProduct,\r\n    isLoading,\r\n    error,\r\n    clearError\r\n  } = useStore();\r\n\r\n  const { addNotification } = useNotifications();\r\n\r\n  // Memoize the current product to prevent unnecessary re-renders\r\n  const currentProduct = useMemo(() => \r\n    products.find(p => p.info.id === currentProductId), \r\n    [products, currentProductId]\r\n  );\r\n\r\n  // Memoize cost metrics to prevent unnecessary recalculations\r\n  const costMetrics = useMemo(() => {\r\n    if (!currentProduct) return {\r\n      marketing: {\r\n        type: 'weekly',\r\n        weeklyBudget: 0,\r\n        campaignBudget: null,\r\n        campaignDurationWeeks: null,\r\n        depreciation: {\r\n          enabled: false,\r\n          startWeek: 1,\r\n          weeklyDepreciationRate: 0,\r\n          minimumAmount: 0\r\n        },\r\n        channels: [],\r\n        allocationMode: 'channels'\r\n      },\r\n      additionalStaffingPerEvent: 0,\r\n      staffingCostPerPerson: 0,\r\n      staffRoles: [],\r\n      eventCosts: [],\r\n      setupCosts: []\r\n    };\r\n    \r\n    return currentProduct.costMetrics || {\r\n      marketing: {\r\n        type: 'weekly',\r\n        weeklyBudget: 0,\r\n        campaignBudget: null,\r\n        campaignDurationWeeks: null,\r\n        depreciation: {\r\n          enabled: false,\r\n          startWeek: 1,\r\n          weeklyDepreciationRate: 0,\r\n          minimumAmount: 0\r\n        },\r\n        channels: [],\r\n        allocationMode: 'channels'\r\n      },\r\n      additionalStaffingPerEvent: 0,\r\n      staffingCostPerPerson: 0,\r\n      staffRoles: [],\r\n      eventCosts: [],\r\n      setupCosts: []\r\n    };\r\n  }, [currentProduct]);\r\n\r\n  // Update projections whenever metrics change\r\n  useEffect(() => {\r\n    if (currentProduct) {\r\n      console.log(\"Cost metrics changed, regenerating projections:\", costMetrics);\r\n      const projections = generateWeeklyProjections(\r\n        currentProduct.info,\r\n        currentProduct.growthMetrics,\r\n        currentProduct.revenueMetrics,\r\n        costMetrics\r\n      );\r\n      \r\n      updateProduct(currentProduct.info.id, {\r\n        ...currentProduct,\r\n        weeklyProjections: projections\r\n      });\r\n    }\r\n  }, [currentProduct?.info?.id, costMetrics]);\r\n\r\n  // Handle marketing cost changes - this is now primarily for depreciation\r\n  const handleMarketingCostChange = useCallback((field: string, value: unknown) => {\r\n    if (!currentProduct) return;\r\n\r\n    // For backward compatibility, calculate the weeklyBudget based on channel totals\r\n    let updatedMarketing = {\r\n      ...costMetrics.marketing,\r\n      [field]: value\r\n    };\r\n\r\n    // If we're updating channels, also update the weekly budget to match the sum\r\n    if (field === 'channels' && Array.isArray(value)) {\r\n      const totalChannelBudget = value.reduce((sum, channel) => sum + (channel.budget || 0), 0);\r\n      updatedMarketing = {\r\n        ...updatedMarketing,\r\n        weeklyBudget: totalChannelBudget\r\n      };\r\n    }\r\n\r\n    const updatedProduct = {\r\n      ...currentProduct,\r\n      costMetrics: {\r\n        ...costMetrics,\r\n        marketing: updatedMarketing\r\n      }\r\n    };\r\n    updateProduct(currentProduct.info.id, updatedProduct as Partial<Product>);\r\n  }, [currentProduct, costMetrics, updateProduct]);\r\n\r\n  // Handle changing the allocation mode\r\n  const handleAllocationModeChange = useCallback((mode: 'channels' | 'simple') => {\r\n    // Only need confirmation when switching from detailed channels to simple mode\r\n    if (mode === 'simple' && costMetrics.marketing.allocationMode === 'channels' && \r\n        (costMetrics.marketing.channels?.length || 0) > 0) {\r\n      \r\n      if (confirm('Switching to simple budget mode will remove all your channel-based marketing data. Are you sure you want to continue?')) {\r\n        // Clean up the old channel data\r\n        const updatedMarketing = {\r\n          ...costMetrics.marketing,\r\n          allocationMode: mode,\r\n          channels: [], // Reset channels\r\n          weeklyBudget: costMetrics.marketing.weeklyBudget || 0,\r\n          type: costMetrics.marketing.type || 'weekly'\r\n        };\r\n        \r\n        const updatedCostMetrics = {\r\n          ...costMetrics,\r\n          marketing: updatedMarketing\r\n        };\r\n        \r\n        if (currentProduct) {\r\n          updateProduct(currentProduct.info.id, {\r\n            costMetrics: updatedCostMetrics\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      // No confirmation needed when switching to detailed mode\r\n      handleMarketingCostChange('allocationMode', mode);\r\n    }\r\n  }, [costMetrics, currentProduct, updateProduct, handleMarketingCostChange]);\r\n\r\n  // Handle marketing channel management\r\n  const handleAddMarketingChannel = useCallback(() => {\r\n    const newChannel: MarketingChannelItem = {\r\n      id: uniqueId('marketing-channel-'),\r\n      name: '',\r\n      budget: 0,\r\n      allocation: 0, // Percentage allocation of total budget\r\n      targetAudience: '',  // New field for target audience\r\n      description: ''  // Replacing notes with more descriptive field name\r\n    };\r\n\r\n    const updatedChannels = [...(costMetrics.marketing.channels || []), newChannel];\r\n    handleMarketingCostChange('channels', updatedChannels);\r\n  }, [costMetrics.marketing.channels, handleMarketingCostChange]);\r\n\r\n  const handleUpdateMarketingChannel = useCallback((id: string, field: keyof MarketingChannelItem, value: unknown) => {\r\n    const updatedChannels = (costMetrics.marketing.channels || []).map((channel: MarketingChannelItem) => \r\n      channel.id === id ? { ...channel, [field]: value } : channel\r\n    );\r\n    \r\n    // Only recalculate allocations when budget changes AND it's not during typing\r\n    // This prevents focus loss during input\r\n    if (field === 'budget' && typeof value === 'number') {\r\n      // Delay allocation updates to avoid input focus issues\r\n      setTimeout(() => {\r\n        const totalBudget = updatedChannels.reduce((sum: number, ch: MarketingChannelItem) => sum + (ch.budget || 0), 0);\r\n        \r\n        if (totalBudget > 0) {\r\n          const channelsWithAllocations = updatedChannels.map((ch: MarketingChannelItem) => ({\r\n            ...ch,\r\n            allocation: Math.round(((ch.budget || 0) / totalBudget) * 100)\r\n          }));\r\n          \r\n          handleMarketingCostChange('channels', channelsWithAllocations);\r\n        }\r\n      }, 300);\r\n      \r\n      // Just update the current value immediately to maintain responsiveness\r\n      handleMarketingCostChange('channels', updatedChannels);\r\n    } else {\r\n      // For non-budget field updates, no need for special handling\r\n      handleMarketingCostChange('channels', updatedChannels);\r\n    }\r\n  }, [costMetrics.marketing.channels, handleMarketingCostChange]);\r\n\r\n  const handleDeleteMarketingChannel = useCallback((id: string) => {\r\n    const updatedChannels = (costMetrics.marketing.channels || []).filter((channel: MarketingChannelItem) => channel.id !== id);\r\n    handleMarketingCostChange('channels', updatedChannels);\r\n  }, [costMetrics.marketing.channels, handleMarketingCostChange]);\r\n\r\n  // Handle cost metrics changes - MOVED THIS UP before it's used\r\n  const handleCostMetricsChange = useCallback((field: keyof typeof costMetrics, value: unknown) => {\r\n    // Use a small delay for operations that might cause re-renders\r\n    if (field === 'fbCogPercentage' || field === 'merchandiseCogPerUnit' || \r\n        field === 'weeklyStaffCost' || field === 'additionalStaffingPerEvent' || \r\n        field === 'staffingCostPerPerson' || field === 'setupCosts' ||\r\n        field === 'eventCosts') {\r\n      // Simple debounce for potentially expensive operations\r\n      const timer = setTimeout(() => {\r\n        if (!currentProduct) return;\r\n        \r\n        const updatedCostMetrics = {\r\n          ...costMetrics,\r\n          [field]: value\r\n        };\r\n        \r\n        // Generate new projections with updated cost metrics\r\n        const projections = generateWeeklyProjections(\r\n          currentProduct.info,\r\n          currentProduct.growthMetrics,\r\n          currentProduct.revenueMetrics,\r\n          updatedCostMetrics\r\n        );\r\n        \r\n        console.log(`Regenerating projections after ${field} update:`, updatedCostMetrics);\r\n        \r\n        updateProduct(currentProduct.info.id, {\r\n          costMetrics: updatedCostMetrics,\r\n          weeklyProjections: projections\r\n        });\r\n      }, 300);\r\n      \r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      // For other fields, update immediately\r\n      if (!currentProduct) return;\r\n      \r\n      const updatedCostMetrics = {\r\n        ...costMetrics,\r\n        [field]: value\r\n      };\r\n      \r\n      updateProduct(currentProduct.info.id, {\r\n        costMetrics: updatedCostMetrics\r\n      });\r\n    }\r\n  }, [currentProduct, costMetrics, updateProduct]);\r\n\r\n  // Handle staff role management\r\n  const handleAddStaffRole = useCallback(() => {\r\n    const newRole: StaffRoleItem = {\r\n      id: uniqueId('staff-role-'),\r\n      role: '',\r\n      count: 1,\r\n      costPerPerson: 0,\r\n      notes: ''\r\n    };\r\n\r\n    const updatedRoles = [...(costMetrics.staffRoles || []), newRole];\r\n    handleCostMetricsChange('staffRoles', updatedRoles);\r\n  }, [costMetrics.staffRoles, handleCostMetricsChange]);\r\n\r\n  const handleUpdateStaffRole = useCallback((id: string, field: keyof StaffRoleItem, value: unknown) => {\r\n    const updatedRoles = (costMetrics.staffRoles || []).map((role: StaffRoleItem) => \r\n      role.id === id ? { ...role, [field]: value } : role\r\n    );\r\n    handleCostMetricsChange('staffRoles', updatedRoles);\r\n  }, [costMetrics.staffRoles, handleCostMetricsChange]);\r\n\r\n  const handleDeleteStaffRole = useCallback((id: string) => {\r\n    const updatedRoles = (costMetrics.staffRoles || []).filter((role: StaffRoleItem) => role.id !== id);\r\n    handleCostMetricsChange('staffRoles', updatedRoles);\r\n  }, [costMetrics.staffRoles, handleCostMetricsChange]);\r\n\r\n  // Handle marketing depreciation changes\r\n  const handleMarketingDepreciationChange = useCallback((field: string, value: unknown) => {\r\n    if (!currentProduct) return;\r\n\r\n    const updatedProduct = {\r\n      ...currentProduct,\r\n      costMetrics: {\r\n        ...costMetrics,\r\n        marketing: {\r\n          ...costMetrics.marketing,\r\n          depreciation: {\r\n            ...costMetrics.marketing.depreciation,\r\n            [field]: value\r\n          }\r\n        }\r\n      }\r\n    };\r\n    updateProduct(currentProduct.info.id, updatedProduct as Partial<Product>);\r\n  }, [currentProduct, costMetrics, updateProduct]);\r\n\r\n  // Handle event cost changes\r\n  const handleAddEventCost = useCallback(() => {\r\n    const newCost: EventCostItem = {\r\n      id: uniqueId('event-cost-'),\r\n      name: '',\r\n      amount: 0\r\n    };\r\n\r\n    handleCostMetricsChange('eventCosts', [...(costMetrics.eventCosts || []), newCost]);\r\n  }, [costMetrics.eventCosts, handleCostMetricsChange]);\r\n\r\n  const handleUpdateEventCost = useCallback((id: string, field: keyof EventCostItem, value: unknown) => {\r\n    const updatedCosts = (costMetrics.eventCosts || []).map(cost => \r\n      cost.id === id ? { ...cost, [field]: value } : cost\r\n    );\r\n    handleCostMetricsChange('eventCosts', updatedCosts);\r\n  }, [costMetrics.eventCosts, handleCostMetricsChange]);\r\n\r\n  const handleDeleteEventCost = useCallback((id: string) => {\r\n    const updatedCosts = (costMetrics.eventCosts || []).filter(cost => cost.id !== id);\r\n    handleCostMetricsChange('eventCosts', updatedCosts);\r\n  }, [costMetrics.eventCosts, handleCostMetricsChange]);\r\n\r\n  // Handle setup cost changes\r\n  const handleAddSetupCost = useCallback(() => {\r\n    const newCost: SetupCostItem = {\r\n      id: uniqueId('setup-cost-'),\r\n      name: '',\r\n      amount: 0,\r\n      amortize: false\r\n    };\r\n\r\n    handleCostMetricsChange('setupCosts', [...(costMetrics.setupCosts || []), newCost]);\r\n  }, [costMetrics.setupCosts, handleCostMetricsChange]);\r\n\r\n  const handleUpdateSetupCost = useCallback((id: string, field: keyof SetupCostItem, value: unknown) => {\r\n    const updatedCosts = (costMetrics.setupCosts || []).map(cost => \r\n      cost.id === id ? { ...cost, [field]: value } : cost\r\n    );\r\n    handleCostMetricsChange('setupCosts', updatedCosts);\r\n  }, [costMetrics.setupCosts, handleCostMetricsChange]);\r\n\r\n  const handleDeleteSetupCost = useCallback((id: string) => {\r\n    const updatedCosts = (costMetrics.setupCosts || []).filter(cost => cost.id !== id);\r\n    handleCostMetricsChange('setupCosts', updatedCosts);\r\n  }, [costMetrics.setupCosts, handleCostMetricsChange]);\r\n\r\n  // Create memoized common handler for input changes to avoid creating new functions on each render\r\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>, field: string, callback: (field: string, value: unknown) => void, parser: (value: string) => unknown = (v) => v) => {\r\n    callback(field, parser(e.target.value));\r\n  }, []);\r\n\r\n  const handleSelectChange = useCallback((value: string, field: string, callback: (field: string, value: unknown) => void) => {\r\n    callback(field, value);\r\n  }, []);\r\n\r\n  const handleSwitchChange = useCallback((checked: boolean, field: string, callback: (field: string, value: unknown) => void) => {\r\n    callback(field, checked);\r\n  }, []);\r\n\r\n  // Handle switching staffing allocation mode\r\n  const handleStaffingAllocationModeChange = useCallback((mode: 'simple' | 'detailed') => {\r\n    // Only need confirmation when switching from detailed to simple mode\r\n    if (mode === 'simple' && costMetrics.staffingAllocationMode === 'detailed' && \r\n        (costMetrics.staffRoles?.length || 0) > 0) {\r\n      \r\n      if (confirm('Switching to simple staffing mode will remove all your detailed staff role data. Are you sure you want to continue?')) {\r\n        // Clean up the old staff role data\r\n        const updatedCostMetrics = {\r\n          ...costMetrics,\r\n          staffingAllocationMode: mode,\r\n          staffRoles: [], // Reset staff roles\r\n          // Keep the legacy fields for simple mode\r\n          staffingCostPerPerson: costMetrics.staffingCostPerPerson || 0,\r\n          additionalStaffingPerEvent: costMetrics.additionalStaffingPerEvent || 0,\r\n          weeklyStaffCost: costMetrics.weeklyStaffCost || 0\r\n        };\r\n        \r\n        if (currentProduct) {\r\n          updateProduct(currentProduct.info.id, {\r\n            costMetrics: updatedCostMetrics\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      // No confirmation needed when switching to detailed mode\r\n      handleCostMetricsChange('staffingAllocationMode', mode);\r\n    }\r\n  }, [costMetrics, currentProduct, updateProduct, handleCostMetricsChange]);\r\n\r\n  // Calculate marketing as percentage of projected revenue\r\n  const calculateMarketingToRevenueRatio = () => {\r\n    if (!currentProduct?.weeklyProjections) return 0;\r\n    \r\n    const totalProjectedRevenue = currentProduct.weeklyProjections.reduce(\r\n      (sum, week) => sum + (week.totalRevenue || 0),\r\n      0\r\n    );\r\n    \r\n    const totalMarketingBudget = (costMetrics.marketing.channels || []).reduce(\r\n      (sum, channel) => sum + (channel.budget || 0) * (currentProduct.info.forecastPeriod || 12),\r\n      0\r\n    );\r\n    \r\n    return totalProjectedRevenue > 0 \r\n      ? (totalMarketingBudget / totalProjectedRevenue) * 100 \r\n      : 0;\r\n  };\r\n\r\n  // Add F&B calculation helper functions\r\n  const calculateAverageWeeklyFbRevenue = (product: unknown, metrics: unknown) => {\r\n    if (!product) return 0;\r\n    \r\n    const fbSpend = product?.revenueMetrics?.fbSpend || 0;\r\n    const fbConversionRate = product?.revenueMetrics?.fbConversionRate || 0;\r\n    const weeklyVisitors = product?.growthMetrics?.weeklyVisitors || 0;\r\n    const weeklyGrowthRate = (product?.growthMetrics?.weeklyGrowthRate || 0) / 100;\r\n    \r\n    let growthSum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n      growthSum += Math.pow(1 + weeklyGrowthRate, i);\r\n    }\r\n    \r\n    return fbSpend * fbConversionRate * weeklyVisitors * (growthSum / 12);\r\n  };\r\n  \r\n  const calculateAverageWeeklyFbCogs = (product: unknown, metrics: unknown) => {\r\n    const revenue = calculateAverageWeeklyFbRevenue(product, metrics);\r\n    const cogsPercentage = (metrics.fbCogPercentage || 30) / 100;\r\n    return revenue * cogsPercentage;\r\n  };\r\n  \r\n  const calculate12WeekFbRevenue = (product: unknown, metrics: unknown) => {\r\n    if (!product) return 0;\r\n    \r\n    const fbSpend = product?.revenueMetrics?.fbSpend || 0;\r\n    const fbConversionRate = product?.revenueMetrics?.fbConversionRate || 0;\r\n    const weeklyVisitors = product?.growthMetrics?.weeklyVisitors || 0;\r\n    const weeklyGrowthRate = (product?.growthMetrics?.weeklyGrowthRate || 0) / 100;\r\n    \r\n    let growthSum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n      growthSum += Math.pow(1 + weeklyGrowthRate, i);\r\n    }\r\n    \r\n    return fbSpend * fbConversionRate * weeklyVisitors * growthSum;\r\n  };\r\n  \r\n  const calculate12WeekFbCogs = (product: unknown, metrics: unknown) => {\r\n    const revenue = calculate12WeekFbRevenue(product, metrics);\r\n    const cogsPercentage = (metrics.fbCogPercentage || 30) / 100;\r\n    return revenue * cogsPercentage;\r\n  };\r\n\r\n  // If loading, show spinner\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64\">\r\n        <Spinner />\r\n        <span className=\"ml-2\">Loading cost metrics...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If error, show error message\r\n  if (error) {\r\n    return (\r\n      <div className=\"bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\r\n        <strong className=\"font-bold\">Error: </strong>\r\n        <span className=\"block sm:inline\">{error.message}</span>\r\n        <button \r\n          className=\"absolute top-0 right-0 px-4 py-3\"\r\n          onClick={() => clearError()}\r\n        >\r\n          <span className=\"sr-only\">Dismiss</span>\r\n          <span className=\"text-2xl\">&times;</span>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Memoized Components for Performance\r\n  const MarketingChannelEntry = React.memo(({ \r\n    channel, \r\n    onUpdate, \r\n    onDelete \r\n  }: { \r\n    channel: MarketingChannelItem; \r\n    onUpdate: (id: string, field: keyof MarketingChannelItem, value: unknown) => void; \r\n    onDelete: (id: string) => void; \r\n  }) => {\r\n    // Local state to handle input values before committing changes\r\n    const [localBudget, setLocalBudget] = React.useState<string>(\r\n      channel.budget !== undefined ? channel.budget.toString() : ''\r\n    );\r\n    \r\n    const [localTargetAudience, setLocalTargetAudience] = React.useState<string>(\r\n      channel.targetAudience || ''\r\n    );\r\n    \r\n    const [localDescription, setLocalDescription] = React.useState<string>(\r\n      channel.description || ''\r\n    );\r\n    \r\n    // Update local state when props change (except during active editing)\r\n    React.useEffect(() => {\r\n      setLocalBudget(channel.budget !== undefined ? channel.budget.toString() : '');\r\n      setLocalTargetAudience(channel.targetAudience || '');\r\n      setLocalDescription(channel.description || '');\r\n    }, [channel.budget, channel.targetAudience, channel.description]);\r\n    \r\n    // Handle budget input changes without losing focus\r\n    const handleBudgetChange = (e: { target: { value: string } }) => {\r\n      const inputValue = e.target.value;\r\n      setLocalBudget(inputValue);\r\n    };\r\n    \r\n    // Only update the actual budget on blur\r\n    const handleBudgetBlur = () => {\r\n      const value = localBudget === '' ? 0 : parseFloat(localBudget);\r\n      onUpdate(channel.id, 'budget', isNaN(value) ? 0 : value);\r\n    };\r\n    \r\n    // Handle input changes for target audience\r\n    const handleTargetAudienceChange = (e: { target: { value: string } }) => {\r\n      const value = e.target.value;\r\n      setLocalTargetAudience(value);\r\n    };\r\n    \r\n    // Only update on blur for target audience\r\n    const handleTargetAudienceBlur = () => {\r\n      onUpdate(channel.id, 'targetAudience', localTargetAudience);\r\n    };\r\n    \r\n    // Handle input changes for description\r\n    const handleDescriptionChange = (e: { target: { value: string } }) => {\r\n      const value = e.target.value;\r\n      setLocalDescription(value);\r\n    };\r\n    \r\n    // Only update on blur for description\r\n    const handleDescriptionBlur = () => {\r\n      onUpdate(channel.id, 'description', localDescription);\r\n    };\r\n    \r\n    return (\r\n      <div className=\"flex gap-4 items-start border border-gray-200 rounded-md p-5 hover:bg-gray-50\">\r\n        <div className=\"flex-grow\">\r\n          <div className=\"grid gap-6 md:grid-cols-3\">\r\n            <div className=\"space-y-3\">\r\n              <Label>Channel Name</Label>\r\n              <div className=\"relative\">\r\n                <Select\r\n                  value={channel.name || \"\"}\r\n                  onValueChange={(value) => onUpdate(channel.id, 'name', value)}\r\n                >\r\n                  <SelectTrigger className=\"w-full\">\r\n                    <SelectValue placeholder=\"Select a channel\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent \r\n                    className=\"bg-white shadow-lg\" \r\n                    position=\"popper\" \r\n                    sideOffset={10}\r\n                    align=\"start\"\r\n                    avoidCollisions={true}\r\n                    style={{ zIndex: 9999999 }}\r\n                  >\r\n                    <div className=\"min-w-[200px] py-1\">\r\n                      <SelectItem value=\"Social Media Advertising\" className=\"py-2.5\">Social Media Advertising</SelectItem>\r\n                      <SelectItem value=\"Google/Search Ads\" className=\"py-2.5\">Google/Search Ads</SelectItem>\r\n                      <SelectItem value=\"Print Media\" className=\"py-2.5\">Print Media</SelectItem>\r\n                      <SelectItem value=\"Event Marketing\" className=\"py-2.5\">Event Marketing</SelectItem>\r\n                      <SelectItem value=\"Influencer Partnerships\" className=\"py-2.5\">Influencer Partnerships</SelectItem>\r\n                      <SelectItem value=\"Email Marketing\" className=\"py-2.5\">Email Marketing</SelectItem>\r\n                      <SelectItem value=\"Content Marketing\" className=\"py-2.5\">Content Marketing</SelectItem>\r\n                      <SelectItem value=\"Referral Programs\" className=\"py-2.5\">Referral Programs</SelectItem>\r\n                      <SelectItem value=\"Other\" className=\"py-2.5\">Other (Custom)</SelectItem>\r\n                    </div>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              <Label>Weekly Budget ($)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                step=\"0.01\"\r\n                value={localBudget}\r\n                onChange={handleBudgetChange}\r\n                onBlur={handleBudgetBlur}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              <Label>Budget Allocation</Label>\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                  <div \r\n                    className=\"bg-blue-600 h-2.5 rounded-full\" \r\n                    style={{ width: `${channel.allocation || 0}%` }}\r\n                  ></div>\r\n                </div>\r\n                <span className=\"ml-2 text-sm font-medium\">{channel.allocation || 0}%</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"grid gap-6 md:grid-cols-2 mt-4\">\r\n            <div className=\"space-y-3\">\r\n              <Label>Target Audience</Label>\r\n              <Input\r\n                value={localTargetAudience}\r\n                onChange={handleTargetAudienceChange}\r\n                onBlur={handleTargetAudienceBlur}\r\n                placeholder=\"Who this channel targets\"\r\n                style={{ zIndex: 10 }}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              <Label>Description</Label>\r\n              <Input\r\n                value={localDescription}\r\n                onChange={handleDescriptionChange}\r\n                onBlur={handleDescriptionBlur}\r\n                placeholder=\"Description of this marketing channel\"\r\n                style={{ zIndex: 10 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Button\r\n          variant=\"destructive\"\r\n          size=\"sm\"\r\n          onClick={() => onDelete(channel.id)}\r\n        >\r\n          <Trash2 className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  });\r\n  \r\n  MarketingChannelEntry.displayName = 'MarketingChannelEntry';\r\n  \r\n  const EventCostEntry = React.memo(({ \r\n    cost, \r\n    onUpdate, \r\n    onDelete \r\n  }: { \r\n    cost: EventCostItem; \r\n    onUpdate: (id: string, field: keyof EventCostItem, value: unknown) => void; \r\n    onDelete: (id: string) => void; \r\n  }) => {\r\n    // Generate unique IDs for these inputs based on the cost ID\r\n    const nameInputId = `cost-name-${cost.id}`;\r\n    const amountInputId = `cost-amount-${cost.id}`;\r\n    \r\n    // Local state to handle input values before committing changes\r\n    const [localName, setLocalName] = useState<string>(cost.name || '');\r\n    const [localAmount, setLocalAmount] = useState<string>(\r\n      cost.amount !== undefined ? (cost.amount === 0 ? '' : String(cost.amount)) : ''\r\n    );\r\n    \r\n    // Sync local state with props when they change, but only when not focused\r\n    useEffect(() => {\r\n      setLocalName(cost.name || '');\r\n      setLocalAmount(cost.amount === 0 ? '' : String(cost.amount));\r\n    }, [cost.name, cost.amount]);\r\n    \r\n    // Handle name change\r\n    const handleNameChange = (value: unknown) => {\r\n      setLocalName(value as string);\r\n      onUpdate(cost.id, 'name', value);\r\n    };\r\n    \r\n    // Handle amount change\r\n    const handleAmountChange = (value: unknown) => {\r\n      onUpdate(cost.id, 'amount', value);\r\n    };\r\n    \r\n    return (\r\n      <div className=\"flex gap-4 items-center border-b pb-4\">\r\n        <div className=\"flex-grow grid gap-4 md:grid-cols-2\">\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor={nameInputId}>Cost Name</Label>\r\n            <InputWithFocus\r\n              id={nameInputId}\r\n              type=\"text\"\r\n              value={localName}\r\n              onChange={handleNameChange}\r\n              placeholder=\"e.g., Venue Rental\"\r\n            />\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor={amountInputId}>Weekly Amount ($)</Label>\r\n            <InputWithFocus\r\n              id={amountInputId}\r\n              type=\"number\"\r\n              min={0}\r\n              step={0.01}\r\n              value={localAmount}\r\n              onChange={handleAmountChange}\r\n              placeholder=\"0.00\"\r\n              parser={(v) => parseFloat(v)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={() => onDelete(cost.id)}\r\n        >\r\n          <Trash2 className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  });\r\n  \r\n  EventCostEntry.displayName = 'EventCostEntry';\r\n\r\n  // Create a separate SetupCostEntry component to fix hooks issue\r\n  const SetupCostEntry = React.memo(({ \r\n    cost, \r\n    onUpdate, \r\n    onDelete \r\n  }: { \r\n    cost: SetupCostItem; \r\n    onUpdate: (id: string, field: keyof SetupCostItem, value: unknown) => void; \r\n    onDelete: (id: string) => void; \r\n  }) => {\r\n    // Generate unique IDs for these inputs based on the cost ID\r\n    const setupNameInputId = `setup-name-${cost.id}`;\r\n    const setupAmountInputId = `setup-amount-${cost.id}`;\r\n    \r\n    // Local state to handle input values before committing changes\r\n    const [localName, setLocalName] = React.useState<string>(cost.name || '');\r\n    const [localAmount, setLocalAmount] = React.useState<string>(\r\n      cost.amount !== undefined ? cost.amount.toString() : '0'\r\n    );\r\n    \r\n    // Update local state when props change (except during active editing)\r\n    const setupItemRef = React.useRef<HTMLDivElement>(null);\r\n    \r\n    // Sync local state with props when they change\r\n    React.useEffect(() => {\r\n      setLocalName(cost.name || '');\r\n      setLocalAmount(cost.amount !== undefined ? cost.amount.toString() : '0');\r\n    }, [cost.name, cost.amount]);\r\n    \r\n    // Handle input changes for name\r\n    const handleNameChange = (e: { target: { value: string } }) => {\r\n      setLocalName(e.target.value);\r\n    };\r\n    \r\n    // Update on blur for name\r\n    const handleNameBlur = () => {\r\n      onUpdate(cost.id, 'name', localName);\r\n    };\r\n    \r\n    // Handle input changes for amount\r\n    const handleAmountChange = (e: { target: { value: string } }) => {\r\n      setLocalAmount(e.target.value);\r\n    };\r\n    \r\n    // Update on blur for amount\r\n    const handleAmountBlur = () => {\r\n      const value = localAmount === '' ? 0 : parseFloat(localAmount);\r\n      onUpdate(cost.id, 'amount', isNaN(value) ? 0 : value);\r\n    };\r\n\r\n    return (\r\n      <div key={cost.id} ref={setupItemRef} className=\"flex gap-4 items-start border-b pb-4\">\r\n        <div className=\"flex-grow\">\r\n          <div className=\"grid gap-4 md:grid-cols-2\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Cost Name</Label>\r\n              <input\r\n                id={setupNameInputId}\r\n                type=\"text\"\r\n                value={localName}\r\n                onChange={handleNameChange}\r\n                onBlur={handleNameBlur}\r\n                placeholder=\"e.g., Equipment Purchase\"\r\n                className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\r\n                style={{ zIndex: 10 }}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Cost Amount ($)</Label>\r\n              <input\r\n                id={setupAmountInputId}\r\n                type=\"number\"\r\n                min=\"0\"\r\n                step=\"0.01\"\r\n                value={localAmount}\r\n                onChange={handleAmountChange}\r\n                onBlur={handleAmountBlur}\r\n                placeholder=\"0.00\"\r\n                className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\r\n                style={{ zIndex: 10 }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"mt-4 flex items-center space-x-2\">\r\n            <Switch\r\n              checked={cost.amortize}\r\n              onCheckedChange={(checked) => onUpdate(cost.id, 'amortize', checked)}\r\n              id={`amortize-${cost.id}`}\r\n            />\r\n            <Label htmlFor={`amortize-${cost.id}`}>Amortize over forecast period</Label>\r\n          </div>\r\n        </div>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => onDelete(cost.id)}\r\n          className=\"text-red-500 hover:text-red-700 hover:bg-red-50 mt-2\"\r\n        >\r\n          <Trash2 className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  SetupCostEntry.displayName = 'SetupCostEntry';\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Initial Setup Costs */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex justify-between items-center\">\r\n            <CardTitle>Initial Setup Costs</CardTitle>\r\n            <Button onClick={handleAddSetupCost}>\r\n              <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n              Add Setup Cost\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {(costMetrics.setupCosts || []).length === 0 ? (\r\n              <p className=\"text-sm text-gray-500 text-center py-4\">\r\n                No setup costs added yet. Click \"Add Setup Cost\" to get started.\r\n              </p>\r\n            ) : (\r\n              (costMetrics.setupCosts || []).map((cost) => (\r\n                <SetupCostEntry\r\n                  key={cost.id}\r\n                  cost={cost}\r\n                  onUpdate={handleUpdateSetupCost}\r\n                  onDelete={handleDeleteSetupCost}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* COGS (Cost of Goods Sold) Settings */}\r\n      <Card className=\"mt-6\">\r\n        <CardHeader>\r\n          <CardTitle>Cost of Goods Sold (COGS) Settings</CardTitle>\r\n          <CardDescription>\r\n            Configure COGS settings based on your product type. These costs are directly tied to each unit sold.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {/* F&B COGS */}\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <Label htmlFor=\"fbCogPercentage\">F&B COGS Percentage</Label>\r\n              <span className=\"text-xs text-gray-500\">Default: 30%</span>\r\n            </div>\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <InputWithFocus\r\n                  id=\"fbCogPercentage\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  max={100}\r\n                  step={0.1}\r\n                  value={costMetrics.fbCogPercentage === undefined ? '' : costMetrics.fbCogPercentage}\r\n                  onChange={(value) => handleCostMetricsChange('fbCogPercentage', value)}\r\n                  parser={(v) => parseFloat(v)}\r\n                  placeholder=\"30\"\r\n                />\r\n                <p className=\"text-xs text-gray-500\">\r\n                  Percentage of F&B revenue that goes to direct costs (ingredients, preparation, etc.)\r\n                </p>\r\n              </div>\r\n              <div className=\"flex flex-col space-y-2\">\r\n                <div className=\"bg-orange-50 p-3 rounded-md border border-orange-200\">\r\n                  <h4 className=\"text-sm font-medium text-orange-700 mb-1\">F&B COGS Impact</h4>\r\n                  <div className=\"text-xs space-y-1\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span>Average Weekly F&B Revenue:</span>\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          calculateAverageWeeklyFbRevenue(currentProduct, costMetrics)\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span>Average Weekly F&B COGS:</span>\r\n                      <span className=\"font-medium text-orange-700\">\r\n                        {formatCurrency(\r\n                          calculateAverageWeeklyFbCogs(currentProduct, costMetrics)\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"border-t border-orange-200 my-1 pt-1\"></div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span>12-Week F&B Revenue:</span>\r\n                      <span className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          calculate12WeekFbRevenue(currentProduct, costMetrics)\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span>12-Week F&B COGS:</span>\r\n                      <span className=\"font-medium text-orange-700\">\r\n                        {formatCurrency(\r\n                          calculate12WeekFbCogs(currentProduct, costMetrics)\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  size=\"sm\" \r\n                  onClick={() => {\r\n                    // Update projections directly\r\n                    if (currentProduct) {\r\n                      console.log(\"Updating projections with current cost metrics\");\r\n                      \r\n                      // Generate new projections with current cost metrics\r\n                      const updatedProjections = generateWeeklyProjections(\r\n                        currentProduct.info,\r\n                        currentProduct.growthMetrics,\r\n                        currentProduct.revenueMetrics,\r\n                        currentProduct.costMetrics\r\n                      );\r\n                      \r\n                      // Update only the projections\r\n                      updateProduct(currentProduct.info.id, {\r\n                        weeklyProjections: updatedProjections\r\n                      });\r\n                      \r\n                      addNotification({\r\n                        type: 'success',\r\n                        message: \"Weekly projections have been recalculated with updated COGS settings.\"\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  Update Projections\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Merchandise COGS (show only for merchandise products) */}\r\n          {currentProduct?.info.type === 'Merchandise Drops' && (\r\n            <div className=\"space-y-2 pt-4 border-t border-gray-200\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <Label htmlFor=\"merchandiseCogPerUnit\">Merchandise COGS Per Unit</Label>\r\n              </div>\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <InputWithFocus\r\n                    id=\"merchandiseCogPerUnit\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={costMetrics.merchandiseCogPerUnit === undefined ? '' : costMetrics.merchandiseCogPerUnit}\r\n                    onChange={(value) => handleCostMetricsChange('merchandiseCogPerUnit', value)}\r\n                    parser={(v) => parseFloat(v)}\r\n                  />\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    Cost per unit for merchandise items (manufacturing, materials, packaging, etc.)\r\n                  </p>\r\n                </div>\r\n                {/* Similar impact panel for merchandise if needed */}\r\n                <div className=\"flex flex-col space-y-2\">\r\n                  <div className=\"bg-pink-50 p-3 rounded-md border border-pink-200\">\r\n                    <h4 className=\"text-sm font-medium text-pink-700 mb-1\">Merchandise COGS Impact</h4>\r\n                    <div className=\"text-xs space-y-1\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Merch Revenue:</span>\r\n                        <span className=\"font-medium\">\r\n                          {formatCurrency(\r\n                            (currentProduct?.revenueMetrics?.merchandiseSpend || 0) * \r\n                            (currentProduct?.revenueMetrics?.merchandiseConversionRate || 0) * \r\n                            (currentProduct?.growthMetrics?.weeklyVisitors || 0) * 4\r\n                          )} /month\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex justify-between\">\r\n                        <span>Merch COGS:</span>\r\n                        <span className=\"font-medium text-pink-700\">\r\n                          {formatCurrency(\r\n                            ((currentProduct?.revenueMetrics?.merchandiseSpend || 0) * \r\n                            (currentProduct?.growthMetrics?.weeklyVisitors || 0) * 4) / \r\n                            (currentProduct?.revenueMetrics?.merchandiseSpend || 1) * \r\n                            (costMetrics.merchandiseCogPerUnit || 0) || 0\r\n                          )} /month\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex justify-between pt-1 border-t border-pink-200 mt-1\">\r\n                        <span>COGS per unit:</span>\r\n                        <span className=\"font-medium\">${costMetrics.merchandiseCogPerUnit || 0}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Marketing Costs */}\r\n      <Card className=\"overflow-visible\">\r\n        <CardHeader>\r\n          <CardTitle>Marketing Costs</CardTitle>\r\n          <CardDescription>\r\n            Define your marketing budget and strategy\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-8\">\r\n            {/* Budget Allocation Method - Moved to top and styled differently */}\r\n            <div className=\"mb-6 border-b pb-6\">\r\n              <Label className=\"mb-3 block text-base font-medium\">Budget Allocation Method</Label>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <Button \r\n                  variant={costMetrics.marketing.allocationMode === 'simple' ? \"default\" : \"outline\"}\r\n                  className=\"w-full justify-start h-auto py-3\" \r\n                  onClick={() => handleAllocationModeChange('simple')}\r\n                >\r\n                  <DollarSign className=\"h-5 w-5 mr-2\" />\r\n                  <div className=\"text-left\">\r\n                    <div>Simple Budget</div>\r\n                    <div className=\"text-xs opacity-70 mt-1\">Weekly or Campaign based budget</div>\r\n                  </div>\r\n                </Button>\r\n                <Button \r\n                  variant={costMetrics.marketing.allocationMode === 'channels' ? \"default\" : \"outline\"}\r\n                  className=\"w-full justify-start h-auto py-3\" \r\n                  onClick={() => handleAllocationModeChange('channels')}\r\n                >\r\n                  <Award className=\"h-5 w-5 mr-2\" />\r\n                  <div className=\"text-left\">\r\n                    <div>Channel-Based</div>\r\n                    <div className=\"text-xs opacity-70 mt-1\">Detailed breakdown by marketing channel</div>\r\n                  </div>\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Simple Budget Allocation */}\r\n            {costMetrics.marketing.allocationMode === 'simple' && (\r\n              <div className=\"space-y-6\">\r\n                <div className=\"space-y-3\">\r\n                  <Label htmlFor=\"marketingType\" className=\"text-base\">Budget Type</Label>\r\n                  <div className=\"relative\">\r\n                    <Select\r\n                      value={costMetrics.marketing.type}\r\n                      onValueChange={(value) => handleMarketingCostChange('type', value)}\r\n                    >\r\n                      <SelectTrigger id=\"marketingType\" className=\"w-full\">\r\n                        <SelectValue placeholder=\"Select budget type\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent \r\n                        className=\"bg-white shadow-lg\" \r\n                        position=\"popper\" \r\n                        sideOffset={10}\r\n                        align=\"start\"\r\n                        avoidCollisions={true}\r\n                        style={{ zIndex: 9999999 }}\r\n                      >\r\n                        <div className=\"min-w-[180px] py-1\">\r\n                          <SelectItem value=\"weekly\" className=\"py-2.5\">Weekly Budget</SelectItem>\r\n                          <SelectItem value=\"campaign\" className=\"py-2.5\">Campaign Budget</SelectItem>\r\n                        </div>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                {costMetrics.marketing.type === 'weekly' ? (\r\n                  <div className=\"space-y-3 mt-6\">\r\n                    <Label htmlFor=\"weeklyBudget\">Weekly Marketing Budget ($)</Label>\r\n                    <Input\r\n                      id=\"weeklyBudget\"\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      step=\"0.01\"\r\n                      value={costMetrics.marketing.weeklyBudget}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleMarketingCostChange('weeklyBudget', parseFloat(e.target.value))}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"grid gap-6 md:grid-cols-2 mt-6\">\r\n                    <div className=\"space-y-3\">\r\n                      <Label htmlFor=\"campaignBudget\">Campaign Budget ($)</Label>\r\n                      <Input\r\n                        id=\"campaignBudget\"\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        step=\"0.01\"\r\n                        value={costMetrics.marketing.campaignBudget || 0}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleMarketingCostChange('campaignBudget', parseFloat(e.target.value))}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-3\">\r\n                      <Label htmlFor=\"campaignDuration\">Campaign Duration (Weeks)</Label>\r\n                      <Input\r\n                        id=\"campaignDuration\"\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        value={costMetrics.marketing.campaignDurationWeeks === null ? '' : costMetrics.marketing.campaignDurationWeeks}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                          const value = e.target.value === '' ? null : parseInt(e.target.value);\r\n                          handleMarketingCostChange('campaignDurationWeeks', value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Only show depreciation for weekly budget */}\r\n                {costMetrics.marketing.type === 'weekly' && (\r\n                  <div className=\"mt-8 pt-6 border-t\">\r\n                    <div className=\"flex items-center space-x-2 mb-4\">\r\n                      <Switch\r\n                        id=\"marketingDepreciation\"\r\n                        checked={costMetrics.marketing.depreciation?.enabled || false}\r\n                        onCheckedChange={(checked: boolean) => handleMarketingDepreciationChange('enabled', checked)}\r\n                      />\r\n                      <Label htmlFor=\"marketingDepreciation\">Enable Marketing Cost Depreciation</Label>\r\n                    </div>\r\n\r\n                    {costMetrics.marketing.depreciation?.enabled && (\r\n                      <div className=\"grid gap-6 md:grid-cols-3 mt-4\">\r\n                        <div className=\"space-y-3\">\r\n                          <Label htmlFor=\"depreciationStart\">Start Week</Label>\r\n                          <Input\r\n                            id=\"depreciationStart\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            value={costMetrics.marketing.depreciation?.startWeek || 1}\r\n                            onChange={(e) => handleMarketingDepreciationChange('startWeek', parseInt(e.target.value))}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-3\">\r\n                          <Label htmlFor=\"depreciationRate\">Weekly Depreciation Rate (%)</Label>\r\n                          <Input\r\n                            id=\"depreciationRate\"\r\n                            type=\"number\"\r\n                            step=\"0.1\"\r\n                            value={costMetrics.marketing.depreciation?.weeklyDepreciationRate || 0}\r\n                            onChange={(e) => handleMarketingDepreciationChange('weeklyDepreciationRate', parseFloat(e.target.value))}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-3\">\r\n                          <Label htmlFor=\"minimumAmount\">Minimum Amount ($)</Label>\r\n                          <Input\r\n                            id=\"minimumAmount\"\r\n                            type=\"number\"\r\n                            step=\"0.01\"\r\n                            value={costMetrics.marketing.depreciation?.minimumAmount || 0}\r\n                            onChange={(e) => handleMarketingDepreciationChange('minimumAmount', parseFloat(e.target.value))}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Channel-based Marketing Budget */}\r\n            {costMetrics.marketing.allocationMode === 'channels' && (\r\n              <div className=\"space-y-6\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                  <h3 className=\"text-base font-medium\">Marketing Channels</h3>\r\n                  <Button onClick={handleAddMarketingChannel} variant=\"outline\">\r\n                    <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n                    Add Marketing Channel\r\n                  </Button>\r\n                </div>\r\n                \r\n                {/* Marketing Budget Summary */}\r\n                {costMetrics.marketing.channels && costMetrics.marketing.channels.length > 0 ? (\r\n                  <div className=\"bg-secondary/20 p-4 rounded-md\">\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div>\r\n                        <h4 className=\"text-sm font-medium mb-1\">Total Marketing Budget</h4>\r\n                        <p className=\"text-2xl font-bold\">\r\n                          ${costMetrics.marketing.channels.reduce((sum, channel) => sum + (channel.budget || 0), 0).toLocaleString()} / week\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <h4 className=\"text-sm font-medium mb-1\">Marketing-to-Revenue Ratio</h4>\r\n                        <p className=\"text-2xl font-bold\">\r\n                          {calculateMarketingToRevenueRatio().toFixed(1)}%\r\n                        </p>\r\n                        <p className=\"text-xs text-gray-500\">\r\n                          {calculateMarketingToRevenueRatio() > 20 ? \r\n                            \"Higher than recommended (15-20%)\" : \r\n                            calculateMarketingToRevenueRatio() < 10 ?\r\n                            \"Lower than recommended (10-15%)\" :\r\n                            \"Within recommended range (10-20%)\"}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Marketing Budget Allocation */}\r\n                    <div className=\"mt-4\">\r\n                      <h4 className=\"text-sm font-medium mb-3\">Budget Allocation</h4>\r\n                      <div className=\"h-8 w-full bg-gray-200 rounded-lg overflow-hidden flex\">\r\n                        {costMetrics.marketing.channels.map((channel, index) => {\r\n                          // Generate a color based on index\r\n                          const colors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-orange-500', 'bg-pink-500'];\r\n                          const color = colors[index % colors.length];\r\n                          \r\n                          return (\r\n                            <div \r\n                              key={channel.id}\r\n                              className={`${color} h-full`}\r\n                              style={{ \r\n                                width: `${channel.allocation || 0}%`,\r\n                                minWidth: channel.allocation && channel.allocation > 0 ? '20px' : '0'\r\n                              }}\r\n                              title={`${channel.name}: ${channel.allocation || 0}%`}\r\n                            />\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <div className=\"flex flex-wrap gap-3 mt-2\">\r\n                        {costMetrics.marketing.channels.map((channel, index) => {\r\n                          const colors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-orange-500', 'bg-pink-500'];\r\n                          const color = colors[index % colors.length];\r\n                          \r\n                          return (\r\n                            <div key={channel.id} className=\"flex items-center text-sm\">\r\n                              <div className={`w-3 h-3 ${color} rounded-sm mr-1`}></div>\r\n                              <span>{channel.name}: {channel.allocation || 0}%</span>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"text-center p-8 border-2 border-dashed border-gray-200 rounded-lg\">\r\n                    <h3 className=\"text-lg font-medium text-gray-500 mb-2\">No marketing channels defined</h3>\r\n                    <p className=\"text-sm text-gray-400 mb-4\">\r\n                      Start by adding your marketing channels and allocating budget\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Marketing Channel Entries */}\r\n                <div className=\"space-y-4 mt-6\">\r\n                  {(costMetrics.marketing.channels || []).map((channel) => (\r\n                    <MarketingChannelEntry\r\n                      key={channel.id}\r\n                      channel={channel}\r\n                      onUpdate={handleUpdateMarketingChannel}\r\n                      onDelete={handleDeleteMarketingChannel}\r\n                    />\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Marketing Cost Depreciation for channels */}\r\n                <div className=\"space-y-4 border-t pt-6 mt-6\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Switch\r\n                      id=\"channelMarketingDepreciation\"\r\n                      checked={costMetrics.marketing.depreciation?.enabled || false}\r\n                      onCheckedChange={(checked: boolean) => handleMarketingDepreciationChange('enabled', checked)}\r\n                    />\r\n                    <Label htmlFor=\"channelMarketingDepreciation\">Enable Marketing Cost Depreciation</Label>\r\n                  </div>\r\n\r\n                  {costMetrics.marketing.depreciation?.enabled && (\r\n                    <div className=\"grid gap-6 md:grid-cols-3 mt-4\">\r\n                      <div className=\"space-y-3\">\r\n                        <Label htmlFor=\"channelDepreciationStart\">Start Week</Label>\r\n                        <Input\r\n                          id=\"channelDepreciationStart\"\r\n                          type=\"number\"\r\n                          min=\"1\"\r\n                          value={costMetrics.marketing.depreciation?.startWeek || 1}\r\n                          onChange={(e) => handleMarketingDepreciationChange('startWeek', parseInt(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-3\">\r\n                        <Label htmlFor=\"channelDepreciationRate\">Weekly Depreciation Rate (%)</Label>\r\n                        <Input\r\n                          id=\"channelDepreciationRate\"\r\n                          type=\"number\"\r\n                          step=\"0.1\"\r\n                          value={costMetrics.marketing.depreciation?.weeklyDepreciationRate || 0}\r\n                          onChange={(e) => handleMarketingDepreciationChange('weeklyDepreciationRate', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-3\">\r\n                        <Label htmlFor=\"channelMinimumAmount\">Minimum Amount ($)</Label>\r\n                        <Input\r\n                          id=\"channelMinimumAmount\"\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          value={costMetrics.marketing.depreciation?.minimumAmount || 0}\r\n                          onChange={(e) => handleMarketingDepreciationChange('minimumAmount', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Staffing Costs */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex justify-between items-center\">\r\n            <CardTitle>Staffing Costs</CardTitle>\r\n            {costMetrics.staffingAllocationMode === 'detailed' && (\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"w-full flex items-center\" \r\n                onClick={handleAddStaffRole}\r\n              >\r\n                <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n                Add Staff Role ($ per week)\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-6\">\r\n            {/* Staffing allocation method selection */}\r\n            <div className=\"space-y-2\">\r\n              <Label>Staffing Allocation Method</Label>\r\n              <div className=\"flex gap-2\">\r\n                <Button \r\n                  variant={costMetrics.staffingAllocationMode === 'simple' ? \"default\" : \"outline\"}\r\n                  className=\"flex-1 justify-start\" \r\n                  onClick={() => handleStaffingAllocationModeChange('simple')}\r\n                >\r\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                  <span className=\"ml-2 text-xs opacity-70\">\r\n                    (Weekly Staff Cost)\r\n                  </span>\r\n                </Button>\r\n                <Button \r\n                  variant={costMetrics.staffingAllocationMode === 'detailed' ? \"default\" : \"outline\"}\r\n                  className=\"flex-1 justify-start\" \r\n                  onClick={() => handleStaffingAllocationModeChange('detailed')}\r\n                >\r\n                  <Users className=\"h-4 w-4 mr-2\" />\r\n                  <span className=\"ml-2 text-xs opacity-70\">\r\n                    (Individual Staff)\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Simple staffing allocation */}\r\n            {costMetrics.staffingAllocationMode === 'simple' && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid gap-4 md:grid-cols-2\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"weeklyStaffCost\">Weekly Staff Cost ($)</Label>\r\n                    <InputWithFocus\r\n                      id=\"weeklyStaffCost\"\r\n                      type=\"number\"\r\n                      min={0}\r\n                      step={0.01}\r\n                      value={costMetrics.weeklyStaffCost || 0}\r\n                      onChange={(value) => handleCostMetricsChange('weeklyStaffCost', value)}\r\n                      parser={(v) => parseFloat(v)}\r\n                    />\r\n                  </div>\r\n                  {currentProduct?.info.forecastType === 'per-event' && (\r\n                    <>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"additionalStaffing\">Additional Staff per Event</Label>\r\n                        <InputWithFocus\r\n                          id=\"additionalStaffing\"\r\n                          type=\"number\"\r\n                          min={0}\r\n                          value={costMetrics.additionalStaffingPerEvent || 0}\r\n                          onChange={(value) => handleCostMetricsChange('additionalStaffingPerEvent', value)}\r\n                          parser={(v) => parseInt(v)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"staffingCostPerson\">Cost per Staff Member per Event ($)</Label>\r\n                        <InputWithFocus\r\n                          id=\"staffingCostPerson\"\r\n                          type=\"number\"\r\n                          step={0.01}\r\n                          value={costMetrics.staffingCostPerPerson || 0}\r\n                          onChange={(value) => handleCostMetricsChange('staffingCostPerPerson', value)}\r\n                          parser={(v) => parseFloat(v)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Detailed staff role management */}\r\n            {costMetrics.staffingAllocationMode === 'detailed' && (\r\n              <>\r\n                {/* Staff Roles */}\r\n                <div className=\"space-y-4\">\r\n                  {(costMetrics.staffRoles || []).length === 0 ? (\r\n                    <p className=\"text-sm text-gray-500 text-center py-4\">\r\n                      No staff roles added yet. Click \"Add Staff Role\" to define your team structure.\r\n                    </p>\r\n                  ) : (\r\n                    (costMetrics.staffRoles || []).map((role) => (\r\n                      <div key={role.id} className=\"flex gap-4 items-start border-b pb-4\">\r\n                        <div className=\"flex-grow\">\r\n                          <div className=\"grid gap-4 md:grid-cols-4\">\r\n                            <div className=\"space-y-2\">\r\n                              <Label>Role Title</Label>\r\n                              <Input\r\n                                value={role.role}\r\n                                onChange={(e) => handleUpdateStaffRole(role.id, 'role', e.target.value)}\r\n                                placeholder=\"e.g., Event Manager, Staff, Security\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"space-y-2\">\r\n                              <Label>Number Needed</Label>\r\n                              <Input\r\n                                type=\"number\"\r\n                                min=\"1\"\r\n                                value={role.count}\r\n                                onChange={(e) => handleUpdateStaffRole(role.id, 'count', parseInt(e.target.value))}\r\n                              />\r\n                            </div>\r\n                            <div className=\"space-y-2\">\r\n                              <Label>Cost per Person ($ per week)</Label>\r\n                              <Input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                step=\"0.01\"\r\n                                value={role.costPerPerson}\r\n                                onChange={(e) => handleUpdateStaffRole(role.id, 'costPerPerson', parseFloat(e.target.value))}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"mt-2\">\r\n                            <Label>Notes</Label>\r\n                            <Input\r\n                              value={role.notes}\r\n                              onChange={(e) => handleUpdateStaffRole(role.id, 'notes', e.target.value)}\r\n                              placeholder=\"Additional details about this role\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => handleDeleteStaffRole(role.id)}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Event Costs */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex justify-between items-center\">\r\n            <CardTitle>Event Costs</CardTitle>\r\n            <Button onClick={handleAddEventCost}>\r\n              <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n              Add Event Cost\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {(costMetrics.eventCosts || []).length === 0 ? (\r\n              <p className=\"text-sm text-gray-500 text-center py-4\">\r\n                No event costs added yet. Click \"Add Event Cost\" to get started.\r\n              </p>\r\n            ) : (\r\n              (costMetrics.eventCosts || []).map((cost) => (\r\n                <EventCostEntry\r\n                  key={cost.id}\r\n                  cost={cost}\r\n                  onUpdate={handleUpdateEventCost}\r\n                  onDelete={handleDeleteEventCost}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ForecastInputs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCostMetricsChange' is assigned a value but never used.","line":72,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleMarketingCostChange' is assigned a value but never used.","line":80,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport useStore from '../store/useStore';\r\nimport { generateWeeklyProjections } from '../lib/calculations';\r\nimport IsolatedInput from './IsolatedInput';\r\nimport IsolatedSelect from './IsolatedSelect';\r\n\r\nexport default function ForecastInputs() {\r\n  const { \r\n    productInfo, \r\n    setProductInfo,\r\n    growthMetrics,\r\n    setGrowthMetrics,\r\n    revenueMetrics,\r\n    setRevenueMetrics,\r\n    costMetrics,\r\n    setCostMetrics,\r\n    customerMetrics,\r\n    setCustomerMetrics,\r\n    updateWeeklyProjections\r\n  } = useStore();\r\n\r\n  // Update projections whenever metrics change\r\n  useEffect(() => {\r\n    if (productInfo && growthMetrics && revenueMetrics && costMetrics) {\r\n      const projections = generateWeeklyProjections(\r\n        productInfo,\r\n        growthMetrics,\r\n        revenueMetrics,\r\n        costMetrics\r\n      );\r\n      updateWeeklyProjections(projections);\r\n    }\r\n  }, [productInfo, growthMetrics, revenueMetrics, costMetrics, updateWeeklyProjections]);\r\n\r\n  // Handle product info changes\r\n  const handleProductInfoChange = (field: keyof typeof productInfo, value: unknown) => {\r\n    setProductInfo({\r\n      ...productInfo,\r\n      [field]: value\r\n    });\r\n  };\r\n\r\n  // Handle growth metrics changes\r\n  const handleGrowthMetricsChange = (field: keyof typeof growthMetrics, value: unknown) => {\r\n    // Add console logging to debug\r\n    console.log(`Growth metrics changing: ${field} = ${value}`);\r\n    \r\n    const newGrowthMetrics = { ...growthMetrics, [field]: value };\r\n    setGrowthMetrics(newGrowthMetrics);\r\n    \r\n    // Force update projections immediately\r\n    updateWeeklyProjections(productInfo, newGrowthMetrics, revenueMetrics, costMetrics, customerMetrics);\r\n  };\r\n\r\n  // Handle revenue metrics changes\r\n  const handleRevenueMetricsChange = (field: keyof typeof revenueMetrics, value: unknown) => {\r\n    // Add console logging to debug\r\n    console.log(`Revenue metrics changing: ${field} = ${value}`);\r\n    \r\n    const newRevenueMetrics = { ...revenueMetrics, [field]: value };\r\n    setRevenueMetrics(newRevenueMetrics);\r\n    \r\n    // Force update projections immediately\r\n    updateWeeklyProjections(productInfo, growthMetrics, newRevenueMetrics, costMetrics, customerMetrics);\r\n  };\r\n\r\n  // Handle cost metrics changes\r\n  const handleCostMetricsChange = (field: keyof typeof costMetrics, value: unknown) => {\r\n    setCostMetrics({\r\n      ...costMetrics,\r\n      [field]: value\r\n    });\r\n  };\r\n\r\n  // Handle marketing cost changes\r\n  const handleMarketingCostChange = (field: keyof typeof costMetrics.marketing, value: unknown) => {\r\n    setCostMetrics({\r\n      ...costMetrics,\r\n      marketing: {\r\n        ...costMetrics.marketing,\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  // Handle customer metrics changes\r\n  const handleCustomerMetricsChange = (field: keyof typeof customerMetrics, value: unknown) => {\r\n    setCustomerMetrics({\r\n      ...customerMetrics,\r\n      [field]: value\r\n    });\r\n  };\r\n\r\n  // Determine if some fields should be shown based on product type\r\n  const isEventBasedProduct = productInfo.type === 'Experiential Events' || productInfo.type === 'Venue-Based Activations';\r\n  const isPhysicalProduct = productInfo.type === 'Food & Beverage Products' || productInfo.type === 'Merchandise Drops';\r\n  const isDigitalProduct = productInfo.type === 'Digital Products';\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Product Settings</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"productType\">Product Type</Label>\r\n              <Select\r\n                value={productInfo.type}\r\n                onValueChange={(value) => handleProductInfoChange('type', value)}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select product type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"Experiential Events\">Experiential Events</SelectItem>\r\n                  <SelectItem value=\"Venue-Based Activations\">Venue-Based Activations</SelectItem>\r\n                  <SelectItem value=\"Food & Beverage Products\">Food & Beverage Products</SelectItem>\r\n                  <SelectItem value=\"Merchandise Drops\">Merchandise Drops</SelectItem>\r\n                  <SelectItem value=\"Digital Products\">Digital Products</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"targetAudience\">Target Audience</Label>\r\n              <Input\r\n                id=\"targetAudience\"\r\n                value={productInfo.targetAudience}\r\n                onChange={(e) => handleProductInfoChange('targetAudience', e.target.value)}\r\n                placeholder=\"Who is this product targeting?\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"forecastPeriod\">Forecast Period (weeks)</Label>\r\n              <Input\r\n                id=\"forecastPeriod\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max=\"104\"\r\n                value={productInfo.forecastPeriod}\r\n                onChange={(e) => handleProductInfoChange('forecastPeriod', parseInt(e.target.value))}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"forecastType\">Forecast Type</Label>\r\n              <Select\r\n                value={productInfo.forecastType}\r\n                onValueChange={(value) => handleProductInfoChange('forecastType', value)}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select forecast type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"weekly\">Weekly</SelectItem>\r\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\r\n                  <SelectItem value=\"quarterly\">Quarterly</SelectItem>\r\n                  <SelectItem value=\"per-event\">Per Event</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            {isEventBasedProduct && productInfo.forecastType === 'weekly' && (\r\n              <div>\r\n                <Label htmlFor=\"eventsPerWeek\">Events Per Week</Label>\r\n                <Input\r\n                  id=\"eventsPerWeek\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"30\"\r\n                  value={productInfo.eventsPerWeek || 1}\r\n                  onChange={(e) => handleProductInfoChange('eventsPerWeek', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Growth & Audience Metrics</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"growthModel\">Growth Model</Label>\r\n              <IsolatedSelect\r\n                id=\"growthModel\"\r\n                label=\"Growth Model\"\r\n                options={[\r\n                  { value: 'Linear', label: 'Linear' },\r\n                  { value: 'Exponential', label: 'Exponential' },\r\n                  { value: 'Decay', label: 'Decay' }\r\n                ]}\r\n                value={growthMetrics.growthModel}\r\n                onChange={(e) => handleGrowthMetricsChange('growthModel', e.target.value)}\r\n                placeholder=\"Select growth model\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <IsolatedInput\r\n                id=\"weeklyGrowthRate\"\r\n                type=\"number\"\r\n                min={-50}\r\n                max={100}\r\n                value={growthMetrics.weeklyGrowthRate || 0}\r\n                onChange={(e) => handleGrowthMetricsChange('weeklyGrowthRate', parseFloat(e.target.value))}\r\n                label={growthMetrics.growthModel === 'Decay' ? 'Weekly Decay Rate (%)' : 'Weekly Growth Rate (%)'}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {isEventBasedProduct && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"totalVisitors\">Total Expected Audience</Label>\r\n                <Input\r\n                  id=\"totalVisitors\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={growthMetrics.totalVisitors}\r\n                  onChange={(e) => handleGrowthMetricsChange('totalVisitors', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"expectedVisitors\">Expected Weekly Visitors</Label>\r\n                <Input\r\n                  id=\"expectedVisitors\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  value={growthMetrics.expectedVisitors || ''}\r\n                  onChange={(e) => {\r\n                    // For empty input, set value as 0\r\n                    const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                    handleGrowthMetricsChange('expectedVisitors', value);\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"visitorsPerEvent\">Visitors Per Event</Label>\r\n                <Input\r\n                  id=\"visitorsPerEvent\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={growthMetrics.visitorsPerEvent}\r\n                  onChange={(e) => handleGrowthMetricsChange('visitorsPerEvent', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {isDigitalProduct && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"totalVisitors\">Total Expected Users</Label>\r\n                <Input\r\n                  id=\"totalVisitors\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={growthMetrics.totalVisitors}\r\n                  onChange={(e) => handleGrowthMetricsChange('totalVisitors', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"weeklyVisitors\">Weekly Users (Initial)</Label>\r\n                <Input\r\n                  id=\"weeklyVisitors\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={growthMetrics.weeklyVisitors}\r\n                  onChange={(e) => handleGrowthMetricsChange('weeklyVisitors', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"socialMediaConversion\">Social Media Conversion (%)</Label>\r\n                <Input\r\n                  id=\"socialMediaConversion\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  step=\"0.1\"\r\n                  value={growthMetrics.socialMediaConversion * 100}\r\n                  onChange={(e) => handleGrowthMetricsChange('socialMediaConversion', parseFloat(e.target.value) / 100)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {isPhysicalProduct && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"totalVisitors\">Total Expected Customers</Label>\r\n                <Input\r\n                  id=\"totalVisitors\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={growthMetrics.totalVisitors}\r\n                  onChange={(e) => handleGrowthMetricsChange('totalVisitors', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"weeklyVisitors\">Weekly Customers (Initial)</Label>\r\n                <Input\r\n                  id=\"weeklyVisitors\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={growthMetrics.weeklyVisitors}\r\n                  onChange={(e) => handleGrowthMetricsChange('weeklyVisitors', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"returnVisitRate\">Repeat Purchase Rate (%)</Label>\r\n                <Input\r\n                  id=\"returnVisitRate\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  step=\"0.1\"\r\n                  value={growthMetrics.returnVisitRate * 100}\r\n                  onChange={(e) => handleGrowthMetricsChange('returnVisitRate', parseFloat(e.target.value) / 100)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"returnVisitRate\">Return Visit Rate (%)</Label>\r\n              <Input\r\n                id=\"returnVisitRate\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"0.1\"\r\n                value={growthMetrics.returnVisitRate * 100}\r\n                onChange={(e) => handleGrowthMetricsChange('returnVisitRate', parseFloat(e.target.value) / 100)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"wordOfMouthRate\">Word of Mouth Rate (%)</Label>\r\n              <Input\r\n                id=\"wordOfMouthRate\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"0.1\"\r\n                value={growthMetrics.wordOfMouthRate * 100}\r\n                onChange={(e) => handleGrowthMetricsChange('wordOfMouthRate', parseFloat(e.target.value) / 100)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Rest of the component remains the same */}\r\n      \r\n      {/* Add more product-type specific inputs for revenue metrics */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Revenue Metrics</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {isEventBasedProduct && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"ticketPrice\">Ticket Price ($)</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                  value={revenueMetrics.ticketPrice}\r\n                  onChange={(e) => handleRevenueMetricsChange('ticketPrice', parseFloat(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"ticketSalesRate\">Ticket Sales Rate (%)</Label>\r\n                <Input\r\n                  id=\"ticketSalesRate\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  step=\"0.1\"\r\n                  value={revenueMetrics.ticketSalesRate * 100}\r\n                  onChange={(e) => handleRevenueMetricsChange('ticketSalesRate', parseFloat(e.target.value) / 100)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* F&B, Merchandise, and Digital Product specific fields */}\r\n          {(isEventBasedProduct || isPhysicalProduct) && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"fbSpend\">F&B Average Spend ($)</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                  value={revenueMetrics.fbSpend}\r\n                  onChange={(e) => handleRevenueMetricsChange('fbSpend', parseFloat(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"fbConversionRate\">F&B Conversion Rate (%)</Label>\r\n                <Input\r\n                  id=\"fbConversionRate\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  step=\"0.1\"\r\n                  value={revenueMetrics.fbConversionRate * 100}\r\n                  onChange={(e) => handleRevenueMetricsChange('fbConversionRate', parseFloat(e.target.value) / 100)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {(isEventBasedProduct || isPhysicalProduct) && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"merchandiseSpend\">Merchandise Average Spend ($)</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                  value={revenueMetrics.merchandiseSpend}\r\n                  onChange={(e) => handleRevenueMetricsChange('merchandiseSpend', parseFloat(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"merchandiseConversionRate\">Merchandise Conversion Rate (%)</Label>\r\n                <Input\r\n                  id=\"merchandiseConversionRate\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  step=\"0.1\"\r\n                  value={revenueMetrics.merchandiseConversionRate * 100}\r\n                  onChange={(e) => handleRevenueMetricsChange('merchandiseConversionRate', parseFloat(e.target.value) / 100)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {(isEventBasedProduct || isDigitalProduct) && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"digitalPrice\">Digital Product Price ($)</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                  value={revenueMetrics.digitalPrice}\r\n                  onChange={(e) => handleRevenueMetricsChange('digitalPrice', parseFloat(e.target.value))}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"digitalConversionRate\">Digital Conversion Rate (%)</Label>\r\n                <Input\r\n                  id=\"digitalConversionRate\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  step=\"0.1\"\r\n                  value={revenueMetrics.digitalConversionRate * 100}\r\n                  onChange={(e) => handleRevenueMetricsChange('digitalConversionRate', parseFloat(e.target.value) / 100)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Customer Metrics */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Customer Metrics</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            {isEventBasedProduct && (\r\n              <div>\r\n                <Label htmlFor=\"visitDuration\">Average Visit Duration (minutes)</Label>\r\n                <Input\r\n                  id=\"visitDuration\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={customerMetrics.visitDuration}\r\n                  onChange={(e) => handleCustomerMetricsChange('visitDuration', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <Label htmlFor=\"satisfactionScore\">Satisfaction Score (1-10)</Label>\r\n              <Input\r\n                id=\"satisfactionScore\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max=\"10\"\r\n                step=\"0.1\"\r\n                value={customerMetrics.satisfactionScore}\r\n                onChange={(e) => handleCustomerMetricsChange('satisfactionScore', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"nps\">Net Promoter Score (-100 to 100)</Label>\r\n              <Input\r\n                id=\"nps\"\r\n                type=\"number\"\r\n                min=\"-100\"\r\n                max=\"100\"\r\n                value={customerMetrics.nps}\r\n                onChange={(e) => handleCustomerMetricsChange('nps', parseInt(e.target.value))}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"returnIntent\">Return Intent (%)</Label>\r\n              <Input\r\n                id=\"returnIntent\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"0.1\"\r\n                value={customerMetrics.returnIntent * 100}\r\n                onChange={(e) => handleCustomerMetricsChange('returnIntent', parseFloat(e.target.value) / 100)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"communityEngagement\">Community Engagement (%)</Label>\r\n              <Input\r\n                id=\"communityEngagement\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"0.1\"\r\n                value={customerMetrics.communityEngagement * 100}\r\n                onChange={(e) => handleCustomerMetricsChange('communityEngagement', parseFloat(e.target.value) / 100)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ForecastRevenue.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentProduct'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [currentProduct, currentProduct.info.id]","fix":{"range":[973,998],"text":"[currentProduct, currentProduct.info.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport useStore from '../store/useStore';\r\nimport { generateWeeklyProjections } from '../lib/calculations';\r\nimport type { GrowthMetrics, RevenueMetrics } from '../types';\r\n\r\nexport default function ForecastRevenue() {\r\n  const { products, currentProductId, updateProduct } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  const [growthMetrics, setGrowthMetrics] = useState<Partial<GrowthMetrics>>({});\r\n  const [revenueMetrics, setRevenueMetrics] = useState<Partial<RevenueMetrics>>({});\r\n\r\n  // Initialize state from product\r\n  useEffect(() => {\r\n    if (currentProduct) {\r\n      setGrowthMetrics(currentProduct.growthMetrics || {});\r\n      setRevenueMetrics(currentProduct.revenueMetrics || {});\r\n    }\r\n  }, [currentProduct?.info.id]);\r\n\r\n  const updateProjections = useCallback((\r\n    newGrowthMetrics: Partial<GrowthMetrics>,\r\n    newRevenueMetrics: Partial<RevenueMetrics>\r\n  ) => {\r\n    if (!currentProduct) return;\r\n\r\n    const fullGrowthMetrics: GrowthMetrics = {\r\n      totalVisitors: 0,\r\n      weeklyVisitors: 0,\r\n      visitorsPerEvent: 0,\r\n      growthModel: 'Exponential',\r\n      weeklyGrowthRate: 0,\r\n      peakDayAttendance: 0,\r\n      lowDayAttendance: 0,\r\n      returnVisitRate: 0,\r\n      wordOfMouthRate: 0,\r\n      socialMediaConversion: 0,\r\n      ...newGrowthMetrics\r\n    };\r\n\r\n    const fullRevenueMetrics: RevenueMetrics = {\r\n      ticketPrice: 0,\r\n      ticketSalesRate: 1,\r\n      fbSpend: 0,\r\n      fbConversionRate: 1,\r\n      merchandiseSpend: 0,\r\n      merchandiseConversionRate: 1,\r\n      digitalPrice: 0,\r\n      digitalConversionRate: 1,\r\n      ...newRevenueMetrics\r\n    };\r\n\r\n    const projections = generateWeeklyProjections(\r\n      currentProduct.info,\r\n      fullGrowthMetrics,\r\n      fullRevenueMetrics,\r\n      currentProduct.costMetrics\r\n    );\r\n\r\n    updateProduct(currentProduct.info.id, {\r\n      growthMetrics: fullGrowthMetrics,\r\n      revenueMetrics: fullRevenueMetrics,\r\n      weeklyProjections: projections\r\n    });\r\n  }, [currentProduct, updateProduct]);\r\n\r\n  const handleGrowthMetricChange = useCallback((field: keyof GrowthMetrics, value: number) => {\r\n    const newMetrics = { ...growthMetrics, [field]: value };\r\n    setGrowthMetrics(newMetrics);\r\n    updateProjections(newMetrics, revenueMetrics);\r\n  }, [growthMetrics, revenueMetrics, updateProjections]);\r\n\r\n  const handleRevenueMetricChange = (field: keyof RevenueMetrics, value: number | string) => {\r\n    console.log(`Revenue metric changing: ${field} = ${value}`);\r\n    \r\n    // Convert empty string to 0 and preserve other values\r\n    const numericValue = value === '' ? 0 : typeof value === 'string' ? parseFloat(value) : value;\r\n    \r\n    const newRevenueMetrics = { ...revenueMetrics, [field]: numericValue };\r\n    setRevenueMetrics(newRevenueMetrics);\r\n    \r\n    // Force immediate update\r\n    updateProjections(growthMetrics, newRevenueMetrics);\r\n  };\r\n\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Growth & Revenue Metrics</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-6\">\r\n            {/* Growth Metrics */}\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold mb-4\">Growth Metrics</h3>\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                {currentProduct.info.forecastType === 'weekly' ? (\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"weeklyVisitors\">Expected Weekly Visitors</Label>\r\n                    <Input\r\n                      id=\"weeklyVisitors\"\r\n                      type=\"number\"\r\n                      min={0}\r\n                      step={1}\r\n                      value={growthMetrics.weeklyVisitors || 0}\r\n                      onValueChange={(value) => \r\n                        handleGrowthMetricChange('weeklyVisitors', Number(value))\r\n                      }\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"visitorsPerEvent\">Expected Visitors per Event</Label>\r\n                    <Input\r\n                      id=\"visitorsPerEvent\"\r\n                      type=\"number\"\r\n                      min={0}\r\n                      step={1}\r\n                      value={growthMetrics.visitorsPerEvent || 0}\r\n                      onValueChange={(value) => \r\n                        handleGrowthMetricChange('visitorsPerEvent', Number(value))\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"weeklyGrowthRate\">Weekly Growth Rate (%)</Label>\r\n                  <Input\r\n                    id=\"weeklyGrowthRate\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.1}\r\n                    value={growthMetrics.weeklyGrowthRate || 0}\r\n                    onValueChange={(value) => \r\n                      handleGrowthMetricChange('weeklyGrowthRate', Number(value))\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Revenue Metrics */}\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold mb-4\">Revenue Streams</h3>\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"ticketPrice\">Ticket Price ($)</Label>\r\n                  <Input\r\n                    id=\"ticketPrice\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={revenueMetrics.ticketPrice || ''}\r\n                    onChange={(e) => {\r\n                      // For empty input, set value as 0\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleRevenueMetricChange('ticketPrice', value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"fbSpend\">F&B Spend per Customer ($)</Label>\r\n                  <Input\r\n                    id=\"fbSpend\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={revenueMetrics.fbSpend || ''}\r\n                    onChange={(e) => {\r\n                      // For empty input, set value as 0\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleRevenueMetricChange('fbSpend', value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"merchandiseSpend\">Merchandise Spend ($)</Label>\r\n                  <Input\r\n                    id=\"merchandiseSpend\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={revenueMetrics.merchandiseSpend || ''}\r\n                    onChange={(e) => {\r\n                      // For empty input, set value as 0\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleRevenueMetricChange('merchandiseSpend', value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"digitalPrice\">Digital Product Price ($)</Label>\r\n                  <Input\r\n                    id=\"digitalPrice\"\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    value={revenueMetrics.digitalPrice || ''}\r\n                    onChange={(e) => {\r\n                      // For empty input, set value as 0\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n                      handleRevenueMetricChange('digitalPrice', value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\HomePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Upload' is defined but never used.","line":9,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7595,7598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7595,7598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Textarea } from './ui/textarea';\r\nimport { PlusCircle, Trash2, Upload, BarChart, BarChart2 } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { DEFAULT_SEASONAL_ANALYSIS } from '../types';\r\nimport type { Product, ProductInfo } from '../types';\r\nimport UserProfile from './UserProfile';\r\nimport { Breadcrumbs } from './ui/breadcrumb';\r\nimport { RecentlyViewed } from './ui/recently-viewed';\r\n\r\nexport default function HomePage() {\r\n  const navigate = useNavigate();\r\n  const { products, addProduct, deleteProduct } = useStore();\r\n  const [showNewProduct, setShowNewProduct] = useState(false);\r\n  const [newProduct, setNewProduct] = useState<Partial<ProductInfo>>({\r\n    name: '',\r\n    type: 'Food & Beverage Products',\r\n    description: '',\r\n    logo: null,\r\n    forecastType: 'weekly',\r\n    forecastPeriod: 12,\r\n    eventsPerWeek: 1\r\n  });\r\n\r\n  // Modified fix for UI elements - simpler approach that doesn't replace elements\r\n  useEffect(() => {\r\n    const style = document.createElement('style');\r\n    style.id = 'input-fix-style';\r\n    \r\n    // Only add the style if it doesn't exist already\r\n    if (!document.getElementById('input-fix-style')) {\r\n      style.textContent = `\r\n        input, textarea, select, button, [role=\"button\"] {\r\n          pointer-events: auto !important;\r\n          position: relative !important;\r\n          z-index: 100 !important;\r\n        }\r\n        \r\n        .select-content {\r\n          z-index: 9999 !important;\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n    \r\n    return () => {\r\n      if (document.getElementById('input-fix-style')) {\r\n        document.getElementById('input-fix-style')?.remove();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleLogoUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setNewProduct((prev) => ({\r\n          ...prev,\r\n          logo: reader.result as string\r\n        }));\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }, []);\r\n\r\n  // Improved handleCreateProduct with better error handling\r\n  const handleCreateProduct = () => {\r\n    try {\r\n      if (!newProduct.name) {\r\n        alert('Please enter a product name');\r\n        return;\r\n      }\r\n      \r\n      const productId = crypto.randomUUID();\r\n      const now = new Date();\r\n      \r\n      // Generate 12 weeks of simple projections data for visualization\r\n      const weeklyProjections = Array.from({ length: 12 }, (_, weekIndex) => {\r\n        const week = weekIndex + 1;\r\n        // Generate some sample data with growth\r\n        const growthFactor = 1 + (0.1 * week); // 10% growth each week\r\n        const numberOfEvents = 1;\r\n        const averageEventAttendance = 100 * growthFactor;\r\n        const footTraffic = averageEventAttendance * numberOfEvents;\r\n        \r\n        // Revenue calculations\r\n        const ticketRevenue = footTraffic * 25 * 0.8; // 80% conversion\r\n        const fbRevenue = footTraffic * 15 * 0.6; // 60% conversion\r\n        const merchandiseRevenue = footTraffic * 10 * 0.2; // 20% conversion\r\n        const digitalRevenue = footTraffic * 5 * 0.1; // 10% conversion\r\n        const totalRevenue = ticketRevenue + fbRevenue + merchandiseRevenue + digitalRevenue;\r\n        \r\n        // Cost calculations\r\n        const marketingCosts = 500 * growthFactor;\r\n        const staffingCosts = numberOfEvents * 5 * 200; // 5 staff at $200 each\r\n        const eventCosts = numberOfEvents * 500;\r\n        const setupCosts = week === 1 ? 1000 : 0; // Only first week\r\n        const fbCogs = fbRevenue * 0.3; // 30% cost of goods\r\n        const merchandiseCogs = merchandiseRevenue * 0.5; // 50% cost of goods\r\n        const totalCosts = marketingCosts + staffingCosts + eventCosts + setupCosts + fbCogs + merchandiseCogs;\r\n        \r\n        // Profit calculations\r\n        const weeklyProfit = totalRevenue - totalCosts;\r\n        const cumulativeProfit = week === 1 ? weeklyProfit : 0; // Will be calculated after creation\r\n        \r\n        return {\r\n          week,\r\n          numberOfEvents,\r\n          footTraffic,\r\n          averageEventAttendance,\r\n          ticketRevenue,\r\n          fbRevenue,\r\n          merchandiseRevenue,\r\n          digitalRevenue,\r\n          totalRevenue,\r\n          marketingCosts,\r\n          staffingCosts,\r\n          eventCosts,\r\n          setupCosts,\r\n          fbCogs,\r\n          merchandiseCogs,\r\n          totalCosts,\r\n          weeklyProfit,\r\n          cumulativeProfit,\r\n          notes: \"\"\r\n        };\r\n      });\r\n      \r\n      const product: Product = {\r\n        info: {\r\n          id: productId,\r\n          name: newProduct.name || 'New Product',\r\n          type: newProduct.type || 'Food & Beverage Products',\r\n          description: newProduct.description || '',\r\n          logo: newProduct.logo || null,\r\n          targetAudience: '',\r\n          developmentStartDate: now,\r\n          developmentEndDate: now,\r\n          launchDate: now,\r\n          forecastPeriod: 12,\r\n          forecastType: 'weekly',\r\n          eventsPerWeek: 1,\r\n          createdAt: now,\r\n          updatedAt: now\r\n        },\r\n        growthMetrics: {\r\n          totalVisitors: 1000,\r\n          weeklyVisitors: 100,\r\n          visitorsPerEvent: 50,\r\n          growthModel: 'Exponential',\r\n          weeklyGrowthRate: 10,\r\n          peakDayAttendance: 200,\r\n          lowDayAttendance: 50,\r\n          returnVisitRate: 0.2,\r\n          wordOfMouthRate: 0.1,\r\n          socialMediaConversion: 0.05\r\n        },\r\n        revenueMetrics: {\r\n          ticketPrice: 25,\r\n          ticketSalesRate: 1,\r\n          fbSpend: 15,\r\n          fbConversionRate: 0.6,\r\n          merchandiseSpend: 30,\r\n          merchandiseConversionRate: 0.2,\r\n          digitalPrice: 10,\r\n          digitalConversionRate: 0.1\r\n        },\r\n        costMetrics: {\r\n          marketing: {\r\n            type: 'weekly',\r\n            weeklyBudget: 1000\r\n          },\r\n          additionalStaffingPerEvent: 5,\r\n          staffingCostPerPerson: 200,\r\n          eventCosts: [\r\n            { id: crypto.randomUUID(), name: \"Venue Rental\", amount: 500 }\r\n          ],\r\n          setupCosts: [\r\n            { id: crypto.randomUUID(), name: \"Initial Setup\", amount: 1000, amortize: true }\r\n          ],\r\n          staffRoles: [\r\n            { id: crypto.randomUUID(), role: \"Event Staff\", count: 5, costPerPerson: 200, notes: \"\", isFullTime: false }\r\n          ],\r\n          staffingAllocationMode: 'simple',\r\n          weeklyStaffCost: 1000,\r\n          fbCogPercentage: 30,\r\n          merchandiseCogPerUnit: 15\r\n        },\r\n        customerMetrics: {\r\n          visitDuration: 120,\r\n          satisfactionScore: 8.5,\r\n          nps: 45,\r\n          returnIntent: 0.7,\r\n          communityEngagement: 0.4\r\n        },\r\n        weeklyProjections: weeklyProjections,\r\n        actualMetrics: [],\r\n        actuals: [],\r\n        risks: [],\r\n        seasonalAnalysis: [...DEFAULT_SEASONAL_ANALYSIS],\r\n        scenarios: []\r\n      };\r\n\r\n      console.log(\"Creating product:\", product);\r\n      addProduct(product);\r\n      setShowNewProduct(false);\r\n      setNewProduct((prev: any) => ({\r\n        ...prev,\r\n        name: '',\r\n        type: 'Food & Beverage Products',\r\n        description: '',\r\n        logo: null,\r\n        forecastType: 'weekly',\r\n        forecastPeriod: 12,\r\n        eventsPerWeek: 1\r\n      }));\r\n      \r\n      // Slight delay before navigation to ensure state has updated\r\n      setTimeout(() => {\r\n        navigate(`/product/${productId}`);\r\n      }, 100);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error creating product:\", error);\r\n      alert(\"There was an error creating the product. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Add this handler for navigation from RecentlyViewed\r\n  const handleNavigateToProduct = (productId: string) => {\r\n    navigate(`/product/${productId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <Breadcrumbs\r\n        items={[\r\n          { label: 'Home' }\r\n        ]}\r\n        onNavigate={navigate}\r\n      />\r\n      \r\n      <h1 className=\"text-2xl font-bold mb-6\">Fortress Financial Model</h1>\r\n      \r\n      <div className=\"flex justify-between items-center mb-8\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <BarChart2 className=\"h-8 w-8 text-blue-600\" />\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-gray-900\">Fortress Financial Model</h1>\r\n            <p className=\"text-gray-600 text-sm\">\r\n              Create and manage financial models for your products and events\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <UserProfile />\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n        <div className=\"md:col-span-2\">\r\n          <Card className=\"shadow-md border-0\">\r\n            <CardHeader>\r\n              <CardTitle>Your Products</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {showNewProduct && (\r\n                <div className=\"mb-6 p-6 border rounded-lg bg-gray-50\">\r\n                  <h3 className=\"text-lg font-semibold mb-4\">Create New Product</h3>\r\n                  <div className=\"grid gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"productName\">Product Name</Label>\r\n                      <Input\r\n                        id=\"productName\"\r\n                        value={newProduct.name}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewProduct({ ...newProduct, name: e.target.value })}\r\n                        placeholder=\"Enter product name\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"productType\">Product Type</Label>\r\n                      <Select\r\n                        value={newProduct.type}\r\n                        onValueChange={(value) => setNewProduct({ ...newProduct, type: value as ProductInfo['type'] })}\r\n                      >\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Select product type\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"Experiential Events\">Experiential Events</SelectItem>\r\n                          <SelectItem value=\"Venue-Based Activations\">Venue-Based Activations</SelectItem>\r\n                          <SelectItem value=\"Food & Beverage Products\">Food & Beverage Products</SelectItem>\r\n                          <SelectItem value=\"Merchandise Drops\">Merchandise Drops</SelectItem>\r\n                          <SelectItem value=\"Digital Products\">Digital Products</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"description\">Description</Label>\r\n                      <Textarea\r\n                        id=\"description\"\r\n                        value={newProduct.description}\r\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setNewProduct({ ...newProduct, description: e.target.value })}\r\n                        placeholder=\"Enter a brief description of your product\"\r\n                        className=\"h-24\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"logo\">Logo</Label>\r\n                      <div className=\"mt-1 flex items-center gap-4\">\r\n                        <input\r\n                          id=\"logo\"\r\n                          type=\"file\"\r\n                          accept=\"image/*\"\r\n                          onChange={handleLogoUpload}\r\n                          className=\"block w-full text-sm text-gray-500\r\n                            file:mr-4 file:py-2 file:px-4\r\n                            file:rounded-md file:border-0\r\n                            file:text-sm file:font-semibold\r\n                            file:bg-blue-50 file:text-blue-700\r\n                            hover:file:bg-blue-100\"\r\n                          style={{\r\n                            pointerEvents: 'auto',\r\n                            position: 'relative',\r\n                            zIndex: 9999\r\n                          }}\r\n                        />\r\n                        {newProduct.logo && (\r\n                          <div className=\"h-12 w-12 overflow-hidden rounded-md border\">\r\n                            <img \r\n                              src={newProduct.logo} \r\n                              alt=\"Product logo preview\" \r\n                              className=\"h-full w-full object-cover\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex justify-end space-x-2\">\r\n                      <Button variant=\"outline\" onClick={() => setShowNewProduct(false)}>\r\n                        Cancel\r\n                      </Button>\r\n                      <Button \r\n                        onClick={() => handleCreateProduct()} \r\n                        disabled={!newProduct.name}\r\n                        className=\"bg-blue-600 hover:bg-blue-700 relative\"\r\n                        style={{ zIndex: 100 }}\r\n                        type=\"button\"\r\n                      >\r\n                        Create Product\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex justify-between items-center mb-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold\">\r\n                    {products.length > 0 \r\n                      ? `You have ${products.length} product${products.length !== 1 ? 's' : ''}`\r\n                      : 'No products yet'}\r\n                  </h3>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    {products.length > 0 \r\n                      ? 'Select a product to view its dashboard or create a new one'\r\n                      : 'Create your first product to get started'}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Button\r\n                    onClick={() => navigate('/portfolio')}\r\n                    variant=\"outline\"\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    <BarChart className=\"h-4 w-4\" />\r\n                    Portfolio View\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => setShowNewProduct(!showNewProduct)}\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    {showNewProduct ? (\r\n                      <>\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                        Cancel\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <PlusCircle className=\"h-4 w-4\" />\r\n                        Add Product\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {!showNewProduct && (\r\n                <div className=\"grid gap-4\">\r\n                  {products.length === 0 ? (\r\n                    <div className=\"flex flex-col items-center justify-center py-12 text-gray-500\">\r\n                      <BarChart className=\"h-12 w-12 mb-4 text-gray-300\" />\r\n                      <p className=\"text-lg mb-1\">No products yet</p>\r\n                      <p className=\"text-sm text-gray-400 mb-4\">Click \"New Product\" to get started</p>\r\n                      <Button \r\n                        onClick={() => setShowNewProduct(true)} \r\n                        className=\"bg-blue-600 hover:bg-blue-700\"\r\n                      >\r\n                        <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n                        Create Your First Product\r\n                      </Button>\r\n                    </div>\r\n                  ) : (\r\n                    products.map((product) => (\r\n                      <div\r\n                        key={product.info.id}\r\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors\"\r\n                      >\r\n                        <div className=\"flex items-center gap-4\">\r\n                          {product.info.logo ? (\r\n                            <img\r\n                              src={product.info.logo}\r\n                              alt={`${product.info.name} logo`}\r\n                              className=\"w-10 h-10 object-contain rounded\"\r\n                            />\r\n                          ) : (\r\n                            <div className=\"w-10 h-10 bg-gray-100 rounded flex items-center justify-center\">\r\n                              <BarChart className=\"h-5 w-5 text-gray-400\" />\r\n                            </div>\r\n                          )}\r\n                          <div>\r\n                            <h3 className=\"font-semibold\">{product.info.name}</h3>\r\n                            <p className=\"text-sm text-gray-500\">{product.info.type}</p>\r\n                            {product.info.description && (\r\n                              <p className=\"text-sm text-gray-600 mt-1\">{product.info.description}</p>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex space-x-2\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            onClick={() => navigate(`/product/${product.info.id}`)}\r\n                          >\r\n                            View Details\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            onClick={() => deleteProduct(product.info.id)}\r\n                            className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Recently Viewed</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <RecentlyViewed \r\n                className=\"mb-6\" \r\n                onNavigate={handleNavigateToProduct} \r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n        \r\n        <div>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Sidebar Content</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {/* ... existing code for the sidebar ... */}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\IsolatedInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":5},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'containerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'containerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":232,"column":22,"nodeType":"Identifier","endLine":232,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useLayoutEffect, useEffect } from 'react';\r\nimport { cn } from '../lib/utils';\r\n\r\ninterface IsolatedInputProps {\r\n  value?: string | number;\r\n  onChange?: (e: unknown) => void;\r\n  onValueChange?: (value: string) => void;\r\n  type?: string;\r\n  className?: string;\r\n  placeholder?: string;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  id?: string;\r\n  name?: string;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  readOnly?: boolean;\r\n  isTextarea?: boolean;\r\n  rows?: number;\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * IsolatedInput - Creates an input completely outside of React's control\r\n */\r\nconst IsolatedInput: React.FC<IsolatedInputProps> = ({ \r\n  value, \r\n  onChange, \r\n  onValueChange,\r\n  type = 'text', \r\n  className = '', \r\n  placeholder = '',\r\n  min,\r\n  max,\r\n  step,\r\n  id,\r\n  name,\r\n  required = false,\r\n  disabled = false,\r\n  readOnly = false,\r\n  isTextarea = false,\r\n  rows = 3,\r\n  label,\r\n  ...props \r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const elementIdRef = useRef<string>(`isolated-input-${Math.random().toString(36).substring(2, 9)}`);\r\n  \r\n  // Initial setup of the input\r\n  useLayoutEffect(() => {\r\n    if (!containerRef.current) return;\r\n    \r\n    // Clear any existing content\r\n    containerRef.current.innerHTML = '';\r\n    \r\n    // Create wrapper div\r\n    const wrapper = document.createElement('div');\r\n    wrapper.className = 'isolated-input-wrapper';\r\n    \r\n    // Add label if provided\r\n    if (label) {\r\n      const labelEl = document.createElement('label');\r\n      labelEl.textContent = label;\r\n      labelEl.htmlFor = elementIdRef.current;\r\n      wrapper.appendChild(labelEl);\r\n    }\r\n    \r\n    // Create input element\r\n    let inputEl;\r\n    if (isTextarea) {\r\n      inputEl = document.createElement('textarea');\r\n      if (rows) {\r\n        inputEl.rows = rows;\r\n      }\r\n    } else {\r\n      inputEl = document.createElement('input');\r\n      \r\n      // Handle number inputs specially\r\n      if (type === 'number') {\r\n        // Use text input for better cursor control\r\n        inputEl.type = 'text';\r\n        inputEl.inputMode = 'numeric';\r\n        inputEl.pattern = '[0-9]*\\\\.?[0-9]*';\r\n      } else {\r\n        inputEl.type = type;\r\n      }\r\n    }\r\n    \r\n    // Set common attributes\r\n    inputEl.id = elementIdRef.current;\r\n    if (name) inputEl.name = name;\r\n    inputEl.placeholder = placeholder || '';\r\n    inputEl.disabled = disabled;\r\n    inputEl.readOnly = readOnly;\r\n    inputEl.required = required;\r\n    \r\n    // Add styling\r\n    inputEl.style.width = '100%';\r\n    inputEl.style.padding = '0.5rem';\r\n    inputEl.style.border = '1px solid #ccc';\r\n    inputEl.style.borderRadius = '0.25rem';\r\n    inputEl.style.fontSize = '1rem';\r\n    \r\n    // Set data attributes for min/max/step\r\n    if (min !== undefined) inputEl.setAttribute('data-min', String(min));\r\n    if (max !== undefined) inputEl.setAttribute('data-max', String(max));\r\n    if (step !== undefined) inputEl.setAttribute('data-step', String(step));\r\n    \r\n    // Set initial value\r\n    if (value !== undefined && value !== null) {\r\n      // For number inputs with value 0, don't display the 0\r\n      if (type === 'number' && value === 0) {\r\n        inputEl.value = '';\r\n      } else {\r\n        inputEl.value = String(value);\r\n      }\r\n    }\r\n    \r\n    // Create hidden input to sync with React\r\n    const hiddenInput = document.createElement('input');\r\n    hiddenInput.type = 'hidden';\r\n    hiddenInput.id = `${elementIdRef.current}-hidden`;\r\n    hiddenInput.value = value !== undefined && value !== null ? String(value) : '';\r\n    \r\n    // Store input values directly on change\r\n    inputEl.addEventListener('input', (e) => {\r\n      const target = e.target as HTMLInputElement | HTMLTextAreaElement;\r\n      let newValue = target.value;\r\n      \r\n      // For number inputs, clean the input\r\n      if (!isTextarea && type === 'number') {\r\n        // Allow only numbers and decimal point\r\n        newValue = newValue.replace(/[^0-9.]/g, '');\r\n        \r\n        // Ensure only one decimal point\r\n        const decimalCount = (newValue.match(/\\./g) || []).length;\r\n        if (decimalCount > 1) {\r\n          const parts = newValue.split('.');\r\n          newValue = parts[0] + '.' + parts.slice(1).join('');\r\n        }\r\n        \r\n        // Update if cleaned\r\n        if (newValue !== target.value) {\r\n          target.value = newValue;\r\n        }\r\n      }\r\n      \r\n      // Update hidden input\r\n      hiddenInput.value = newValue;\r\n      \r\n      // Notify React of change\r\n      if (onChange) {\r\n        const event = {\r\n          target: { value: newValue },\r\n          currentTarget: { value: newValue },\r\n          preventDefault: () => {},\r\n          stopPropagation: () => {}\r\n        };\r\n        onChange(event);\r\n      }\r\n      \r\n      if (onValueChange) {\r\n        onValueChange(newValue);\r\n      }\r\n    });\r\n    \r\n    // Handle blur event for number validation\r\n    if (type === 'number') {\r\n      inputEl.addEventListener('blur', (e) => {\r\n        const target = e.target as HTMLInputElement;\r\n        \r\n        // If empty, don't convert to 0\r\n        if (target.value === '') {\r\n          hiddenInput.value = '';\r\n          \r\n          if (onChange) {\r\n            const event = {\r\n              target: { value: '' },\r\n              currentTarget: { value: '' },\r\n              preventDefault: () => {},\r\n              stopPropagation: () => {}\r\n            };\r\n            onChange(event);\r\n          }\r\n          \r\n          if (onValueChange) {\r\n            onValueChange('');\r\n          }\r\n          return;\r\n        }\r\n        \r\n        let numValue = parseFloat(target.value);\r\n        \r\n        if (!isNaN(numValue)) {\r\n          // Apply min/max constraints\r\n          const minVal = target.getAttribute('data-min') ? parseFloat(target.getAttribute('data-min') || '') : undefined;\r\n          const maxVal = target.getAttribute('data-max') ? parseFloat(target.getAttribute('data-max') || '') : undefined;\r\n          \r\n          if (minVal !== undefined && numValue < minVal) numValue = minVal;\r\n          if (maxVal !== undefined && numValue > maxVal) numValue = maxVal;\r\n          \r\n          // Update with validated value\r\n          const validatedValue = String(numValue);\r\n          target.value = validatedValue;\r\n          hiddenInput.value = validatedValue;\r\n          \r\n          if (onChange) {\r\n            const event = {\r\n              target: { value: validatedValue },\r\n              currentTarget: { value: validatedValue },\r\n              preventDefault: () => {},\r\n              stopPropagation: () => {}\r\n            };\r\n            onChange(event);\r\n          }\r\n          \r\n          if (onValueChange) {\r\n            onValueChange(validatedValue);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Add to DOM\r\n    wrapper.appendChild(inputEl);\r\n    wrapper.appendChild(hiddenInput);\r\n    containerRef.current.appendChild(wrapper);\r\n    \r\n    return () => {\r\n      if (containerRef.current) {\r\n        containerRef.current.innerHTML = '';\r\n      }\r\n    };\r\n  }, [\r\n    disabled,\r\n    isTextarea,\r\n    label,\r\n    max,\r\n    min,\r\n    name,\r\n    onChange,\r\n    onValueChange,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    rows,\r\n    step,\r\n    type,\r\n    value\r\n  ]);\r\n  \r\n  // Update the input value when the React prop changes\r\n  useEffect(() => {\r\n    if (containerRef.current) {\r\n      const input = document.getElementById(elementIdRef.current) as HTMLInputElement | HTMLTextAreaElement;\r\n      const hiddenInput = document.getElementById(`${elementIdRef.current}-hidden`) as HTMLInputElement;\r\n      \r\n      if (input && hiddenInput) {\r\n        // Skip update if the current value is already correct\r\n        // This prevents cursor jumping\r\n        if (\r\n          (value !== undefined && value !== null && hiddenInput.value !== String(value)) ||\r\n          (value === undefined || value === null) && hiddenInput.value !== ''\r\n        ) {\r\n          // For number inputs with value 0, don't display the 0\r\n          if (type === 'number' && value === 0) {\r\n            input.value = '';\r\n          } else {\r\n            input.value = value !== undefined && value !== null ? String(value) : '';\r\n          }\r\n          \r\n          hiddenInput.value = value !== undefined && value !== null ? String(value) : '';\r\n        }\r\n      }\r\n    }\r\n  }, [value, type]);\r\n  \r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      className={className}\r\n      style={{ \r\n        position: 'relative',\r\n        minHeight: isTextarea ? '100px' : '40px',\r\n        width: '100%'\r\n      }}\r\n      data-type={type}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default IsolatedInput; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\IsolatedSelect.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'containerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'containerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":295,"column":24,"nodeType":"Identifier","endLine":295,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useLayoutEffect has missing dependencies: 'onChange', 'onValueChange', and 'value'. Either include them or remove the dependency array. If 'onValueChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":299,"column":6,"nodeType":"ArrayExpression","endLine":299,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [options, placeholder, id, name, required, disabled, label, value, onValueChange, onChange]","fix":{"range":[9183,9242],"text":"[options, placeholder, id, name, required, disabled, label, value, onValueChange, onChange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useLayoutEffect, useState, useEffect } from 'react';\r\n\r\ninterface Option {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\ninterface IsolatedSelectProps {\r\n  options: Option[];\r\n  value?: string;\r\n  onChange?: (e: unknown) => void;\r\n  onValueChange?: (value: string) => void;\r\n  className?: string;\r\n  placeholder?: string;\r\n  id?: string;\r\n  name?: string;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * IsolatedSelect - Uses Shadow DOM to completely bypass React's event system\r\n * This component creates a real DOM select element inside shadow DOM, which isolates\r\n * it from all CSS and JavaScript outside its scope.\r\n */\r\nconst IsolatedSelect: React.FC<IsolatedSelectProps> = ({\r\n  options,\r\n  value,\r\n  onChange,\r\n  onValueChange,\r\n  className = '',\r\n  placeholder,\r\n  id,\r\n  name,\r\n  required = false,\r\n  disabled = false,\r\n  label,\r\n  ...props\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [localValue, setLocalValue] = useState<string>(value || '');\r\n  \r\n  // Create an isolated DOM structure on mount\r\n  useLayoutEffect(() => {\r\n    if (!containerRef.current) return;\r\n    \r\n    // Clear previous content\r\n    containerRef.current.innerHTML = '';\r\n    \r\n    try {\r\n      // Create a shadow root to isolate from external CSS\r\n      const shadow = containerRef.current.attachShadow({ mode: 'open' });\r\n      \r\n      // Add styles to the shadow DOM\r\n      const style = document.createElement('style');\r\n      style.textContent = `\r\n        :host {\r\n          display: block;\r\n          width: 100%;\r\n          position: relative;\r\n        }\r\n        .select-container {\r\n          width: 100%;\r\n          position: relative;\r\n        }\r\n        select {\r\n          width: 100%;\r\n          padding: 8px 32px 8px 12px;\r\n          border: 1px solid #d1d5db;\r\n          border-radius: 6px;\r\n          font-family: inherit;\r\n          font-size: 14px;\r\n          background-color: white;\r\n          color: black;\r\n          appearance: none;\r\n          outline: none;\r\n          transition: border-color 0.2s, box-shadow 0.2s;\r\n        }\r\n        select:focus {\r\n          border-color: #2563eb;\r\n          box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.25);\r\n        }\r\n        .chevron {\r\n          position: absolute;\r\n          right: 12px;\r\n          top: 50%;\r\n          transform: translateY(-50%);\r\n          width: 10px;\r\n          height: 10px;\r\n          pointer-events: none;\r\n        }\r\n        .chevron::before,\r\n        .chevron::after {\r\n          content: \"\";\r\n          position: absolute;\r\n          width: 8px;\r\n          height: 2px;\r\n          background-color: #6b7280;\r\n          top: 4px;\r\n        }\r\n        .chevron::before {\r\n          left: 0;\r\n          transform: rotate(45deg);\r\n        }\r\n        .chevron::after {\r\n          right: 0;\r\n          transform: rotate(-45deg);\r\n        }\r\n        label {\r\n          display: block;\r\n          margin-bottom: 4px;\r\n          font-size: 14px;\r\n          font-weight: 500;\r\n          color: #374151;\r\n        }\r\n        .required {\r\n          color: #ef4444;\r\n          margin-left: 2px;\r\n        }\r\n        select:disabled {\r\n          background-color: #f3f4f6;\r\n          cursor: not-allowed;\r\n        }\r\n      `;\r\n      shadow.appendChild(style);\r\n      \r\n      // Create a container for the select\r\n      const container = document.createElement('div');\r\n      container.className = 'select-container';\r\n      \r\n      // Add label if provided\r\n      if (label) {\r\n        const labelEl = document.createElement('label');\r\n        labelEl.textContent = label;\r\n        if (id) labelEl.htmlFor = id;\r\n        \r\n        if (required) {\r\n          const requiredMark = document.createElement('span');\r\n          requiredMark.className = 'required';\r\n          requiredMark.textContent = '*';\r\n          labelEl.appendChild(requiredMark);\r\n        }\r\n        \r\n        container.appendChild(labelEl);\r\n      }\r\n      \r\n      // Create the select element\r\n      const selectEl = document.createElement('select');\r\n      \r\n      // Set attributes\r\n      if (id) selectEl.id = id;\r\n      if (name) selectEl.name = name;\r\n      selectEl.disabled = disabled;\r\n      selectEl.required = required;\r\n      \r\n      // Add placeholder option if provided\r\n      if (placeholder) {\r\n        const placeholderOption = document.createElement('option');\r\n        placeholderOption.value = '';\r\n        placeholderOption.textContent = placeholder;\r\n        placeholderOption.disabled = required;\r\n        placeholderOption.selected = !value;\r\n        selectEl.appendChild(placeholderOption);\r\n      }\r\n      \r\n      // Add options\r\n      options.forEach(option => {\r\n        const optionEl = document.createElement('option');\r\n        optionEl.value = option.value;\r\n        optionEl.textContent = option.label;\r\n        if (option.value === value) {\r\n          optionEl.selected = true;\r\n        }\r\n        selectEl.appendChild(optionEl);\r\n      });\r\n      \r\n      // Add chevron icon (dropdown arrow)\r\n      const chevron = document.createElement('div');\r\n      chevron.className = 'chevron';\r\n      \r\n      // Add change event\r\n      selectEl.addEventListener('change', (e) => {\r\n        const newValue = (e.target as HTMLSelectElement).value;\r\n        setLocalValue(newValue);\r\n        \r\n        // Call provided callbacks\r\n        if (onValueChange) {\r\n          onValueChange(newValue);\r\n        }\r\n        \r\n        if (onChange) {\r\n          // Create a synthetic-like event object\r\n          const syntheticEvent = {\r\n            target: { value: newValue },\r\n            currentTarget: { value: newValue },\r\n            preventDefault: () => {},\r\n            stopPropagation: () => {}\r\n          };\r\n          onChange(syntheticEvent);\r\n        }\r\n        \r\n        console.log('IsolatedSelect value changed:', newValue);\r\n      });\r\n      \r\n      // Add blur event to ensure state is synchronized\r\n      selectEl.addEventListener('blur', () => {\r\n        // On blur, ensure React state is updated with the final select value\r\n        const finalValue = selectEl.value;\r\n        if (onChange && finalValue !== value) {\r\n          const syntheticEvent = {\r\n            target: { value: finalValue },\r\n            currentTarget: { value: finalValue },\r\n            preventDefault: () => {},\r\n            stopPropagation: () => {}\r\n          };\r\n          onChange(syntheticEvent);\r\n        }\r\n      });\r\n      \r\n      // Append elements to the DOM\r\n      container.appendChild(selectEl);\r\n      container.appendChild(chevron);\r\n      shadow.appendChild(container);\r\n      \r\n    } catch (err) {\r\n      console.error('Error creating shadow DOM for isolated select:', err);\r\n      \r\n      // Fallback to a regular select if shadow DOM fails\r\n      const fallbackSelect = document.createElement('select');\r\n      \r\n      if (id) fallbackSelect.id = id;\r\n      if (name) fallbackSelect.name = name;\r\n      fallbackSelect.disabled = disabled;\r\n      fallbackSelect.required = required;\r\n      fallbackSelect.style.width = '100%';\r\n      fallbackSelect.style.padding = '8px 12px';\r\n      fallbackSelect.style.border = '1px solid #d1d5db';\r\n      fallbackSelect.style.borderRadius = '6px';\r\n      fallbackSelect.style.fontSize = '14px';\r\n      \r\n      // Add placeholder\r\n      if (placeholder) {\r\n        const placeholderOption = document.createElement('option');\r\n        placeholderOption.value = '';\r\n        placeholderOption.textContent = placeholder;\r\n        placeholderOption.disabled = required;\r\n        if (!value) placeholderOption.selected = true;\r\n        fallbackSelect.appendChild(placeholderOption);\r\n      }\r\n      \r\n      // Add options\r\n      options.forEach(option => {\r\n        const optionEl = document.createElement('option');\r\n        optionEl.value = option.value;\r\n        optionEl.textContent = option.label;\r\n        if (option.value === value) optionEl.selected = true;\r\n        fallbackSelect.appendChild(optionEl);\r\n      });\r\n      \r\n      // Add change event\r\n      fallbackSelect.addEventListener('change', (e) => {\r\n        const newValue = (e.target as HTMLSelectElement).value;\r\n        setLocalValue(newValue);\r\n        \r\n        if (onValueChange) {\r\n          onValueChange(newValue);\r\n        }\r\n        \r\n        if (onChange) {\r\n          const syntheticEvent = {\r\n            target: { value: newValue },\r\n            currentTarget: { value: newValue },\r\n            preventDefault: () => {},\r\n            stopPropagation: () => {}\r\n          };\r\n          onChange(syntheticEvent);\r\n        }\r\n      });\r\n      \r\n      containerRef.current.appendChild(fallbackSelect);\r\n    }\r\n    \r\n    // Return cleanup function\r\n    return () => {\r\n      if (containerRef.current) {\r\n        if (containerRef.current.shadowRoot) {\r\n          const shadow = containerRef.current.shadowRoot;\r\n          const selectEl = shadow.querySelector('select');\r\n          if (selectEl) {\r\n            selectEl.removeEventListener('change', () => {});\r\n            selectEl.removeEventListener('blur', () => {});\r\n          }\r\n        } else {\r\n          containerRef.current.innerHTML = '';\r\n        }\r\n      }\r\n    };\r\n  }, [options, placeholder, id, name, required, disabled, label]);\r\n  \r\n  // Keep the select value in sync with the prop\r\n  useEffect(() => {\r\n    if (containerRef.current && containerRef.current.shadowRoot) {\r\n      const selectEl = containerRef.current.shadowRoot.querySelector('select');\r\n      if (selectEl && value !== undefined && value !== localValue) {\r\n        selectEl.value = value;\r\n        setLocalValue(value);\r\n      }\r\n    }\r\n  }, [value, localValue]);\r\n  \r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      className={className}\r\n      style={{ \r\n        position: 'relative',\r\n        minHeight: '40px',\r\n        width: '100%'\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default IsolatedSelect; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\LongTermProjections.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatNumber' is defined but never used.","line":19,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":53},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentProduct.marketMetrics'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [currentProduct.info.id, currentProduct.marketMetrics]","fix":{"range":[1479,1504],"text":"[currentProduct.info.id, currentProduct.marketMetrics]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend\r\n} from 'recharts';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatPercent, formatNumber } from '../lib/utils';\r\n\r\ninterface MarketMetrics {\r\n  totalAddressableMarket: number;\r\n  servicableAddressableMarket: number;\r\n  servicableObtainableMarket: number;\r\n  yearlyGrowthRate: number;\r\n  costScalingRate: number;\r\n}\r\n\r\nconst DEFAULT_MARKET_METRICS: MarketMetrics = {\r\n  totalAddressableMarket: 100000000,\r\n  servicableAddressableMarket: 50000000,\r\n  servicableObtainableMarket: 25000000,\r\n  yearlyGrowthRate: 25,\r\n  costScalingRate: 20\r\n};\r\n\r\nexport default function LongTermProjections() {\r\n  const { products, currentProductId, updateProduct } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  const [marketMetrics, setMarketMetrics] = useState<MarketMetrics>(DEFAULT_MARKET_METRICS);\r\n\r\n  // Load saved market metrics from product if they exist\r\n  useEffect(() => {\r\n    if (currentProduct?.marketMetrics) {\r\n      setMarketMetrics(currentProduct.marketMetrics);\r\n    }\r\n  }, [currentProduct?.info.id]);\r\n\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { weeklyProjections } = currentProduct;\r\n\r\n  // Calculate quarterly projections based on weekly data\r\n  const quarterlyProjections = Array.from({ length: 4 }, (_, quarterIndex) => {\r\n    const startWeek = quarterIndex * 13;\r\n    const weeksInQuarter = weeklyProjections.slice(startWeek, startWeek + 13);\r\n\r\n    const baseRevenue = weeksInQuarter.reduce((sum, week) => sum + week.totalRevenue, 0);\r\n    const baseCosts = weeksInQuarter.reduce((sum, week) => sum + week.totalCosts, 0);\r\n    \r\n    // Apply growth assumptions for future quarters\r\n    const quarterGrowthRate = 1 + (0.15 * (quarterIndex + 1)); // 15% quarter-over-quarter growth\r\n    const costScalingRate = 1 + (0.10 * (quarterIndex + 1)); // 10% cost scaling\r\n\r\n    return {\r\n      quarter: `Q${quarterIndex + 1}`,\r\n      revenue: baseRevenue * quarterGrowthRate,\r\n      costs: baseCosts * costScalingRate,\r\n      profit: (baseRevenue * quarterGrowthRate) - (baseCosts * costScalingRate)\r\n    };\r\n  });\r\n\r\n  // Calculate annual projections\r\n  const annualProjections = Array.from({ length: 3 }, (_, yearIndex) => {\r\n    const baseQuarterRevenue = quarterlyProjections[0].revenue;\r\n    const baseQuarterCosts = quarterlyProjections[0].costs;\r\n    \r\n    // Apply annual growth assumptions\r\n    const yearlyGrowthRate = 1 + (marketMetrics.yearlyGrowthRate / 100) * (yearIndex + 1);\r\n    const yearCostScaling = 1 + (marketMetrics.costScalingRate / 100) * (yearIndex + 1);\r\n\r\n    const yearlyRevenue = baseQuarterRevenue * 4 * yearlyGrowthRate;\r\n    const yearlyCosts = baseQuarterCosts * 4 * yearCostScaling;\r\n\r\n    return {\r\n      year: `Year ${yearIndex + 1}`,\r\n      revenue: yearlyRevenue,\r\n      costs: yearlyCosts,\r\n      profit: yearlyRevenue - yearlyCosts,\r\n      margin: (yearlyRevenue - yearlyCosts) / yearlyRevenue\r\n    };\r\n  });\r\n\r\n  // Calculate market penetration\r\n  const currentMarketShare = annualProjections[0].revenue / marketMetrics.servicableObtainableMarket;\r\n\r\n  // Prepare growth metrics\r\n  const growthMetrics = annualProjections.map((year, index) => ({\r\n    period: year.year,\r\n    yoyGrowth: index > 0 \r\n      ? ((year.revenue - annualProjections[index - 1].revenue) / annualProjections[index - 1].revenue) \r\n      : 0,\r\n    marketPenetration: year.revenue / marketMetrics.servicableObtainableMarket\r\n  }));\r\n\r\n  // Handle market metrics changes\r\n  const handleMarketMetricChange = (field: keyof MarketMetrics, value: number) => {\r\n    const newMetrics = { ...marketMetrics, [field]: value };\r\n    setMarketMetrics(newMetrics);\r\n    \r\n    // Save to product\r\n    if (currentProduct) {\r\n      updateProduct(currentProduct.info.id, {\r\n        ...currentProduct,\r\n        marketMetrics: newMetrics\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Market Assumptions */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Market Size Assumptions</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid gap-6 md:grid-cols-2\">\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"tam\">Total Addressable Market ($)</Label>\r\n                <Input\r\n                  id=\"tam\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  step={1000000}\r\n                  value={marketMetrics.totalAddressableMarket}\r\n                  onValueChange={(value) => handleMarketMetricChange('totalAddressableMarket', Number(value))}\r\n                />\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Total market value for your product category\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"sam\">Serviceable Addressable Market ($)</Label>\r\n                <Input\r\n                  id=\"sam\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  step={1000000}\r\n                  value={marketMetrics.servicableAddressableMarket}\r\n                  onValueChange={(value) => handleMarketMetricChange('servicableAddressableMarket', Number(value))}\r\n                />\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Market segment you can realistically target\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"som\">Serviceable Obtainable Market ($)</Label>\r\n                <Input\r\n                  id=\"som\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  step={1000000}\r\n                  value={marketMetrics.servicableObtainableMarket}\r\n                  onValueChange={(value) => handleMarketMetricChange('servicableObtainableMarket', Number(value))}\r\n                />\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Market share you can capture\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"yearlyGrowth\">Yearly Growth Rate (%)</Label>\r\n                <Input\r\n                  id=\"yearlyGrowth\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  step={1}\r\n                  value={marketMetrics.yearlyGrowthRate}\r\n                  onValueChange={(value) => handleMarketMetricChange('yearlyGrowthRate', Number(value))}\r\n                />\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Expected year-over-year revenue growth\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"costScaling\">Cost Scaling Rate (%)</Label>\r\n                <Input\r\n                  id=\"costScaling\"\r\n                  type=\"number\"\r\n                  min={0}\r\n                  step={1}\r\n                  value={marketMetrics.costScalingRate}\r\n                  onValueChange={(value) => handleMarketMetricChange('costScalingRate', Number(value))}\r\n                />\r\n                <p className=\"text-sm text-gray-500 mt-1\">\r\n                  Expected year-over-year cost increase\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Market Overview */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Market Overview</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid gap-4 md:grid-cols-4\">\r\n            <div>\r\n              <h3 className=\"text-sm font-medium text-gray-500\">Total Addressable Market</h3>\r\n              <p className=\"text-2xl font-bold\">{formatCurrency(marketMetrics.totalAddressableMarket)}</p>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-sm font-medium text-gray-500\">Serviceable Market</h3>\r\n              <p className=\"text-2xl font-bold\">{formatCurrency(marketMetrics.servicableAddressableMarket)}</p>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-sm font-medium text-gray-500\">Obtainable Market</h3>\r\n              <p className=\"text-2xl font-bold\">{formatCurrency(marketMetrics.servicableObtainableMarket)}</p>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-sm font-medium text-gray-500\">Current Market Share</h3>\r\n              <p className=\"text-2xl font-bold\">{formatPercent(currentMarketShare)}</p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Quarterly Projections */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Quarterly Projections</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"h-[300px]\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <BarChart data={quarterlyProjections}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"quarter\" />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value: number, name: string) => [formatCurrency(value), name]}\r\n                />\r\n                <Legend />\r\n                <Bar dataKey=\"revenue\" name=\"Revenue\" fill=\"#3B82F6\" />\r\n                <Bar dataKey=\"costs\" name=\"Costs\" fill=\"#EF4444\" />\r\n                <Bar dataKey=\"profit\" name=\"Profit\" fill=\"#10B981\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Quarter</TableHead>\r\n                  <TableHead className=\"text-right\">Revenue</TableHead>\r\n                  <TableHead className=\"text-right\">Costs</TableHead>\r\n                  <TableHead className=\"text-right\">Profit</TableHead>\r\n                  <TableHead className=\"text-right\">Margin</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {quarterlyProjections.map((quarter) => (\r\n                  <TableRow key={quarter.quarter}>\r\n                    <TableCell>{quarter.quarter}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatCurrency(quarter.revenue)}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatCurrency(quarter.costs)}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatCurrency(quarter.profit)}</TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      {formatPercent(quarter.profit / quarter.revenue)}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Annual Projections */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>3-Year Projections</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"h-[300px]\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={annualProjections}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"year\" />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value: number, name: string) => [formatCurrency(value), name]}\r\n                />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"revenue\" name=\"Revenue\" stroke=\"#3B82F6\" strokeWidth={2} />\r\n                <Line type=\"monotone\" dataKey=\"costs\" name=\"Costs\" stroke=\"#EF4444\" strokeWidth={2} />\r\n                <Line type=\"monotone\" dataKey=\"profit\" name=\"Profit\" stroke=\"#10B981\" strokeWidth={2} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Year</TableHead>\r\n                  <TableHead className=\"text-right\">Revenue</TableHead>\r\n                  <TableHead className=\"text-right\">Costs</TableHead>\r\n                  <TableHead className=\"text-right\">Profit</TableHead>\r\n                  <TableHead className=\"text-right\">Margin</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {annualProjections.map((year) => (\r\n                  <TableRow key={year.year}>\r\n                    <TableCell>{year.year}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatCurrency(year.revenue)}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatCurrency(year.costs)}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatCurrency(year.profit)}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatPercent(year.margin)}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Growth Metrics */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Growth & Market Penetration</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"h-[300px]\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={growthMetrics}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"period\" />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value: number, name: string) => {\r\n                    if (name === \"YoY Growth\" || name === \"Market Penetration\") {\r\n                      return [formatPercent(value), name];\r\n                    }\r\n                    return [value, name];\r\n                  }}\r\n                />\r\n                <Legend />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"yoyGrowth\" \r\n                  name=\"YoY Growth\" \r\n                  stroke=\"#8B5CF6\" \r\n                  strokeWidth={2}\r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"marketPenetration\" \r\n                  name=\"Market Penetration\" \r\n                  stroke=\"#F59E0B\" \r\n                  strokeWidth={2}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Period</TableHead>\r\n                  <TableHead className=\"text-right\">YoY Growth</TableHead>\r\n                  <TableHead className=\"text-right\">Market Penetration</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {growthMetrics.map((metric) => (\r\n                  <TableRow key={metric.period}>\r\n                    <TableCell>{metric.period}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatPercent(metric.yoyGrowth)}</TableCell>\r\n                    <TableCell className=\"text-right\">{formatPercent(metric.marketPenetration)}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\MarketingAnalytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used.","line":12,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Product' is defined but never used.","line":19,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MarketingChannelItem' is defined but never used.","line":19,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WeeklyActuals' is defined but never used.","line":19,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalImpressions' is assigned a value but never used.","line":207,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'funnelRates' is assigned a value but never used.","line":423,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":423,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport {\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell\r\n} from 'recharts';\r\nimport {\r\n  TrendingUp, Info, ExternalLink, PieChart as PieChartIcon, \r\n  ChevronDown, ChevronUp, Users, ArrowUpDown, DollarSign, BarChart as BarChartIcon\r\n} from 'lucide-react';\r\nimport { formatCurrency, formatNumber } from '../lib/utils';\r\nimport useStore from '../store/useStore';\r\n\r\n// Import our custom types\r\nimport type { Product, MarketingChannelItem, WeeklyActuals } from '../types';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\r\n\r\nexport default function MarketingAnalytics() {\r\n  const { products, currentProductId } = useStore();\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  \r\n  // Get current product\r\n  const currentProduct = products.find(p => p.info?.id === currentProductId);\r\n  \r\n  // Extract and process marketing data from the product\r\n  const marketingData = useMemo(() => {\r\n    if (!currentProduct || !currentProduct.costMetrics) return {\r\n      channels: [],\r\n      totalBudget: 0,\r\n      hasChannels: false\r\n    };\r\n    \r\n    // Get marketing channels from costMetrics\r\n    const channels = currentProduct.costMetrics.marketing?.channels || [];\r\n    \r\n    // Calculate total budget based on the allocation mode\r\n    let totalBudget = 0;\r\n    \r\n    // First try to get budget from channels if they exist\r\n    if (channels.length > 0) {\r\n      totalBudget = channels.reduce((sum, channel) => sum + (channel.budget || 0), 0);\r\n    } \r\n    // If no channels or budget is still 0, try weekly or campaign budget\r\n    else if (currentProduct.costMetrics.marketing) {\r\n      if (currentProduct.costMetrics.marketing.type === 'weekly') {\r\n        totalBudget = currentProduct.costMetrics.marketing.weeklyBudget || 0;\r\n      } else if (currentProduct.costMetrics.marketing.type === 'campaign') {\r\n        const campaignBudget = currentProduct.costMetrics.marketing.campaignBudget || 0;\r\n        const campaignDuration = currentProduct.costMetrics.marketing.campaignDurationWeeks || 1;\r\n        totalBudget = campaignBudget / campaignDuration; // Weekly equivalent\r\n      }\r\n    }\r\n    \r\n    return {\r\n      channels,\r\n      totalBudget,\r\n      hasChannels: channels.length > 0\r\n    };\r\n  }, [currentProduct]);\r\n  \r\n  // Get actuals data for attribution analysis\r\n  const actualsData = useMemo(() => {\r\n    if (!currentProduct || !currentProduct.actuals) return [];\r\n    return currentProduct.actuals;\r\n  }, [currentProduct]);\r\n  \r\n  // Blend actuals with forecast data - this is a new function to create a blended dataset\r\n  const blendedData = useMemo(() => {\r\n    const hasActuals = actualsData.length > 0;\r\n    const hasProjections = currentProduct?.weeklyProjections && currentProduct.weeklyProjections.length > 0;\r\n    \r\n    if (!hasActuals && !hasProjections) return {\r\n      totalRevenue: 0,\r\n      totalMarketingSpend: 0,\r\n      totalVisitors: 0,\r\n      totalConversions: 0,\r\n      isBlended: false,\r\n      source: 'none'\r\n    };\r\n    \r\n    // If we have actuals, use them as primary source\r\n    if (hasActuals) {\r\n      const totalRevenue = actualsData.reduce((sum, actual) => sum + (actual.revenue || 0), 0);\r\n      const totalMarketingSpend = actualsData.reduce((sum, actual) => sum + (actual.marketingCosts || 0), 0);\r\n      \r\n      // Get visitor and conversion data from actuals\r\n      const totalAttendance = actualsData.reduce((sum, actual) => {\r\n        // Try to get attendance from the attendance field, or calculate from events\r\n        const attendance = actual.averageEventAttendance || 0;\r\n        const events = actual.numberOfEvents || 0;\r\n        return sum + (attendance * events);\r\n      }, 0);\r\n      \r\n      // Calculate estimated conversions from revenue\r\n      const avgPrice = currentProduct.revenueMetrics?.ticketPrice || 100;\r\n      const estimatedConversions = totalRevenue > 0 ? Math.round(totalRevenue / avgPrice) : 0;\r\n      \r\n      // If actual data is too sparse, blend with projections\r\n      if (hasProjections && (totalRevenue === 0 || totalMarketingSpend === 0)) {\r\n        // Get projected data for the missing metrics\r\n        const projectedData = {\r\n          totalRevenue: currentProduct.weeklyProjections.reduce(\r\n            (sum, week) => sum + (week.totalRevenue || 0), 0\r\n          ),\r\n          totalMarketingSpend: currentProduct.weeklyProjections.reduce(\r\n            (sum, week) => sum + (week.marketingCosts || 0), 0\r\n          ),\r\n          // Use projected visitors if we have no actual attendance\r\n          totalVisitors: totalAttendance > 0 ? totalAttendance : \r\n            currentProduct.weeklyProjections.reduce(\r\n              (sum, week) => sum + (week.attendance || 0), 0\r\n            )\r\n        };\r\n        \r\n        // Return the blended data, using actuals where available\r\n        return {\r\n          totalRevenue: totalRevenue > 0 ? totalRevenue : projectedData.totalRevenue,\r\n          totalMarketingSpend: totalMarketingSpend > 0 ? totalMarketingSpend : projectedData.totalMarketingSpend,\r\n          totalVisitors: totalAttendance > 0 ? totalAttendance : projectedData.totalVisitors,\r\n          totalConversions: estimatedConversions,\r\n          isBlended: true,\r\n          source: 'blended'\r\n        };\r\n      }\r\n      \r\n      // Return actuals data only\r\n      return {\r\n        totalRevenue,\r\n        totalMarketingSpend,\r\n        totalVisitors: totalAttendance,\r\n        totalConversions: estimatedConversions,\r\n        isBlended: false,\r\n        source: 'actuals'\r\n      };\r\n    }\r\n    \r\n    // If we only have projections, use them\r\n    if (hasProjections) {\r\n      return {\r\n        totalRevenue: currentProduct.weeklyProjections.reduce(\r\n          (sum, week) => sum + (week.totalRevenue || 0), 0\r\n        ),\r\n        totalMarketingSpend: currentProduct.weeklyProjections.reduce(\r\n          (sum, week) => sum + (week.marketingCosts || 0), 0\r\n        ),\r\n        totalVisitors: currentProduct.weeklyProjections.reduce(\r\n          (sum, week) => sum + (week.attendance || 0), 0\r\n        ),\r\n        // Estimate conversions from revenue\r\n        totalConversions: Math.round(\r\n          currentProduct.weeklyProjections.reduce((sum, week) => sum + (week.totalRevenue || 0), 0) / \r\n          (currentProduct.revenueMetrics?.ticketPrice || 100)\r\n        ),\r\n        isBlended: false,\r\n        source: 'projections'\r\n      };\r\n    }\r\n    \r\n    // Fallback\r\n    return {\r\n      totalRevenue: 0,\r\n      totalMarketingSpend: 0,\r\n      totalVisitors: 0,\r\n      totalConversions: 0,\r\n      isBlended: false,\r\n      source: 'none'\r\n    };\r\n  }, [currentProduct, actualsData]);\r\n  \r\n  // Calculate CAC (Customer Acquisition Cost) from available data\r\n  const acquisitionMetrics = useMemo(() => {\r\n    if (!currentProduct) return {\r\n      cac: 0,\r\n      cacTargetThreshold: 50,\r\n      conversionRate: 0,\r\n      customerLifetimeValue: 0,\r\n      cacToLtv: 0,\r\n      totalConversions: 0,\r\n      marketingSpendPercentage: 0,\r\n      dataSource: 'none'\r\n    };\r\n    \r\n    // Use the blended data\r\n    const { \r\n      totalMarketingSpend, \r\n      totalConversions, \r\n      totalVisitors, \r\n      totalRevenue,\r\n      source \r\n    } = blendedData;\r\n    \r\n    // CRITICAL FIX: Calculate based on weekly budget * forecast period\r\n    const weeklyBudget = marketingData.totalBudget;\r\n    const forecastPeriod = currentProduct.info?.forecastPeriod || 12;\r\n    const totalMarketingBudget = weeklyBudget * forecastPeriod;\r\n    \r\n    // Get conversion rate from actual data if available\r\n    let conversionRate = 0;\r\n    \r\n    // Check if we have channel performance data with impressions and conversions\r\n    const channelData = actualsData.flatMap(actual => actual.channelPerformance || []);\r\n    const totalImpressions = channelData.reduce((sum, ch) => sum + (ch.impressions || 0), 0);\r\n    const totalClicks = channelData.reduce((sum, ch) => sum + (ch.clicks || 0), 0);\r\n    const totalChannelConversions = channelData.reduce((sum, ch) => sum + (ch.conversions || 0), 0);\r\n    \r\n    // If we have channel data, calculate the conversion rate\r\n    if (totalClicks > 0 && totalChannelConversions > 0) {\r\n      conversionRate = (totalChannelConversions / totalClicks) * 100;\r\n    } else if (totalVisitors > 0 && totalConversions > 0) {\r\n      // Fallback calculation based on visitors and estimated conversions\r\n      conversionRate = (totalConversions / totalVisitors) * 100;\r\n    } else {\r\n      // Use a reasonable default if we can't calculate\r\n      conversionRate = 2.5;\r\n    }\r\n    \r\n    // Calculate CAC more accurately\r\n    let cac = 0;\r\n    let totalProjectedVisitors = 0;\r\n\r\n    // Get total visitors from projections for a more accurate conversion estimate\r\n    if (currentProduct?.weeklyProjections) {\r\n      totalProjectedVisitors = currentProduct.weeklyProjections.reduce(\r\n        (sum, week) => {\r\n          // Try to use the most appropriate visitor data available\r\n          const weeklyVisitors = week.visitors || \r\n                                (week.averageEventAttendance || 0) * (week.numberOfEvents || 0) || \r\n                                0;\r\n          return sum + weeklyVisitors;\r\n        }, 0\r\n      );\r\n      \r\n      // Calculate expected conversions based on our known conversion rate\r\n      const expectedConversions = totalProjectedVisitors * (conversionRate / 100);\r\n      \r\n      // If we have valid conversion estimates, calculate CAC\r\n      if (expectedConversions > 0) {\r\n        cac = totalMarketingBudget / expectedConversions;\r\n        \r\n        console.log('IMPROVED CAC CALCULATION:');\r\n        console.log('- Total Marketing Budget:', totalMarketingBudget);\r\n        console.log('- Total Projected Visitors:', totalProjectedVisitors);\r\n        console.log('- Conversion Rate:', conversionRate.toFixed(1) + '%');\r\n        console.log('- Expected Conversions:', expectedConversions.toFixed(0));\r\n        console.log('- Calculated CAC:', formatCurrency(cac));\r\n      } else if (totalConversions > 0) {\r\n        // Fallback to original calculation\r\n        cac = totalMarketingSpend / totalConversions;\r\n      }\r\n    } else if (totalConversions > 0) {\r\n      // Fallback to original calculation if no projections\r\n      cac = totalMarketingSpend / totalConversions;\r\n    }\r\n    \r\n    // Determine target CAC threshold based on product type\r\n    let cacTargetThreshold = 50; // Default\r\n    if (currentProduct.info && currentProduct.info.type) {\r\n      switch (currentProduct.info.type) {\r\n        case 'Digital Products':\r\n          cacTargetThreshold = 30;\r\n          break;\r\n        case 'Merchandise Drops':\r\n          cacTargetThreshold = 20;\r\n          break;\r\n        case 'Venue-Based Activations':\r\n          cacTargetThreshold = 40;\r\n          break;\r\n        case 'Experiential Events':\r\n          cacTargetThreshold = 50;\r\n          break;\r\n        case 'Food & Beverage Products':\r\n          cacTargetThreshold = 15;\r\n          break;\r\n        default:\r\n          cacTargetThreshold = 50;\r\n      }\r\n    }\r\n    \r\n    // Estimate customer lifetime value (LTV)\r\n    // In reality, would be calculated from retention, repeat purchase rate, etc.\r\n    const avgPrice = currentProduct.revenueMetrics?.ticketPrice || 100;\r\n    const averageOrderValue = totalRevenue > 0 && totalConversions > 0 ? \r\n      totalRevenue / totalConversions : avgPrice;\r\n    \r\n    // For LTV, check if we have revenueMetrics with repeat purchase data\r\n    const purchaseFrequency = currentProduct.revenueMetrics?.repeatPurchaseRate || 2.5;\r\n    const customerLifespan = currentProduct.revenueMetrics?.customerLifespanYears || 1.5;\r\n    const customerLifetimeValue = averageOrderValue * purchaseFrequency * customerLifespan;\r\n    \r\n    // Calculate LTV:CAC ratio\r\n    const cacToLtv = cac > 0 ? customerLifetimeValue / cac : 0;\r\n    \r\n    // Calculate marketing spend as percentage of revenue - FIXED\r\n    let marketingSpendPercentage = 0;\r\n    \r\n    if (totalRevenue > 0) {\r\n      // Calculate as percentage of total revenue\r\n      marketingSpendPercentage = (totalMarketingBudget / totalRevenue) * 100;\r\n      \r\n      // Cap at a reasonable maximum for display purposes only\r\n      marketingSpendPercentage = Math.min(marketingSpendPercentage, 50);\r\n      \r\n      console.log('FIXED MARKETING % CALCULATION:');\r\n      console.log('- Weekly Budget:', weeklyBudget);\r\n      console.log('- Forecast Period:', forecastPeriod);\r\n      console.log('- Total Marketing Budget:', totalMarketingBudget);\r\n      console.log('- Total Revenue:', totalRevenue);\r\n      console.log('- Marketing % of Revenue (fixed):', marketingSpendPercentage);\r\n    } else {\r\n      // Default when we lack data\r\n      marketingSpendPercentage = 15;\r\n    }\r\n    \r\n    return {\r\n      cac,\r\n      cacTargetThreshold,\r\n      conversionRate,\r\n      customerLifetimeValue,\r\n      cacToLtv,\r\n      totalConversions,\r\n      marketingSpendPercentage,\r\n      dataSource: source\r\n    };\r\n  }, [currentProduct, blendedData, actualsData, marketingData.totalBudget]);\r\n  \r\n  // Calculate channel effectiveness\r\n  const channelPerformance = useMemo(() => {\r\n    if (!marketingData.channels.length) return [];\r\n    \r\n    return marketingData.channels.map((channel, index) => {\r\n      // Check if we have actual performance data for this channel\r\n      const channelActuals = actualsData\r\n        .flatMap(actual => actual.channelPerformance || [])\r\n        .filter(perf => perf.channelId === channel.id);\r\n      \r\n      // If we have actual data, use it to calculate metrics\r\n      if (channelActuals.length > 0) {\r\n        const totalSpend = channelActuals.reduce((sum, perf) => sum + (perf.spend || 0), 0);\r\n        const totalImpressions = channelActuals.reduce((sum, perf) => sum + (perf.impressions || 0), 0);\r\n        const totalClicks = channelActuals.reduce((sum, perf) => sum + (perf.clicks || 0), 0);\r\n        const totalConversions = channelActuals.reduce((sum, perf) => sum + (perf.conversions || 0), 0);\r\n        const totalRevenue = channelActuals.reduce((sum, perf) => sum + (perf.revenue || 0), 0);\r\n        \r\n        // Calculate metrics from actuals\r\n        const ctr = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;\r\n        const conversionRate = totalClicks > 0 ? (totalConversions / totalClicks) * 100 : 0;\r\n        const roi = totalSpend > 0 ? ((totalRevenue - totalSpend) / totalSpend) * 100 : 0;\r\n        \r\n        return {\r\n          id: channel.id,\r\n          name: channel.name || 'Unnamed Channel',\r\n          budget: channel.budget || 0,\r\n          allocation: channel.allocation || 0,\r\n          conversionRate,\r\n          ctr,\r\n          roi,\r\n          color: COLORS[index % COLORS.length],\r\n          effectiveness: conversionRate * (roi > 0 ? roi/100 + 1 : 0.5), // Simplified effectiveness score\r\n          hasActualData: true\r\n        };\r\n      } else {\r\n        // If no actual data, show a placeholder with clearly marked estimates\r\n        return {\r\n          id: channel.id,\r\n          name: channel.name || 'Unnamed Channel',\r\n          budget: channel.budget || 0,\r\n          allocation: channel.allocation || 0,\r\n          conversionRate: 2 + Math.random() * 3, // Mild randomization for estimates\r\n          ctr: 1 + Math.random() * 2,\r\n          roi: -10 + Math.random() * 50,\r\n          color: COLORS[index % COLORS.length],\r\n          effectiveness: 2 + Math.random() * 4,\r\n          hasActualData: false\r\n        };\r\n      }\r\n    }).sort((a, b) => b.effectiveness - a.effectiveness); // Sort by effectiveness\r\n  }, [marketingData.channels, actualsData]);\r\n  \r\n  // Create channel comparison chart data\r\n  const channelComparisonData = useMemo(() => {\r\n    return channelPerformance.map(channel => ({\r\n      name: channel.name,\r\n      'Budget Allocation': channel.allocation,\r\n      'Conversion Rate': channel.conversionRate,\r\n      'ROI': Math.max(-100, channel.roi), // Cap negative ROI at -100% for visualization\r\n      'CTR': channel.ctr\r\n    }));\r\n  }, [channelPerformance]);\r\n  \r\n  // Create budget allocation data for pie chart\r\n  const budgetAllocationData = useMemo(() => {\r\n    return channelPerformance.map(channel => ({\r\n      name: channel.name,\r\n      value: channel.budget,\r\n      color: channel.color\r\n    }));\r\n  }, [channelPerformance]);\r\n  \r\n  // Create funnel data\r\n  const funnelData = useMemo(() => {\r\n    // In a real implementation, this would come from actual analytics\r\n    const visitors = 15000;\r\n    const productViews = 6750;\r\n    const addToCart = 2300;\r\n    const checkouts = 1250;\r\n    const purchases = 850;\r\n    \r\n    return [\r\n      { name: 'Website Visitors', value: visitors },\r\n      { name: 'Product Views', value: productViews },\r\n      { name: 'Add to Cart', value: addToCart },\r\n      { name: 'Checkout Started', value: checkouts },\r\n      { name: 'Purchases', value: purchases }\r\n    ];\r\n  }, []);\r\n  \r\n  // Calculate conversion rates between funnel stages\r\n  const funnelRates = useMemo(() => {\r\n    if (funnelData.length < 2) return [];\r\n    \r\n    return funnelData.slice(1).map((stage, index) => {\r\n      const previousStage = funnelData[index];\r\n      const conversionRate = (stage.value / previousStage.value) * 100;\r\n      return {\r\n        from: previousStage.name,\r\n        to: stage.name,\r\n        rate: conversionRate,\r\n        dropoff: 100 - conversionRate\r\n      };\r\n    });\r\n  }, [funnelData]);\r\n  \r\n  // Create monthly trend data for marketing performance\r\n  const monthlyTrendData = useMemo(() => {\r\n    // In a real implementation, this would be calculated from actual monthly data\r\n    // For this example, we'll create synthesized data\r\n    return [\r\n      { name: 'Jan', spend: 2800, conversions: 135, cac: 20.7 },\r\n      { name: 'Feb', spend: 3200, conversions: 148, cac: 21.6 },\r\n      { name: 'Mar', spend: 3500, conversions: 172, cac: 20.3 },\r\n      { name: 'Apr', spend: 4100, conversions: 193, cac: 21.2 },\r\n      { name: 'May', spend: 4800, conversions: 238, cac: 20.2 },\r\n      { name: 'Jun', spend: 5200, conversions: 251, cac: 20.7 },\r\n    ];\r\n  }, []);\r\n  \r\n  // Formatter for currency in tooltips\r\n  const currencyFormatter = (value) => formatCurrency(value);\r\n  \r\n  // Custom tooltip for charts\r\n  const CustomTooltip = ({ active, payload, label }) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-white p-4 border border-gray-200 shadow-md rounded-md\">\r\n          <p className=\"font-medium\">{label}</p>\r\n          {payload.map((entry, index) => (\r\n            <p key={index} style={{ color: entry.color }}>\r\n              {entry.name}: {entry.name.includes('Rate') || entry.name === 'ROI' \r\n                ? `${entry.value.toFixed(1)}%` \r\n                : entry.name.includes('Budget') || entry.name.includes('spend')\r\n                  ? formatCurrency(entry.value)\r\n                  : formatNumber(entry.value)\r\n              }\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n  \r\n  // Add a useEffect to force calculation and logging\r\n  useEffect(() => {\r\n    if (currentProduct) {\r\n      // Calculate total revenue for debug purposes\r\n      const totalRevenue = currentProduct.weeklyProjections ? \r\n        currentProduct.weeklyProjections.reduce((sum, week) => sum + (week.totalRevenue || 0), 0) : 0;\r\n      \r\n      // Calculate the marketing spend percentage\r\n      const weeklyBudget = marketingData.totalBudget;\r\n      const forecastPeriod = currentProduct.info?.forecastPeriod || 12;\r\n      const totalMarketingBudget = weeklyBudget * forecastPeriod;\r\n      \r\n      // Calculate as percentage of total revenue\r\n      const marketingPercentage = totalRevenue > 0 ? \r\n        (totalMarketingBudget / totalRevenue) * 100 : 0;\r\n      \r\n      console.log('MARKETING % CALCULATION:');\r\n      console.log('- Weekly Budget:', weeklyBudget);\r\n      console.log('- Forecast Period:', forecastPeriod);\r\n      console.log('- Total Marketing Budget:', totalMarketingBudget);\r\n      console.log('- Total Revenue:', totalRevenue);\r\n      console.log('- Marketing % of Revenue:', marketingPercentage);\r\n    }\r\n  }, [currentProduct, marketingData.totalBudget]);\r\n  \r\n  // Custom function to calculate marketing spend percentage directly\r\n  const calculateMarketingPercentage = () => {\r\n    // Get weekly budget\r\n    const weeklyBudget = marketingData.totalBudget;\r\n    \r\n    // Get forecast period\r\n    const forecastPeriod = currentProduct?.info?.forecastPeriod || 12;\r\n    \r\n    // Get total marketing spend\r\n    const totalMarketingBudget = weeklyBudget * forecastPeriod;\r\n    \r\n    // Get total revenue from projections\r\n    let totalRevenue = 0;\r\n    let totalVisitors = 0;\r\n    if (currentProduct?.weeklyProjections) {\r\n      totalRevenue = currentProduct.weeklyProjections.reduce(\r\n        (sum, week) => sum + (week.totalRevenue || 0), 0\r\n      );\r\n      \r\n      // Also calculate total visitors/attendees for CAC validation\r\n      totalVisitors = currentProduct.weeklyProjections.reduce(\r\n        (sum, week) => {\r\n          // If we have visitors directly, use that, otherwise compute from attendance\r\n          const visitors = week.visitors || (week.averageEventAttendance || 0) * (week.numberOfEvents || 0);\r\n          return sum + visitors;\r\n        }, 0\r\n      );\r\n    }\r\n    \r\n    console.log('DIRECT CALCULATION:');\r\n    console.log('- Weekly Budget:', weeklyBudget);\r\n    console.log('- Forecast Period:', forecastPeriod);\r\n    console.log('- Total Marketing Budget:', totalMarketingBudget);\r\n    console.log('- Total Revenue:', totalRevenue);\r\n    console.log('- Total Projected Visitors:', totalVisitors);\r\n    console.log('- Conversion Rate (21.1%):', totalVisitors * 0.211);\r\n    console.log('- Expected CAC:', totalMarketingBudget / (totalVisitors * 0.211));\r\n    \r\n    // Calculate percentage\r\n    const percentage = totalRevenue > 0 ? (totalMarketingBudget / totalRevenue) * 100 : 0;\r\n    \r\n    console.log('- UNCAPPED Marketing % of Revenue:', percentage);\r\n    console.log('- FINAL Marketing % of Revenue:', percentage.toFixed(1) + '%');\r\n    \r\n    return percentage;\r\n  };\r\n  \r\n  // Improved rendering for the Marketing Budget Allocation section\r\n  const renderMarketingBudgetAllocation = () => {\r\n    if (!marketingData.hasChannels) {\r\n      return (\r\n        <div className=\"flex flex-col items-center justify-center h-[300px] text-center\">\r\n          <p className=\"text-gray-500 mb-4\">No marketing channels configured</p>\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={() => window.location.href = '/product/' + currentProductId + '/costs'}\r\n          >\r\n            Configure Marketing Channels\r\n            <ExternalLink className=\"h-4 w-4 ml-2\" />\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div className=\"h-[300px]\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <PieChart>\r\n            <Pie\r\n              data={budgetAllocationData}\r\n              dataKey=\"value\"\r\n              nameKey=\"name\"\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={100}\r\n              label={(entry) => `${entry.name}: ${((entry.value / marketingData.totalBudget) * 100).toFixed(1)}%`}\r\n            >\r\n              {budgetAllocationData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={entry.color} />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip formatter={currencyFormatter} />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Enhanced channel effectiveness table\r\n  const renderChannelEffectivenessTable = () => {\r\n    if (!marketingData.hasChannels) {\r\n      return (\r\n        <div className=\"flex flex-col items-center justify-center h-[300px] text-center\">\r\n          <p className=\"text-gray-500 mb-4\">No marketing channels configured</p>\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={() => window.location.href = '/product/' + currentProductId + '/costs'}\r\n          >\r\n            Configure Marketing Channels\r\n            <ExternalLink className=\"h-4 w-4 ml-2\" />\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead>Channel</TableHead>\r\n              <TableHead>Budget</TableHead>\r\n              <TableHead>Conv. Rate</TableHead>\r\n              <TableHead>ROI</TableHead>\r\n              <TableHead>Effectiveness</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {channelPerformance.slice(0, 4).map((channel) => (\r\n              <TableRow key={channel.id}>\r\n                <TableCell>{channel.name}</TableCell>\r\n                <TableCell>{formatCurrency(channel.budget)}</TableCell>\r\n                <TableCell>\r\n                  {channel.conversionRate.toFixed(1)}%\r\n                  {!channel.hasActualData && <span className=\"text-xs text-gray-400\">*</span>}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <span className={channel.roi >= 0 ? \"text-green-600\" : \"text-red-600\"}>\r\n                    {channel.roi.toFixed(1)}%\r\n                  </span>\r\n                  {!channel.hasActualData && <span className=\"text-xs text-gray-400\">*</span>}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                    <div\r\n                      className=\"bg-blue-600 h-2.5 rounded-full\"\r\n                      style={{ width: `${Math.min(100, channel.effectiveness * 10)}%` }}\r\n                    ></div>\r\n                  </div>\r\n                  {!channel.hasActualData && <span className=\"text-xs text-gray-400\">*</span>}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        \r\n        <div className=\"text-xs text-gray-500 italic\">\r\n          {channelPerformance.some(ch => !ch.hasActualData) && \r\n            <p>* Based on estimated performance data. Add actuals to improve accuracy.</p>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Replace the Conversion Funnel section with a configuration notice if no GA data\r\n  const renderConversionFunnel = () => {\r\n    const hasAnalyticsConfiguration = currentProduct?.analyticsConfig?.googleAnalytics?.isConnected;\r\n    \r\n    if (!hasAnalyticsConfiguration) {\r\n      return (\r\n        <Card className=\"mt-6\">\r\n          <CardHeader>\r\n            <CardTitle>Conversion Funnel Data Unavailable</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col items-center justify-center p-6 text-center\">\r\n              <p className=\"text-gray-500 mb-4\">\r\n                Connect Google Analytics to view your actual conversion funnel data.\r\n              </p>\r\n              <Button variant=\"outline\">Set Up Analytics Integration</Button>\r\n              <p className=\"mt-4 text-sm text-gray-400\">\r\n                The conversion funnel requires website analytics data to provide accurate insights.\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    }\r\n    \r\n    // Regular conversion funnel rendering code goes here\r\n    // We'll keep the existing code for now\r\n    return (\r\n      <>\r\n        {/* Existing conversion funnel code */}\r\n      </>\r\n    );\r\n  };\r\n  \r\n  // If no product is loaded yet\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-[400px]\">\r\n        <p className=\"text-gray-500\">Select a product to view marketing analytics</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex justify-between items-center\">\r\n            <CardTitle>Marketing Analytics</CardTitle>\r\n          </div>\r\n          <CardDescription>\r\n            Analyze marketing performance, customer acquisition, and channel effectiveness\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Key Metrics Row - Adjusted for better spacing */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8\">\r\n            <Card className=\"overflow-visible shadow-sm hover:shadow-md transition-shadow\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"flex flex-col space-y-3\">\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <p className=\"text-sm font-medium text-gray-500\">Customer Acquisition Cost</p>\r\n                    <DollarSign className=\"h-6 w-6 text-blue-500 opacity-80\" />\r\n                  </div>\r\n                  <h4 className=\"text-3xl font-bold\">{formatCurrency(acquisitionMetrics.cac)}</h4>\r\n                  <div className=\"flex items-center\">\r\n                    <Badge variant={acquisitionMetrics.cac > acquisitionMetrics.cacTargetThreshold ? \"destructive\" : \"default\"} className=\"text-xs\">\r\n                      {acquisitionMetrics.cac > acquisitionMetrics.cacTargetThreshold ? (\r\n                        <>\r\n                          <ChevronUp className=\"h-3 w-3 mr-1\" />\r\n                          Above Target\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <ChevronDown className=\"h-3 w-3 mr-1\" />\r\n                          Below Target\r\n                        </>\r\n                      )}\r\n                    </Badge>\r\n                    {acquisitionMetrics.dataSource !== 'none' && (\r\n                      <Badge variant=\"outline\" className=\"ml-2 text-xs\">\r\n                        {acquisitionMetrics.dataSource === 'actuals' ? 'From Actuals' : \r\n                         acquisitionMetrics.dataSource === 'projections' ? 'From Forecast' : \r\n                         'Blended Data'}\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card className=\"overflow-visible shadow-sm hover:shadow-md transition-shadow\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"flex flex-col space-y-3\">\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <p className=\"text-sm font-medium text-gray-500\">Customer LTV</p>\r\n                    <Users className=\"h-6 w-6 text-purple-500 opacity-80\" />\r\n                  </div>\r\n                  <h4 className=\"text-3xl font-bold\">{formatCurrency(acquisitionMetrics.customerLifetimeValue)}</h4>\r\n                  <div className=\"flex items-center\">\r\n                    <Badge variant=\"default\" className=\"text-xs\">\r\n                      LTV:CAC {acquisitionMetrics.cacToLtv.toFixed(1)}x\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card className=\"overflow-visible shadow-sm hover:shadow-md transition-shadow\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"flex flex-col space-y-3\">\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <p className=\"text-sm font-medium text-gray-500\">Marketing Budget</p>\r\n                    <BarChartIcon className=\"h-6 w-6 text-orange-500 opacity-80\" />\r\n                  </div>\r\n                  <h4 className=\"text-3xl font-bold\">{formatCurrency(marketingData.totalBudget)}/week</h4>\r\n                  <div className=\"flex items-center\">\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {marketingData.channels.length} channel{marketingData.channels.length !== 1 ? 's' : ''}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card className=\"overflow-visible shadow-sm hover:shadow-md transition-shadow\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"flex flex-col space-y-3\">\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <p className=\"text-sm font-medium text-gray-500\">Conversion Rate</p>\r\n                    <ArrowUpDown className=\"h-6 w-6 text-green-500 opacity-80\" />\r\n                  </div>\r\n                  <h4 className=\"text-3xl font-bold\">{acquisitionMetrics.conversionRate.toFixed(1)}%</h4>\r\n                  <div className=\"flex items-center\">\r\n                    <Badge variant={acquisitionMetrics.conversionRate < 3 ? \"destructive\" : \"default\"} className=\"text-xs\">\r\n                      {acquisitionMetrics.conversionRate < 3 ? (\r\n                        <>\r\n                          <ChevronDown className=\"h-3 w-3 mr-1\" />\r\n                          Below Average\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <ChevronUp className=\"h-3 w-3 mr-1\" />\r\n                          Above Average\r\n                        </>\r\n                      )}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card className=\"overflow-visible shadow-sm hover:shadow-md transition-shadow\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"flex flex-col space-y-3\">\r\n                  <div className=\"flex justify-between items-start\">\r\n                    <p className=\"text-sm font-medium text-gray-500\">Marketing % of Revenue</p>\r\n                    <PieChartIcon className=\"h-6 w-6 text-indigo-500 opacity-80\" />\r\n                  </div>\r\n                  <h4 className=\"text-3xl font-bold\">{calculateMarketingPercentage().toFixed(1)}%</h4>\r\n                  <div className=\"flex items-center\">\r\n                    <Badge \r\n                      variant={\r\n                        calculateMarketingPercentage() > 25 ? \"destructive\" : \r\n                        calculateMarketingPercentage() < 5 ? \"secondary\" : \r\n                        \"default\"\r\n                      } \r\n                      className=\"text-xs\"\r\n                    >\r\n                      {calculateMarketingPercentage() > 25 ? (\r\n                        <>Higher than target</>\r\n                      ) : calculateMarketingPercentage() < 5 ? (\r\n                        <>Lower than target</>\r\n                      ) : (\r\n                        <>Within target range</>\r\n                      )}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n          \r\n          {/* Tabs for different analytics views */}\r\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n            <TabsList className=\"mb-4\">\r\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n              <TabsTrigger value=\"channels\">Channel Analysis</TabsTrigger>\r\n              <TabsTrigger value=\"funnel\">Conversion Funnel</TabsTrigger>\r\n              <TabsTrigger value=\"trends\">Performance Trends</TabsTrigger>\r\n            </TabsList>\r\n            \r\n            {/* Overview Tab */}\r\n            <TabsContent value=\"overview\">\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                <Card>\r\n                  <CardHeader className=\"pb-0\">\r\n                    <CardTitle className=\"text-lg\">Marketing Budget Allocation</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    {renderMarketingBudgetAllocation()}\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card>\r\n                  <CardHeader className=\"pb-0\">\r\n                    <CardTitle className=\"text-lg\">Channel Effectiveness</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    {renderChannelEffectivenessTable()}\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card className=\"lg:col-span-2\">\r\n                  <CardHeader className=\"pb-0\">\r\n                    <CardTitle className=\"text-lg\">Acquisition Cost Trend</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"h-[300px]\">\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <LineChart data={monthlyTrendData}>\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis dataKey=\"name\" />\r\n                          <YAxis yAxisId=\"left\" orientation=\"left\" />\r\n                          <YAxis yAxisId=\"right\" orientation=\"right\" />\r\n                          <Tooltip content={CustomTooltip} />\r\n                          <Legend />\r\n                          <Line \r\n                            yAxisId=\"left\"\r\n                            type=\"monotone\" \r\n                            dataKey=\"spend\" \r\n                            name=\"Marketing Spend\" \r\n                            stroke=\"#8884d8\" \r\n                            activeDot={{ r: 8 }} \r\n                          />\r\n                          <Line \r\n                            yAxisId=\"left\"\r\n                            type=\"monotone\" \r\n                            dataKey=\"conversions\" \r\n                            name=\"Conversions\" \r\n                            stroke=\"#82ca9d\" \r\n                          />\r\n                          <Line \r\n                            yAxisId=\"right\"\r\n                            type=\"monotone\" \r\n                            dataKey=\"cac\" \r\n                            name=\"CAC\" \r\n                            stroke=\"#ff7300\" \r\n                          />\r\n                        </LineChart>\r\n                      </ResponsiveContainer>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            </TabsContent>\r\n            \r\n            {/* Channel Analysis Tab */}\r\n            <TabsContent value=\"channels\">\r\n              {marketingData.hasChannels ? (\r\n                <div className=\"space-y-6\">\r\n                  <Card>\r\n                    <CardHeader className=\"pb-0\">\r\n                      <CardTitle className=\"text-lg\">Channel Performance Comparison</CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"h-[400px]\">\r\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                          <BarChart \r\n                            data={channelComparisonData}\r\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip content={CustomTooltip} />\r\n                            <Legend />\r\n                            <Bar dataKey=\"Budget Allocation\" fill=\"#8884d8\" name=\"Budget %\" unit=\"%\" />\r\n                            <Bar dataKey=\"Conversion Rate\" fill=\"#82ca9d\" name=\"Conv Rate\" unit=\"%\" />\r\n                            <Bar dataKey=\"ROI\" fill=\"#ffc658\" name=\"ROI\" unit=\"%\" />\r\n                            <Bar dataKey=\"CTR\" fill=\"#ff8042\" name=\"CTR\" unit=\"%\" />\r\n                          </BarChart>\r\n                        </ResponsiveContainer>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                  \r\n                  <Card>\r\n                    <CardHeader className=\"pb-0\">\r\n                      <CardTitle className=\"text-lg\">Channel ROI Analysis</CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <Table>\r\n                        <TableHeader>\r\n                          <TableRow>\r\n                            <TableHead>Channel</TableHead>\r\n                            <TableHead>Weekly Budget</TableHead>\r\n                            <TableHead>Est. Monthly Spend</TableHead>\r\n                            <TableHead>Est. Conversions</TableHead>\r\n                            <TableHead>Avg. CAC</TableHead>\r\n                            <TableHead>Est. ROI</TableHead>\r\n                            <TableHead>Recommendation</TableHead>\r\n                          </TableRow>\r\n                        </TableHeader>\r\n                        <TableBody>\r\n                          {channelPerformance.map((channel) => {\r\n                            const monthlySpend = channel.budget * 4;\r\n                            const estConversions = Math.round((channel.conversionRate / 100) * (monthlySpend / 10)); // Rough estimation\r\n                            const channelCac = estConversions > 0 ? monthlySpend / estConversions : 0;\r\n                            \r\n                            let recommendation;\r\n                            if (channel.roi > 50) recommendation = \"Increase budget\";\r\n                            else if (channel.roi < 0) recommendation = \"Decrease budget\";\r\n                            else recommendation = \"Maintain budget\";\r\n                            \r\n                            return (\r\n                              <TableRow key={channel.id}>\r\n                                <TableCell className=\"font-medium\">{channel.name}</TableCell>\r\n                                <TableCell>{formatCurrency(channel.budget)}</TableCell>\r\n                                <TableCell>{formatCurrency(monthlySpend)}</TableCell>\r\n                                <TableCell>{formatNumber(estConversions)}</TableCell>\r\n                                <TableCell>{formatCurrency(channelCac)}</TableCell>\r\n                                <TableCell className={channel.roi < 0 ? 'text-red-500' : 'text-green-500'}>\r\n                                  {channel.roi.toFixed(1)}%\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                  <Badge\r\n                                    variant={\r\n                                      recommendation === \"Increase budget\" \r\n                                        ? \"default\"\r\n                                        : recommendation === \"Decrease budget\" \r\n                                          ? \"destructive\" \r\n                                          : \"outline\"\r\n                                    }\r\n                                  >\r\n                                    {recommendation}\r\n                                  </Badge>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                      <div className=\"text-sm text-gray-500 italic text-center mt-4\">\r\n                        * Recommendations based on estimated performance data - should be validated with actual analytics\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex items-center justify-center h-[400px] text-center\">\r\n                  <div>\r\n                    <p className=\"text-gray-500 mb-4\">No marketing channels configured</p>\r\n                    <Button \r\n                      variant=\"outline\" \r\n                      onClick={() => window.location.href = '/cost-forecast'}\r\n                    >\r\n                      Configure in Cost Forecast\r\n                      <ExternalLink className=\"h-4 w-4 ml-2\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </TabsContent>\r\n            \r\n            {/* Conversion Funnel Tab */}\r\n            <TabsContent value=\"funnel\">\r\n              {renderConversionFunnel()}\r\n            </TabsContent>\r\n            \r\n            {/* Performance Trends Tab */}\r\n            <TabsContent value=\"trends\">\r\n              <Card>\r\n                <CardHeader className=\"pb-0\">\r\n                  <CardTitle className=\"text-lg\">Marketing Performance Metrics (6-Month Trend)</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"h-[400px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <LineChart data={monthlyTrendData}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip content={CustomTooltip} />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"spend\" name=\"Marketing Spend\" stroke=\"#8884d8\" />\r\n                        <Line type=\"monotone\" dataKey=\"conversions\" name=\"Conversions\" stroke=\"#82ca9d\" />\r\n                        <Line type=\"monotone\" dataKey=\"cac\" name=\"CAC\" stroke=\"#ff7300\" />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                  \r\n                  <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                    <div className=\"bg-gray-50 p-4 rounded-md\">\r\n                      <h4 className=\"font-medium text-sm text-gray-500 mb-1\">Average CAC</h4>\r\n                      <p className=\"text-xl font-bold\">\r\n                        {formatCurrency(\r\n                          monthlyTrendData.reduce((sum, month) => sum + month.cac, 0) / monthlyTrendData.length\r\n                        )}\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-500 mt-1\">Average cost to acquire one customer</p>\r\n                    </div>\r\n                    \r\n                    <div className=\"bg-gray-50 p-4 rounded-md\">\r\n                      <h4 className=\"font-medium text-sm text-gray-500 mb-1\">Monthly Spend Growth</h4>\r\n                      <p className=\"text-xl font-bold\">\r\n                        {monthlyTrendData.length > 1 \r\n                          ? `${(((monthlyTrendData[monthlyTrendData.length-1].spend / monthlyTrendData[0].spend) - 1) * 100).toFixed(1)}%` \r\n                          : '0%'\r\n                        }\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-500 mt-1\">Growth in marketing spend over period</p>\r\n                    </div>\r\n                    \r\n                    <div className=\"bg-gray-50 p-4 rounded-md\">\r\n                      <h4 className=\"font-medium text-sm text-gray-500 mb-1\">Conversion Growth</h4>\r\n                      <p className=\"text-xl font-bold\">\r\n                        {monthlyTrendData.length > 1 \r\n                          ? `${(((monthlyTrendData[monthlyTrendData.length-1].conversions / monthlyTrendData[0].conversions) - 1) * 100).toFixed(1)}%` \r\n                          : '0%'\r\n                        }\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-500 mt-1\">Growth in customer conversions over period</p>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\MarketingApiIntegration.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":6,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":6,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":6,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Check' is defined but never used.","line":11,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":11,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":11,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listConfiguredApis' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatCurrency' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatNumber' is defined but never used.","line":23,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercent' is defined but never used.","line":23,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":53},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'activeTab'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFormConfig' needs the current value of 'activeTab'.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [activeTab]","fix":{"range":[3070,3072],"text":"[activeTab]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Switch } from './ui/switch';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\r\nimport { Badge } from './ui/badge';\r\nimport { Loader2, Check, X, RefreshCw, Download, ExternalLink } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { \r\n  ApiConfig, \r\n  MarketingPlatform, \r\n  configureMarketingApi, \r\n  fetchMarketingData,\r\n  getApiConfig,\r\n  listConfiguredApis,\r\n  saveApiConfigurations,\r\n  transformApiDataToChannelPerformance\r\n} from '../lib/marketingApi';\r\nimport { formatCurrency, formatNumber, formatPercent } from '../lib/utils';\r\n\r\nexport default function MarketingApiIntegration() {\r\n  const { products, currentProductId, updateProduct } = useStore();\r\n  const [activeTab, setActiveTab] = useState<MarketingPlatform>('facebook');\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [importStatus, setImportStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');\r\n  const [statusMessage, setStatusMessage] = useState('');\r\n  const [startDate, setStartDate] = useState(\r\n    new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\r\n  );\r\n  const [endDate, setEndDate] = useState(\r\n    new Date().toISOString().split('T')[0]\r\n  );\r\n  \r\n  // API configuration state\r\n  const [apiConfigs, setApiConfigs] = useState<Record<MarketingPlatform, ApiConfig | null>>({\r\n    facebook: null,\r\n    google: null,\r\n    twitter: null,\r\n    linkedin: null,\r\n    tiktok: null,\r\n    custom: null\r\n  });\r\n  \r\n  // Form state for current platform\r\n  const [formConfig, setFormConfig] = useState<ApiConfig>({\r\n    platformName: '',\r\n    apiKey: '',\r\n    endpoint: '',\r\n    isActive: true\r\n  });\r\n  \r\n  // Load saved configurations on mount\r\n  useEffect(() => {\r\n    const platforms: MarketingPlatform[] = ['facebook', 'google', 'twitter', 'linkedin', 'tiktok', 'custom'];\r\n    const configs: Record<MarketingPlatform, ApiConfig | null> = {\r\n      facebook: null,\r\n      google: null,\r\n      twitter: null,\r\n      linkedin: null,\r\n      tiktok: null,\r\n      custom: null\r\n    };\r\n    \r\n    platforms.forEach(platform => {\r\n      const config = getApiConfig(platform);\r\n      if (config) {\r\n        configs[platform] = config;\r\n      }\r\n    });\r\n    \r\n    setApiConfigs(configs);\r\n    \r\n    // Initialize form with active tab's config\r\n    const activeConfig = getApiConfig(activeTab);\r\n    if (activeConfig) {\r\n      setFormConfig(activeConfig);\r\n    } else {\r\n      setFormConfig({\r\n        platformName: getPlatformDisplayName(activeTab),\r\n        apiKey: '',\r\n        endpoint: getDefaultEndpoint(activeTab),\r\n        isActive: true\r\n      });\r\n    }\r\n  }, []);\r\n  \r\n  // Update form when tab changes\r\n  useEffect(() => {\r\n    const config = getApiConfig(activeTab);\r\n    if (config) {\r\n      setFormConfig(config);\r\n    } else {\r\n      setFormConfig({\r\n        platformName: getPlatformDisplayName(activeTab),\r\n        apiKey: '',\r\n        endpoint: getDefaultEndpoint(activeTab),\r\n        isActive: true\r\n      });\r\n    }\r\n  }, [activeTab]);\r\n  \r\n  // Get current product\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Helper to get platform display name\r\n  function getPlatformDisplayName(platform: MarketingPlatform): string {\r\n    switch (platform) {\r\n      case 'facebook': return 'Facebook Ads';\r\n      case 'google': return 'Google Ads';\r\n      case 'twitter': return 'Twitter Ads';\r\n      case 'linkedin': return 'LinkedIn Ads';\r\n      case 'tiktok': return 'TikTok Ads';\r\n      case 'custom': return 'Custom API';\r\n      default: return platform;\r\n    }\r\n  }\r\n  \r\n  // Helper to get default endpoint\r\n  function getDefaultEndpoint(platform: MarketingPlatform): string {\r\n    switch (platform) {\r\n      case 'facebook': return 'https://graph.facebook.com/v16.0/';\r\n      case 'google': return 'https://googleads.googleapis.com/v14/';\r\n      case 'twitter': return 'https://ads-api.twitter.com/10/';\r\n      case 'linkedin': return 'https://api.linkedin.com/v2/adAnalytics';\r\n      case 'tiktok': return 'https://business-api.tiktok.com/open_api/v1.3/';\r\n      case 'custom': return 'https://api.example.com/v1/';\r\n      default: return '';\r\n    }\r\n  }\r\n  \r\n  // Handle form input changes\r\n  const handleInputChange = (field: keyof ApiConfig, value: string | boolean) => {\r\n    setFormConfig(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n  \r\n  // Save API configuration\r\n  const saveApiConfig = () => {\r\n    configureMarketingApi(activeTab, formConfig);\r\n    saveApiConfigurations();\r\n    \r\n    // Update local state\r\n    setApiConfigs(prev => ({\r\n      ...prev,\r\n      [activeTab]: formConfig\r\n    }));\r\n    \r\n    setStatusMessage(`${getPlatformDisplayName(activeTab)} configuration saved successfully.`);\r\n    setTimeout(() => setStatusMessage(''), 3000);\r\n  };\r\n  \r\n  // Import data from API\r\n  const importData = async () => {\r\n    if (!currentProduct) return;\r\n    \r\n    setIsImporting(true);\r\n    setImportStatus('loading');\r\n    setStatusMessage(`Importing data from ${getPlatformDisplayName(activeTab)}...`);\r\n    \r\n    try {\r\n      // Fetch data from API\r\n      const response = await fetchMarketingData(activeTab, startDate, endDate);\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error || 'Failed to import data');\r\n      }\r\n      \r\n      // Find matching marketing channel in the product\r\n      const marketingChannels = currentProduct.costMetrics?.marketing?.channels || [];\r\n      const matchingChannel = marketingChannels.find(\r\n        channel => channel.name.toLowerCase().includes(activeTab.toLowerCase())\r\n      );\r\n      \r\n      if (!matchingChannel) {\r\n        throw new Error(`No matching marketing channel found for ${getPlatformDisplayName(activeTab)}`);\r\n      }\r\n      \r\n      // Transform API data to our format\r\n      const channelPerformance = transformApiDataToChannelPerformance(\r\n        activeTab,\r\n        matchingChannel.id,\r\n        response.data.metrics\r\n      );\r\n      \r\n      // Find the latest week in actuals\r\n      const latestWeek = Math.max(\r\n        ...currentProduct.actualMetrics.map(metric => metric.week),\r\n        0\r\n      );\r\n      \r\n      // Update the latest week's channel performance\r\n      const updatedActualMetrics = [...currentProduct.actualMetrics];\r\n      const latestWeekIndex = updatedActualMetrics.findIndex(metric => metric.week === latestWeek);\r\n      \r\n      if (latestWeekIndex >= 0) {\r\n        // Update existing week\r\n        const existingChannelPerformance = updatedActualMetrics[latestWeekIndex].channelPerformance || [];\r\n        const existingChannelIndex = existingChannelPerformance.findIndex(\r\n          cp => cp.channelId === matchingChannel.id\r\n        );\r\n        \r\n        if (existingChannelIndex >= 0) {\r\n          // Update existing channel\r\n          existingChannelPerformance[existingChannelIndex] = channelPerformance;\r\n        } else {\r\n          // Add new channel\r\n          existingChannelPerformance.push(channelPerformance);\r\n        }\r\n        \r\n        updatedActualMetrics[latestWeekIndex] = {\r\n          ...updatedActualMetrics[latestWeekIndex],\r\n          channelPerformance: existingChannelPerformance\r\n        };\r\n      } else if (latestWeek > 0) {\r\n        // Create new week based on the previous one\r\n        updatedActualMetrics.push({\r\n          ...updatedActualMetrics[updatedActualMetrics.length - 1],\r\n          week: latestWeek + 1,\r\n          channelPerformance: [channelPerformance]\r\n        });\r\n      } else {\r\n        // Create first week\r\n        updatedActualMetrics.push({\r\n          week: 1,\r\n          revenue: channelPerformance.revenue,\r\n          marketingCost: channelPerformance.spend,\r\n          channelPerformance: [channelPerformance]\r\n        });\r\n      }\r\n      \r\n      // Update product\r\n      updateProduct(currentProduct.info.id, {\r\n        ...currentProduct,\r\n        actualMetrics: updatedActualMetrics\r\n      });\r\n      \r\n      setImportStatus('success');\r\n      setStatusMessage(`Successfully imported data from ${getPlatformDisplayName(activeTab)}`);\r\n    } catch (error) {\r\n      console.error('Import error:', error);\r\n      setImportStatus('error');\r\n      setStatusMessage(`Error importing data: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setIsImporting(false);\r\n      setTimeout(() => {\r\n        if (importStatus === 'success' || importStatus === 'error') {\r\n          setImportStatus('idle');\r\n          setStatusMessage('');\r\n        }\r\n      }, 5000);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h1 className=\"text-2xl font-bold tracking-tight\">Marketing API Integration</h1>\r\n        <p className=\"text-sm text-gray-500 mt-1\">\r\n          Connect to external marketing platforms to automatically import performance data\r\n        </p>\r\n      </div>\r\n      \r\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as MarketingPlatform)}>\r\n        <TabsList className=\"grid grid-cols-6\">\r\n          <TabsTrigger value=\"facebook\">Facebook</TabsTrigger>\r\n          <TabsTrigger value=\"google\">Google</TabsTrigger>\r\n          <TabsTrigger value=\"twitter\">Twitter</TabsTrigger>\r\n          <TabsTrigger value=\"linkedin\">LinkedIn</TabsTrigger>\r\n          <TabsTrigger value=\"tiktok\">TikTok</TabsTrigger>\r\n          <TabsTrigger value=\"custom\">Custom</TabsTrigger>\r\n        </TabsList>\r\n        \r\n        {(['facebook', 'google', 'twitter', 'linkedin', 'tiktok', 'custom'] as MarketingPlatform[]).map(platform => (\r\n          <TabsContent key={platform} value={platform}>\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{getPlatformDisplayName(platform)} Integration</CardTitle>\r\n                <CardDescription>\r\n                  Configure connection to {getPlatformDisplayName(platform)} marketing API\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor={`${platform}-api-key`}>API Key</Label>\r\n                    <Input\r\n                      id={`${platform}-api-key`}\r\n                      type=\"password\"\r\n                      value={formConfig.apiKey}\r\n                      onChange={(e) => handleInputChange('apiKey', e.target.value)}\r\n                      placeholder=\"Enter your API key\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor={`${platform}-endpoint`}>API Endpoint</Label>\r\n                    <Input\r\n                      id={`${platform}-endpoint`}\r\n                      value={formConfig.endpoint}\r\n                      onChange={(e) => handleInputChange('endpoint', e.target.value)}\r\n                      placeholder=\"API endpoint URL\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Switch\r\n                    id={`${platform}-active`}\r\n                    checked={formConfig.isActive}\r\n                    onCheckedChange={(checked) => handleInputChange('isActive', checked)}\r\n                  />\r\n                  <Label htmlFor={`${platform}-active`}>Active</Label>\r\n                </div>\r\n                \r\n                {platform === 'custom' && (\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"custom-platform-name\">Platform Name</Label>\r\n                    <Input\r\n                      id=\"custom-platform-name\"\r\n                      value={formConfig.platformName}\r\n                      onChange={(e) => handleInputChange('platformName', e.target.value)}\r\n                      placeholder=\"Custom platform name\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n              <CardFooter className=\"flex justify-between\">\r\n                <Button variant=\"outline\" onClick={saveApiConfig}>\r\n                  Save Configuration\r\n                </Button>\r\n                \r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Badge variant={apiConfigs[platform] ? \"default\" : \"outline\"}>\r\n                    {apiConfigs[platform] ? \"Configured\" : \"Not Configured\"}\r\n                  </Badge>\r\n                </div>\r\n              </CardFooter>\r\n            </Card>\r\n            \r\n            {apiConfigs[platform] && (\r\n              <Card className=\"mt-4\">\r\n                <CardHeader>\r\n                  <CardTitle>Import Data</CardTitle>\r\n                  <CardDescription>\r\n                    Import marketing performance data from {getPlatformDisplayName(platform)}\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor={`${platform}-start-date`}>Start Date</Label>\r\n                      <Input\r\n                        id={`${platform}-start-date`}\r\n                        type=\"date\"\r\n                        value={startDate}\r\n                        onChange={(e) => setStartDate(e.target.value)}\r\n                      />\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor={`${platform}-end-date`}>End Date</Label>\r\n                      <Input\r\n                        id={`${platform}-end-date`}\r\n                        type=\"date\"\r\n                        value={endDate}\r\n                        onChange={(e) => setEndDate(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n                <CardFooter>\r\n                  <Button \r\n                    onClick={importData} \r\n                    disabled={isImporting || !apiConfigs[platform]?.isActive}\r\n                  >\r\n                    {isImporting ? (\r\n                      <>\r\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                        Importing...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <RefreshCw className=\"mr-2 h-4 w-4\" />\r\n                        Import Data\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </CardFooter>\r\n              </Card>\r\n            )}\r\n          </TabsContent>\r\n        ))}\r\n      </Tabs>\r\n      \r\n      {importStatus === 'success' && (\r\n        <Alert variant=\"success\" className=\"mt-4\">\r\n          <AlertTitle>Success</AlertTitle>\r\n          <AlertDescription>{statusMessage}</AlertDescription>\r\n        </Alert>\r\n      )}\r\n      \r\n      {importStatus === 'error' && (\r\n        <Alert variant=\"destructive\" className=\"mt-4\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          <AlertDescription>{statusMessage}</AlertDescription>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div className=\"border-t pt-4\">\r\n        <h2 className=\"text-lg font-medium mb-2\">Connected Platforms</h2>\r\n        <div className=\"grid grid-cols-3 gap-4\">\r\n          {Object.entries(apiConfigs).map(([platform, config]) => {\r\n            if (!config) return null;\r\n            return (\r\n              <Card key={platform}>\r\n                <CardHeader className=\"pb-2\">\r\n                  <CardTitle className=\"text-base\">{config.platformName}</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"pb-2\">\r\n                  <p className=\"text-sm truncate\">{config.endpoint}</p>\r\n                  <Badge \r\n                    variant={config.isActive ? \"success\" : \"secondary\"}\r\n                    className=\"mt-2\"\r\n                  >\r\n                    {config.isActive ? \"Active\" : \"Inactive\"}\r\n                  </Badge>\r\n                </CardContent>\r\n                <CardFooter className=\"pt-0\">\r\n                  <Button variant=\"ghost\" size=\"sm\" asChild>\r\n                    <a href={config.endpoint} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                      <ExternalLink className=\"h-4 w-4 mr-1\" />\r\n                      Visit\r\n                    </a>\r\n                  </Button>\r\n                </CardFooter>\r\n              </Card>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\MarketingChannelActuals.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":2,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pencil' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Product' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MarketingChannelItem' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weekActuals' is assigned a value but never used.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'marketingChannels' logical expression could make the dependencies of useEffect Hook (at line 113) change on every render. To fix this, wrap the initialization of 'marketingChannels' in its own useMemo() Hook.","line":56,"column":9,"nodeType":"VariableDeclarator","endLine":56,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actualWeeks' is assigned a value but never used.","line":59,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'existingMetrics' is assigned a value but never used.","line":100,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"./ui/card\";\r\nimport { Button } from \"./ui/button\";\r\nimport { Input } from \"./ui/input\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"./ui/table\";\r\nimport {\r\n  Plus,\r\n  Trash2,\r\n  Save,\r\n  X,\r\n  Pencil,\r\n  BarChart\r\n} from 'lucide-react';\r\nimport { \r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger\r\n} from \"./ui/dialog\";\r\nimport { Label } from \"./ui/label\";\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatNumber, formatPercent } from \"../lib/utils\";\r\nimport type { \r\n  Product, \r\n  ActualMetrics, \r\n  MarketingChannelItem,\r\n  MarketingChannelPerformance\r\n} from \"../types\";\r\n\r\ninterface MarketingChannelActualsProps {\r\n  weekNumber?: number;\r\n}\r\n\r\nconst MarketingChannelActuals = ({ weekNumber }: MarketingChannelActualsProps) => {\r\n  const { products, currentProductId, updateProduct } = useStore();\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [selectedWeek, setSelectedWeek] = useState<number | undefined>(weekNumber);\r\n  const [weekActuals, setWeekActuals] = useState<ActualMetrics | null>(null);\r\n  const [channelMetrics, setChannelMetrics] = useState<Record<string, ChannelMetricInputs>>({});\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  \r\n  // Get current product\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  // Get marketing channels\r\n  const marketingChannels = currentProduct?.costMetrics?.marketing?.channels || [];\r\n  \r\n  // Get available actual weeks\r\n  const actualWeeks = (currentProduct?.actualMetrics || [])\r\n    .sort((a, b) => a.week - b.week)\r\n    .map(a => a.week);\r\n  \r\n  // Type for form inputs\r\n  interface ChannelMetricInputs {\r\n    spend: string;\r\n    impressions: string;\r\n    clicks: string;\r\n    conversions: string;\r\n    revenue: string;\r\n  }\r\n  \r\n  // Load actuals for the selected week\r\n  useEffect(() => {\r\n    if (!currentProduct || !selectedWeek) return;\r\n    \r\n    const weekData = (currentProduct.actualMetrics || []).find(\r\n      actual => actual.week === selectedWeek\r\n    );\r\n    \r\n    setWeekActuals(weekData || null);\r\n    \r\n    // Initialize channel metrics\r\n    const metrics: Record<string, ChannelMetricInputs> = {};\r\n    \r\n    // First initialize all channels with empty values\r\n    marketingChannels.forEach(channel => {\r\n      metrics[channel.id] = {\r\n        spend: '',\r\n        impressions: '',\r\n        clicks: '',\r\n        conversions: '',\r\n        revenue: ''\r\n      };\r\n    });\r\n    \r\n    // Then fill in existing data if any\r\n    if (weekData && weekData.channelPerformance) {\r\n      weekData.channelPerformance.forEach(perf => {\r\n        if (metrics[perf.channelId]) {\r\n          const existingMetrics = metrics[perf.channelId];\r\n          metrics[perf.channelId] = {\r\n            spend: perf.spend?.toString() || '',\r\n            impressions: perf.impressions?.toString() || '',\r\n            clicks: perf.clicks?.toString() || '',\r\n            conversions: perf.conversions?.toString() || '',\r\n            revenue: perf.revenue?.toString() || ''\r\n          };\r\n        }\r\n      });\r\n    }\r\n    \r\n    setChannelMetrics(metrics);\r\n  }, [currentProduct, selectedWeek, marketingChannels]);\r\n  \r\n  // Handle saving channel actuals\r\n  const handleSaveChannelData = () => {\r\n    if (!currentProduct || !selectedWeek) return;\r\n    \r\n    // Create channel performance data\r\n    const channelPerformance: MarketingChannelPerformance[] = [];\r\n    \r\n    Object.entries(channelMetrics).forEach(([channelId, metrics]) => {\r\n      // Only include channels with at least one metric\r\n      if (metrics.spend || metrics.impressions || metrics.clicks || metrics.conversions || metrics.revenue) {\r\n        channelPerformance.push({\r\n          channelId,\r\n          spend: metrics.spend ? parseFloat(metrics.spend) : undefined,\r\n          impressions: metrics.impressions ? parseInt(metrics.impressions) : undefined,\r\n          clicks: metrics.clicks ? parseInt(metrics.clicks) : undefined,\r\n          conversions: metrics.conversions ? parseInt(metrics.conversions) : undefined,\r\n          revenue: metrics.revenue ? parseFloat(metrics.revenue) : undefined\r\n        });\r\n      }\r\n    });\r\n    \r\n    // If we already have actuals for this week, update them\r\n    const updatedActualMetrics = [...(currentProduct.actualMetrics || [])];\r\n    const existingIndex = updatedActualMetrics.findIndex(a => a.week === selectedWeek);\r\n    \r\n    if (existingIndex >= 0) {\r\n      // Update existing entry\r\n      updatedActualMetrics[existingIndex] = {\r\n        ...updatedActualMetrics[existingIndex],\r\n        channelPerformance\r\n      };\r\n    } else if (channelPerformance.length > 0) {\r\n      // Create new entry if we have channel data\r\n      updatedActualMetrics.push({\r\n        id: `metrics-${Date.now()}`,\r\n        week: selectedWeek,\r\n        year: new Date().getFullYear(),\r\n        channelPerformance\r\n      });\r\n    }\r\n    \r\n    // Update the product\r\n    updateProduct({\r\n      ...currentProduct,\r\n      actualMetrics: updatedActualMetrics\r\n    });\r\n    \r\n    // Close dialog and reset\r\n    setIsDialogOpen(false);\r\n    setIsEditing(false);\r\n  };\r\n  \r\n  // Calculate derived metrics\r\n  const getChannelMetrics = (channelId: string) => {\r\n    const metrics = channelMetrics[channelId];\r\n    if (!metrics) return null;\r\n    \r\n    const spend = parseFloat(metrics.spend || '0');\r\n    const impressions = parseInt(metrics.impressions || '0');\r\n    const clicks = parseInt(metrics.clicks || '0');\r\n    const conversions = parseInt(metrics.conversions || '0');\r\n    const revenue = parseFloat(metrics.revenue || '0');\r\n    \r\n    const ctr = impressions > 0 ? (clicks / impressions) * 100 : 0;\r\n    const convRate = clicks > 0 ? (conversions / clicks) * 100 : 0;\r\n    const cpc = clicks > 0 ? spend / clicks : 0;\r\n    const cpa = conversions > 0 ? spend / conversions : 0;\r\n    const roi = spend > 0 ? ((revenue - spend) / spend) * 100 : 0;\r\n    \r\n    return { ctr, convRate, cpc, cpa, roi };\r\n  };\r\n  \r\n  // Render the dialog content\r\n  const renderDialogContent = () => (\r\n    <div className=\"space-y-6\">\r\n      {marketingChannels.length === 0 ? (\r\n        <div className=\"text-center p-4 bg-gray-50 rounded\">\r\n          <p className=\"text-gray-500\">No marketing channels defined for this product.</p>\r\n          <p className=\"text-sm text-gray-500 mt-1\">\r\n            Define channels in the Product Setup section to track channel performance.\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div>\r\n              <h4 className=\"text-lg font-medium\">Marketing Channel Actuals</h4>\r\n              <p className=\"text-sm text-gray-500\">Week {selectedWeek}</p>\r\n            </div>\r\n            \r\n            <Button \r\n              variant={isEditing ? \"default\" : \"outline\"} \r\n              size=\"sm\"\r\n              onClick={() => setIsEditing(!isEditing)}\r\n            >\r\n              {isEditing ? \"Editing...\" : \"Edit Data\"}\r\n            </Button>\r\n          </div>\r\n          \r\n          <div className=\"overflow-x-auto\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Channel</TableHead>\r\n                  <TableHead>Spend</TableHead>\r\n                  <TableHead>Impressions</TableHead>\r\n                  <TableHead>Clicks</TableHead>\r\n                  <TableHead>Conversions</TableHead>\r\n                  <TableHead>Revenue</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {marketingChannels.map(channel => {\r\n                  const metrics = channelMetrics[channel.id];\r\n                  \r\n                  return (\r\n                    <TableRow key={channel.id}>\r\n                      <TableCell className=\"font-medium\">{channel.name}</TableCell>\r\n                      \r\n                      {isEditing ? (\r\n                        <>\r\n                          <TableCell>\r\n                            <Input\r\n                              type=\"number\"\r\n                              value={metrics?.spend || ''}\r\n                              onChange={(e) => setChannelMetrics(prev => ({\r\n                                ...prev,\r\n                                [channel.id]: { ...(prev[channel.id] || {}), spend: e.target.value }\r\n                              }))}\r\n                              placeholder=\"0.00\"\r\n                              className=\"w-24\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Input\r\n                              type=\"number\"\r\n                              value={metrics?.impressions || ''}\r\n                              onChange={(e) => setChannelMetrics(prev => ({\r\n                                ...prev,\r\n                                [channel.id]: { ...(prev[channel.id] || {}), impressions: e.target.value }\r\n                              }))}\r\n                              placeholder=\"0\"\r\n                              className=\"w-24\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Input\r\n                              type=\"number\"\r\n                              value={metrics?.clicks || ''}\r\n                              onChange={(e) => setChannelMetrics(prev => ({\r\n                                ...prev,\r\n                                [channel.id]: { ...(prev[channel.id] || {}), clicks: e.target.value }\r\n                              }))}\r\n                              placeholder=\"0\"\r\n                              className=\"w-24\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Input\r\n                              type=\"number\"\r\n                              value={metrics?.conversions || ''}\r\n                              onChange={(e) => setChannelMetrics(prev => ({\r\n                                ...prev,\r\n                                [channel.id]: { ...(prev[channel.id] || {}), conversions: e.target.value }\r\n                              }))}\r\n                              placeholder=\"0\"\r\n                              className=\"w-24\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Input\r\n                              type=\"number\"\r\n                              value={metrics?.revenue || ''}\r\n                              onChange={(e) => setChannelMetrics(prev => ({\r\n                                ...prev,\r\n                                [channel.id]: { ...(prev[channel.id] || {}), revenue: e.target.value }\r\n                              }))}\r\n                              placeholder=\"0.00\"\r\n                              className=\"w-24\"\r\n                            />\r\n                          </TableCell>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <TableCell>{metrics?.spend ? formatCurrency(parseFloat(metrics.spend)) : '-'}</TableCell>\r\n                          <TableCell>{metrics?.impressions ? formatNumber(parseInt(metrics.impressions)) : '-'}</TableCell>\r\n                          <TableCell>{metrics?.clicks ? formatNumber(parseInt(metrics.clicks)) : '-'}</TableCell>\r\n                          <TableCell>{metrics?.conversions ? formatNumber(parseInt(metrics.conversions)) : '-'}</TableCell>\r\n                          <TableCell>{metrics?.revenue ? formatCurrency(parseFloat(metrics.revenue)) : '-'}</TableCell>\r\n                        </>\r\n                      )}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n          \r\n          {isEditing && (\r\n            <div className=\"flex justify-end space-x-2 mt-4\">\r\n              <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleSaveChannelData}>\r\n                Save Channel Data\r\n              </Button>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Derived Metrics Section */}\r\n          {!isEditing && (\r\n            <div className=\"mt-8\">\r\n              <h4 className=\"text-lg font-medium mb-4\">Derived Performance Metrics</h4>\r\n              \r\n              <div className=\"overflow-x-auto\">\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Channel</TableHead>\r\n                      <TableHead>CTR</TableHead>\r\n                      <TableHead>Conv. Rate</TableHead>\r\n                      <TableHead>CPC</TableHead>\r\n                      <TableHead>CPA</TableHead>\r\n                      <TableHead>ROI</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {marketingChannels.map(channel => {\r\n                      const derivedMetrics = getChannelMetrics(channel.id);\r\n                      \r\n                      if (!derivedMetrics) return null;\r\n                      \r\n                      return (\r\n                        <TableRow key={`derived-${channel.id}`}>\r\n                          <TableCell className=\"font-medium\">{channel.name}</TableCell>\r\n                          <TableCell>{formatPercent(derivedMetrics.ctr / 100)}</TableCell>\r\n                          <TableCell>{formatPercent(derivedMetrics.convRate / 100)}</TableCell>\r\n                          <TableCell>{formatCurrency(derivedMetrics.cpc)}</TableCell>\r\n                          <TableCell>{formatCurrency(derivedMetrics.cpa)}</TableCell>\r\n                          <TableCell className={derivedMetrics.roi >= 0 ? 'text-green-600' : 'text-red-600'}>\r\n                            {formatPercent(derivedMetrics.roi / 100)}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n  \r\n  return (\r\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n      <DialogTrigger asChild>\r\n        <Button variant=\"outline\" className=\"mt-4\" onClick={() => setSelectedWeek(weekNumber)}>\r\n          <BarChart className=\"h-4 w-4 mr-2\" />\r\n          Track Channel Performance\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"max-w-4xl\">\r\n        <DialogHeader>\r\n          <DialogTitle>Marketing Channel Performance</DialogTitle>\r\n          <DialogDescription>\r\n            Record and analyze performance metrics for each marketing channel\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        \r\n        {renderDialogContent()}\r\n        \r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\r\n            Close\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MarketingChannelActuals; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\MarketingChannels.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\MarketingCosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\MarketingKPITracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used.","line":9,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":10,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":10,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":10,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart2' is defined but never used.","line":10,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercent' is defined but never used.","line":12,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CategoryProgress' is defined but never used.","line":30,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChartData' is defined but never used.","line":37,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":478,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17604,17607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17604,17607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { Progress } from './ui/progress';\r\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { PlusCircle, Trash2, Save, Edit, Check, X, TrendingUp, BarChart2 } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatNumber, formatPercent } from '../lib/utils';\r\nimport * as db from '../lib/database';\r\n\r\n// KPI Types\r\ninterface KPI {\r\n  id: string;\r\n  name: string;\r\n  category: 'revenue' | 'engagement' | 'conversion' | 'cost';\r\n  target: number;\r\n  current: number;\r\n  unit: 'currency' | 'percent' | 'number';\r\n  timeframe: 'weekly' | 'monthly' | 'quarterly';\r\n  startDate: string;\r\n  endDate: string;\r\n  productId?: string;\r\n}\r\n\r\n// Category data type\r\ninterface CategoryProgress {\r\n  category: string;\r\n  progress: number;\r\n  count: number;\r\n}\r\n\r\n// Chart data type\r\ninterface ChartData {\r\n  name: string;\r\n  target: number;\r\n  current: number;\r\n  progress: number;\r\n  category: string;\r\n}\r\n\r\nexport default function MarketingKPITracker() {\r\n  const { products, currentProductId } = useStore();\r\n  const [kpis, setKpis] = useState<KPI[]>([]);\r\n  const [newKpi, setNewKpi] = useState<Partial<KPI>>({\r\n    category: 'revenue',\r\n    unit: 'currency',\r\n    timeframe: 'weekly',\r\n    target: 0,\r\n    current: 0,\r\n    startDate: new Date().toISOString().split('T')[0],\r\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\r\n  });\r\n  const [isAddingKpi, setIsAddingKpi] = useState(false);\r\n  const [editingKpiId, setEditingKpiId] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<'all' | 'revenue' | 'engagement' | 'conversion' | 'cost'>('all');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // Get current product\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  // Load KPIs from database\r\n  useEffect(() => {\r\n    const loadKpis = async () => {\r\n      if (!currentProductId) return;\r\n      \r\n      setIsLoading(true);\r\n      try {\r\n        const productKpis = await db.getMarketingKPIs(currentProductId);\r\n        setKpis(productKpis as KPI[]);\r\n      } catch (error) {\r\n        console.error('Error loading marketing KPIs:', error);\r\n        \r\n        // If there's an error, try to load from localStorage as fallback\r\n        const storedKpis = localStorage.getItem(`marketing-kpis-${currentProductId}`);\r\n        \r\n        if (storedKpis) {\r\n          setKpis(JSON.parse(storedKpis));\r\n        } else {\r\n          // Initialize with example KPIs\r\n          const exampleKpis: KPI[] = [\r\n            {\r\n              id: '1',\r\n              name: 'Weekly Revenue',\r\n              category: 'revenue',\r\n              target: 10000,\r\n              current: 7500,\r\n              unit: 'currency',\r\n              timeframe: 'weekly',\r\n              startDate: new Date().toISOString().split('T')[0],\r\n              endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n              productId: currentProductId\r\n            },\r\n            {\r\n              id: '2',\r\n              name: 'Conversion Rate',\r\n              category: 'conversion',\r\n              target: 3.5,\r\n              current: 2.8,\r\n              unit: 'percent',\r\n              timeframe: 'weekly',\r\n              startDate: new Date().toISOString().split('T')[0],\r\n              endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n              productId: currentProductId\r\n            },\r\n            {\r\n              id: '3',\r\n              name: 'Cost per Acquisition',\r\n              category: 'cost',\r\n              target: 25,\r\n              current: 32,\r\n              unit: 'currency',\r\n              timeframe: 'weekly',\r\n              startDate: new Date().toISOString().split('T')[0],\r\n              endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n              productId: currentProductId\r\n            },\r\n            {\r\n              id: '4',\r\n              name: 'Social Media Engagement',\r\n              category: 'engagement',\r\n              target: 5000,\r\n              current: 3200,\r\n              unit: 'number',\r\n              timeframe: 'weekly',\r\n              startDate: new Date().toISOString().split('T')[0],\r\n              endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n              productId: currentProductId\r\n            }\r\n          ];\r\n          \r\n          // Save example KPIs to Firestore\r\n          await Promise.all(exampleKpis.map(kpi => db.addMarketingKPI(currentProductId, kpi)));\r\n          setKpis(exampleKpis);\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadKpis();\r\n  }, [currentProductId]);\r\n  \r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Filter KPIs based on active tab\r\n  const filteredKpis = activeTab === 'all' \r\n    ? kpis \r\n    : kpis.filter(kpi => kpi.category === activeTab);\r\n  \r\n  // Format KPI value based on unit\r\n  const formatKpiValue = (value: number, unit: KPI['unit']) => {\r\n    switch (unit) {\r\n      case 'currency':\r\n        return formatCurrency(value);\r\n      case 'percent':\r\n        return `${value.toFixed(1)}%`;\r\n      case 'number':\r\n        return formatNumber(value);\r\n      default:\r\n        return value.toString();\r\n    }\r\n  };\r\n  \r\n  // Calculate progress percentage\r\n  const calculateProgress = (current: number, target: number, category: KPI['category']) => {\r\n    // For cost metrics, lower is better\r\n    if (category === 'cost') {\r\n      if (current <= target) return 100;\r\n      if (target === 0) return 0;\r\n      return Math.max(0, Math.min(100, (target / current) * 100));\r\n    }\r\n    \r\n    // For other metrics, higher is better\r\n    if (target === 0) return current > 0 ? 100 : 0;\r\n    return Math.max(0, Math.min(100, (current / target) * 100));\r\n  };\r\n  \r\n  // Get progress color\r\n  const getProgressColor = (kpi: KPI) => {\r\n    const percentage = calculateProgress(kpi.current, kpi.target, kpi.category);\r\n    if (percentage >= 100) return \"bg-green-500\";\r\n    if (percentage >= 80) return \"bg-yellow-500\";\r\n    if (percentage >= 60) return \"bg-orange-500\";\r\n    return \"bg-red-500\";\r\n  };\r\n  \r\n  // Handle input change for new KPI\r\n  const handleNewKpiChange = (field: keyof KPI, value: unknown) => {\r\n    setNewKpi(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n  \r\n  // Add new KPI\r\n  const addKpi = async () => {\r\n    if (!newKpi.name || !currentProductId) return;\r\n    \r\n    const kpi: KPI = {\r\n      id: Date.now().toString(),\r\n      name: newKpi.name || '',\r\n      category: newKpi.category || 'revenue',\r\n      target: newKpi.target || 0,\r\n      current: newKpi.current || 0,\r\n      unit: newKpi.unit || 'currency',\r\n      timeframe: newKpi.timeframe || 'weekly',\r\n      startDate: newKpi.startDate || new Date().toISOString().split('T')[0],\r\n      endDate: newKpi.endDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n      productId: currentProductId\r\n    };\r\n    \r\n    try {\r\n      // Add KPI to Firestore\r\n      const newId = await db.addMarketingKPI(currentProductId, kpi);\r\n      \r\n      // Update local state with the new KPI\r\n      const updatedKpi = { ...kpi, id: newId };\r\n      const updatedKpis = [...kpis, updatedKpi];\r\n      setKpis(updatedKpis);\r\n      \r\n      // Reset form\r\n      setNewKpi({\r\n        category: 'revenue',\r\n        unit: 'currency',\r\n        timeframe: 'weekly',\r\n        target: 0,\r\n        current: 0,\r\n        startDate: new Date().toISOString().split('T')[0],\r\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\r\n      });\r\n      setIsAddingKpi(false);\r\n    } catch (error) {\r\n      console.error('Error adding KPI:', error);\r\n    }\r\n  };\r\n  \r\n  // Update KPI\r\n  const updateKpi = async (id: string, updates: Partial<KPI>) => {\r\n    if (!currentProductId) return;\r\n    \r\n    try {\r\n      // Update KPI in Firestore\r\n      await db.updateMarketingKPI(currentProductId, id, updates);\r\n      \r\n      // Update local state\r\n      const updatedKpis = kpis.map(kpi => \r\n        kpi.id === id ? { ...kpi, ...updates } : kpi\r\n      );\r\n      \r\n      setKpis(updatedKpis);\r\n      setEditingKpiId(null);\r\n    } catch (error) {\r\n      console.error('Error updating KPI:', error);\r\n    }\r\n  };\r\n  \r\n  // Delete KPI\r\n  const deleteKpi = async (id: string) => {\r\n    if (!currentProductId) return;\r\n    \r\n    try {\r\n      // Delete KPI from Firestore\r\n      await db.deleteMarketingKPI(currentProductId, id);\r\n      \r\n      // Update local state\r\n      const updatedKpis = kpis.filter(kpi => kpi.id !== id);\r\n      setKpis(updatedKpis);\r\n    } catch (error) {\r\n      console.error('Error deleting KPI:', error);\r\n    }\r\n  };\r\n  \r\n  // Prepare chart data\r\n  const chartData = kpis.map(kpi => ({\r\n    name: kpi.name,\r\n    target: kpi.target,\r\n    current: kpi.current,\r\n    progress: calculateProgress(kpi.current, kpi.target, kpi.category),\r\n    category: kpi.category\r\n  }));\r\n  \r\n  // Group KPIs by category for summary\r\n  const kpisByCategory = kpis.reduce((acc: Record<string, KPI[]>, kpi) => {\r\n    if (!acc[kpi.category]) {\r\n      acc[kpi.category] = [];\r\n    }\r\n    acc[kpi.category].push(kpi);\r\n    return acc;\r\n  }, {} as Record<string, KPI[]>);\r\n  \r\n  // Calculate average progress by category\r\n  const categoryProgress = Object.entries(kpisByCategory).map(([category, categoryKpis]) => {\r\n    const avgProgress = categoryKpis.reduce((sum: number, kpi) => \r\n      sum + calculateProgress(kpi.current, kpi.target, kpi.category), 0\r\n    ) / categoryKpis.length;\r\n    \r\n    return {\r\n      category,\r\n      progress: avgProgress,\r\n      count: categoryKpis.length\r\n    };\r\n  });\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold tracking-tight\">Marketing KPI Tracker</h1>\r\n          <p className=\"text-sm text-gray-500 mt-1\">\r\n            Set targets and track progress for key marketing performance indicators\r\n          </p>\r\n        </div>\r\n        <Button onClick={() => setIsAddingKpi(true)} disabled={isAddingKpi || isLoading}>\r\n          <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n          Add KPI\r\n        </Button>\r\n      </div>\r\n      \r\n      {isLoading ? (\r\n        <div className=\"flex justify-center items-center py-12\">\r\n          <div className=\"flex flex-col items-center\">\r\n            <div className=\"w-10 h-10 border-2 border-t-blue-600 border-r-transparent border-b-blue-600 border-l-transparent rounded-full animate-spin mb-4\"></div>\r\n            <p className=\"text-gray-500\">Loading marketing KPIs...</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {isAddingKpi && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Add New KPI</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-name\">KPI Name</Label>\r\n                    <Input\r\n                      id=\"kpi-name\"\r\n                      value={newKpi.name || ''}\r\n                      onChange={(e) => handleNewKpiChange('name', e.target.value)}\r\n                      placeholder=\"e.g., Conversion Rate\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-category\">Category</Label>\r\n                    <select\r\n                      id=\"kpi-category\"\r\n                      className=\"w-full p-2 border rounded\"\r\n                      value={newKpi.category}\r\n                      onChange={(e) => handleNewKpiChange('category', e.target.value)}\r\n                    >\r\n                      <option value=\"revenue\">Revenue</option>\r\n                      <option value=\"engagement\">Engagement</option>\r\n                      <option value=\"conversion\">Conversion</option>\r\n                      <option value=\"cost\">Cost</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-target\">Target Value</Label>\r\n                    <Input\r\n                      id=\"kpi-target\"\r\n                      type=\"number\"\r\n                      value={newKpi.target || 0}\r\n                      onChange={(e) => handleNewKpiChange('target', Number(e.target.value))}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-current\">Current Value</Label>\r\n                    <Input\r\n                      id=\"kpi-current\"\r\n                      type=\"number\"\r\n                      value={newKpi.current || 0}\r\n                      onChange={(e) => handleNewKpiChange('current', Number(e.target.value))}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-unit\">Unit</Label>\r\n                    <select\r\n                      id=\"kpi-unit\"\r\n                      className=\"w-full p-2 border rounded\"\r\n                      value={newKpi.unit}\r\n                      onChange={(e) => handleNewKpiChange('unit', e.target.value)}\r\n                    >\r\n                      <option value=\"currency\">Currency ($)</option>\r\n                      <option value=\"percent\">Percentage (%)</option>\r\n                      <option value=\"number\">Number</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-timeframe\">Timeframe</Label>\r\n                    <select\r\n                      id=\"kpi-timeframe\"\r\n                      className=\"w-full p-2 border rounded\"\r\n                      value={newKpi.timeframe}\r\n                      onChange={(e) => handleNewKpiChange('timeframe', e.target.value)}\r\n                    >\r\n                      <option value=\"weekly\">Weekly</option>\r\n                      <option value=\"monthly\">Monthly</option>\r\n                      <option value=\"quarterly\">Quarterly</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-start-date\">Start Date</Label>\r\n                    <Input\r\n                      id=\"kpi-start-date\"\r\n                      type=\"date\"\r\n                      value={newKpi.startDate}\r\n                      onChange={(e) => handleNewKpiChange('startDate', e.target.value)}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kpi-end-date\">End Date</Label>\r\n                    <Input\r\n                      id=\"kpi-end-date\"\r\n                      type=\"date\"\r\n                      value={newKpi.endDate}\r\n                      onChange={(e) => handleNewKpiChange('endDate', e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n              <CardFooter className=\"flex justify-end space-x-2\">\r\n                <Button variant=\"outline\" onClick={() => setIsAddingKpi(false)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={addKpi}>\r\n                  <Check className=\"h-4 w-4 mr-2\" />\r\n                  Add KPI\r\n                </Button>\r\n              </CardFooter>\r\n            </Card>\r\n          )}\r\n          \r\n          {categoryProgress.length > 0 ? (\r\n            <div className=\"grid md:grid-cols-4 gap-4\">\r\n              {categoryProgress.map((category) => (\r\n                <Card key={category.category}>\r\n                  <CardHeader className=\"pb-2\">\r\n                    <CardTitle className=\"text-base capitalize\">{category.category} KPIs</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"text-2xl font-bold mb-1\">\r\n                      {category.progress.toFixed(0)}%\r\n                    </div>\r\n                    <Progress value={category.progress} className=\"h-2 mb-2\" />\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {category.count} KPI{category.count !== 1 ? 's' : ''}\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <Card>\r\n              <CardContent className=\"py-8 text-center text-gray-500\">\r\n                <p>No KPIs added yet. Click \"Add KPI\" to get started.</p>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n          \r\n          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>\r\n            <TabsList>\r\n              <TabsTrigger value=\"all\">All KPIs</TabsTrigger>\r\n              <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\r\n              <TabsTrigger value=\"engagement\">Engagement</TabsTrigger>\r\n              <TabsTrigger value=\"conversion\">Conversion</TabsTrigger>\r\n              <TabsTrigger value=\"cost\">Cost</TabsTrigger>\r\n            </TabsList>\r\n            \r\n            <TabsContent value={activeTab} className=\"mt-4\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>{activeTab === 'all' ? 'All KPIs' : `${activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} KPIs`}</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"overflow-x-auto\">\r\n                    <Table>\r\n                      <TableHeader>\r\n                        <TableRow>\r\n                          <TableHead>KPI</TableHead>\r\n                          <TableHead>Category</TableHead>\r\n                          <TableHead>Target</TableHead>\r\n                          <TableHead>Current</TableHead>\r\n                          <TableHead>Progress</TableHead>\r\n                          <TableHead>Timeframe</TableHead>\r\n                          <TableHead className=\"text-right\">Actions</TableHead>\r\n                        </TableRow>\r\n                      </TableHeader>\r\n                      <TableBody>\r\n                        {filteredKpis.map((kpi) => (\r\n                          <TableRow key={kpi.id}>\r\n                            <TableCell className=\"font-medium\">{kpi.name}</TableCell>\r\n                            <TableCell className=\"capitalize\">{kpi.category}</TableCell>\r\n                            <TableCell>{formatKpiValue(kpi.target, kpi.unit)}</TableCell>\r\n                            <TableCell>\r\n                              {editingKpiId === kpi.id ? (\r\n                                <Input\r\n                                  type=\"number\"\r\n                                  value={kpi.current}\r\n                                  onChange={(e) => updateKpi(kpi.id, { current: Number(e.target.value) })}\r\n                                  className=\"w-24\"\r\n                                />\r\n                              ) : (\r\n                                formatKpiValue(kpi.current, kpi.unit)\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <div className=\"flex items-center\">\r\n                                <Progress \r\n                                  value={calculateProgress(kpi.current, kpi.target, kpi.category)}\r\n                                  className=\"h-2 w-full\"\r\n                                  indicatorClassName={getProgressColor(kpi)}\r\n                                />\r\n                                <span className=\"ml-2 w-10 text-xs\">\r\n                                  {calculateProgress(kpi.current, kpi.target, kpi.category).toFixed(0)}%\r\n                                </span>\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell className=\"capitalize\">{kpi.timeframe}</TableCell>\r\n                            <TableCell className=\"text-right\">\r\n                              <div className=\"flex justify-end space-x-2\">\r\n                                {editingKpiId === kpi.id ? (\r\n                                  <Button \r\n                                    size=\"sm\" \r\n                                    variant=\"ghost\" \r\n                                    onClick={() => setEditingKpiId(null)}\r\n                                  >\r\n                                    <Check className=\"h-4 w-4\" />\r\n                                  </Button>\r\n                                ) : (\r\n                                  <Button \r\n                                    size=\"sm\" \r\n                                    variant=\"ghost\" \r\n                                    onClick={() => setEditingKpiId(kpi.id)}\r\n                                  >\r\n                                    <Edit className=\"h-4 w-4\" />\r\n                                  </Button>\r\n                                )}\r\n                                <Button \r\n                                  size=\"sm\" \r\n                                  variant=\"ghost\" \r\n                                  onClick={() => deleteKpi(kpi.id)}\r\n                                >\r\n                                  <Trash2 className=\"h-4 w-4\" />\r\n                                </Button>\r\n                              </div>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                        {filteredKpis.length === 0 && (\r\n                          <TableRow>\r\n                            <TableCell colSpan={7} className=\"text-center py-4 text-gray-500\">\r\n                              No KPIs found. Add some to start tracking!\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </TabsContent>\r\n          </Tabs>\r\n          \r\n          {kpis.length > 0 && (\r\n            <div className=\"grid md:grid-cols-2 gap-6\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>KPI Progress</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"h-[300px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <BarChart data={chartData}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip formatter={(value: unknown) => [`${value}%`, 'Progress']} />\r\n                        <Legend />\r\n                        <Bar dataKey=\"progress\" name=\"Progress (%)\" fill=\"#3b82f6\" />\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n              \r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Target vs Current</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"h-[300px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <BarChart data={chartData}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"target\" name=\"Target\" fill=\"#22c55e\" />\r\n                        <Bar dataKey=\"current\" name=\"Current\" fill=\"#3b82f6\" />\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\PasswordResetForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\PortfolioView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":5,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { BarChart2, PieChart, TrendingUp, DollarSign, Users, ShoppingBag } from 'lucide-react';\r\nimport { Breadcrumbs } from './ui/breadcrumb';\r\nimport useStore from '../store/useStore';\r\nimport {\r\n  ResponsiveContainer,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  PieChart as RechartsPieChart,\r\n  Pie,\r\n  Cell,\r\n  LineChart,\r\n  Line\r\n} from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\r\n\r\nexport default function PortfolioView() {\r\n  const navigate = useNavigate();\r\n  const { products } = useStore();\r\n\r\n  // Calculate aggregate metrics across all products\r\n  const aggregateMetrics = useMemo(() => {\r\n    console.log(\"Products:\", products);\r\n    \r\n    if (!products || products.length === 0) {\r\n      return {\r\n        totalRevenue: 0,\r\n        totalCosts: 0,\r\n        totalProfit: 0,\r\n        averageProfit: 0,\r\n        totalProjectedEvents: 0,\r\n        totalProjectedVisitors: 0,\r\n        productCount: 0,\r\n        mostProfitableProduct: null,\r\n        leastProfitableProduct: null,\r\n      };\r\n    }\r\n\r\n    let totalRevenue = 0;\r\n    let totalCosts = 0;\r\n    let totalProfit = 0;\r\n    let totalProjectedEvents = 0;\r\n    let totalProjectedVisitors = 0;\r\n    let highestProfit = -Infinity;\r\n    let lowestProfit = Infinity;\r\n    let mostProfitableProduct = null;\r\n    let leastProfitableProduct = null;\r\n\r\n    products.forEach(product => {\r\n      console.log(`Processing product: ${product.info.name}`);\r\n      console.log(`Weekly projections:`, product.weeklyProjections);\r\n      \r\n      // Safety check if weeklyProjections exists and has items\r\n      if (!product.weeklyProjections || product.weeklyProjections.length === 0) {\r\n        console.warn(`No weekly projections found for product: ${product.info.name}`);\r\n        return; // Skip this product\r\n      }\r\n      \r\n      // Sum up projected revenue and costs from weekly projections\r\n      const productRevenue = product.weeklyProjections.reduce(\r\n        (sum, proj) => {\r\n          // Check if totalRevenue exists and is a number\r\n          if (proj && typeof proj.totalRevenue === 'number') {\r\n            return sum + proj.totalRevenue;\r\n          }\r\n          return sum;\r\n        }, \r\n        0\r\n      );\r\n      \r\n      const productCosts = product.weeklyProjections.reduce(\r\n        (sum, proj) => {\r\n          // Check if totalCosts exists and is a number\r\n          if (proj && typeof proj.totalCosts === 'number') {\r\n            return sum + proj.totalCosts;\r\n          }\r\n          return sum;\r\n        }, \r\n        0\r\n      );\r\n      \r\n      console.log(`Product: ${product.info.name}, Revenue: ${productRevenue}, Costs: ${productCosts}`);\r\n      \r\n      const productProfit = productRevenue - productCosts;\r\n      \r\n      totalRevenue += productRevenue;\r\n      totalCosts += productCosts;\r\n      totalProfit += productProfit;\r\n      \r\n      // Count total projected events and visitors with safety checks\r\n      totalProjectedEvents += product.weeklyProjections.reduce(\r\n        (sum, proj) => {\r\n          if (proj && typeof proj.numberOfEvents === 'number') {\r\n            return sum + proj.numberOfEvents;\r\n          }\r\n          return sum;\r\n        }, \r\n        0\r\n      );\r\n      \r\n      totalProjectedVisitors += product.weeklyProjections.reduce(\r\n        (sum, proj) => {\r\n          if (proj && typeof proj.footTraffic === 'number') {\r\n            return sum + proj.footTraffic;\r\n          }\r\n          return sum;\r\n        }, \r\n        0\r\n      );\r\n      \r\n      // Find most and least profitable products\r\n      if (productProfit > highestProfit) {\r\n        highestProfit = productProfit;\r\n        mostProfitableProduct = product;\r\n      }\r\n      \r\n      if (productProfit < lowestProfit) {\r\n        lowestProfit = productProfit;\r\n        leastProfitableProduct = product;\r\n      }\r\n    });\r\n\r\n    console.log(\"Total revenue:\", totalRevenue);\r\n    console.log(\"Total costs:\", totalCosts);\r\n    console.log(\"Total profit:\", totalProfit);\r\n\r\n    return {\r\n      totalRevenue,\r\n      totalCosts,\r\n      totalProfit,\r\n      averageProfit: products.length > 0 ? totalProfit / products.length : 0,\r\n      totalProjectedEvents,\r\n      totalProjectedVisitors,\r\n      productCount: products.length,\r\n      mostProfitableProduct,\r\n      leastProfitableProduct,\r\n    };\r\n  }, [products]);\r\n\r\n  // Prepare data for revenue by product type chart\r\n  const revenueByTypeData = useMemo(() => {\r\n    const typeMap = new Map();\r\n    \r\n    products.forEach(product => {\r\n      const type = product.info.type;\r\n      \r\n      // Skip if there are no weekly projections\r\n      if (!product.weeklyProjections || product.weeklyProjections.length === 0) {\r\n        return;\r\n      }\r\n      \r\n      const revenue = product.weeklyProjections.reduce(\r\n        (sum, proj) => {\r\n          // Check if totalRevenue exists and is a number\r\n          if (proj && typeof proj.totalRevenue === 'number') {\r\n            return sum + proj.totalRevenue;\r\n          }\r\n          return sum;\r\n        }, \r\n        0\r\n      );\r\n      \r\n      if (typeMap.has(type)) {\r\n        typeMap.set(type, typeMap.get(type) + revenue);\r\n      } else {\r\n        typeMap.set(type, revenue);\r\n      }\r\n    });\r\n    \r\n    return Array.from(typeMap.entries()).map(([name, revenue]) => ({\r\n      name,\r\n      revenue\r\n    }));\r\n  }, [products]);\r\n\r\n  // Prepare data for revenue vs costs chart per product\r\n  const productComparisonData = useMemo(() => {\r\n    return products\r\n      .filter(product => product.weeklyProjections && product.weeklyProjections.length > 0)\r\n      .map(product => {\r\n        const revenue = product.weeklyProjections.reduce(\r\n          (sum, proj) => {\r\n            if (proj && typeof proj.totalRevenue === 'number') {\r\n              return sum + proj.totalRevenue;\r\n            }\r\n            return sum;\r\n          }, \r\n          0\r\n        );\r\n        \r\n        const costs = product.weeklyProjections.reduce(\r\n          (sum, proj) => {\r\n            if (proj && typeof proj.totalCosts === 'number') {\r\n              return sum + proj.totalCosts;\r\n            }\r\n            return sum;\r\n          }, \r\n          0\r\n        );\r\n        \r\n        return {\r\n          name: product.info.name,\r\n          revenue,\r\n          costs,\r\n          profit: revenue - costs\r\n        };\r\n      });\r\n  }, [products]);\r\n\r\n  // Prepare data for cumulative profit over time across all products\r\n  const cumulativeProfitData = useMemo(() => {\r\n    if (!products || products.length === 0) return [];\r\n    \r\n    // Find the max number of weeks in any product\r\n    const maxWeeks = Math.max(\r\n      ...products.map(p => p.weeklyProjections.length)\r\n    );\r\n    \r\n    // Initialize array with zeros for each week\r\n    const weeklyData = Array(maxWeeks).fill(0).map((_, i) => ({\r\n      week: i + 1,\r\n      profit: 0\r\n    }));\r\n    \r\n    // Sum up profits for each week across all products\r\n    products.forEach(product => {\r\n      product.weeklyProjections.forEach(proj => {\r\n        if (proj.week > 0 && proj.week <= maxWeeks) {\r\n          weeklyData[proj.week - 1].profit += proj.weeklyProfit;\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Calculate cumulative totals\r\n    let cumulativeTotal = 0;\r\n    return weeklyData.map(week => {\r\n      cumulativeTotal += week.profit;\r\n      return {\r\n        week: week.week,\r\n        profit: week.profit,\r\n        cumulativeProfit: cumulativeTotal\r\n      };\r\n    });\r\n  }, [products]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <Breadcrumbs\r\n        items={[\r\n          { label: 'Home', link: '/' },\r\n          { label: 'Portfolio' }\r\n        ]}\r\n        onNavigate={navigate}\r\n      />\r\n      \r\n      <div className=\"flex justify-between items-center mb-8\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <BarChart2 className=\"h-8 w-8 text-blue-600\" />\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-gray-900\">Portfolio Dashboard</h1>\r\n            <p className=\"text-gray-600 text-sm\">\r\n              Holistic view of all your products and their performance\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <Button \r\n          onClick={() => navigate('/')}\r\n          variant=\"outline\"\r\n        >\r\n          Back to Home\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Key Metrics Section */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\r\n        <Card className=\"shadow-md border-0\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500\">Total Revenue</p>\r\n                <h3 className=\"text-2xl font-bold text-gray-900\">\r\n                  ${aggregateMetrics.totalRevenue.toLocaleString()}\r\n                </h3>\r\n              </div>\r\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                <DollarSign className=\"h-6 w-6 text-blue-600\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card className=\"shadow-md border-0\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500\">Total Profit</p>\r\n                <h3 className=\"text-2xl font-bold text-gray-900\">\r\n                  ${aggregateMetrics.totalProfit.toLocaleString()}\r\n                </h3>\r\n              </div>\r\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\r\n                <TrendingUp className=\"h-6 w-6 text-green-600\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card className=\"shadow-md border-0\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500\">Total Projected Events</p>\r\n                <h3 className=\"text-2xl font-bold text-gray-900\">\r\n                  {aggregateMetrics.totalProjectedEvents.toLocaleString()}\r\n                </h3>\r\n              </div>\r\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\r\n                <ShoppingBag className=\"h-6 w-6 text-purple-600\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card className=\"shadow-md border-0\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500\">Projected Visitors</p>\r\n                <h3 className=\"text-2xl font-bold text-gray-900\">\r\n                  {aggregateMetrics.totalProjectedVisitors.toLocaleString()}\r\n                </h3>\r\n              </div>\r\n              <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center\">\r\n                <Users className=\"h-6 w-6 text-amber-600\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Product Analysis Section */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\r\n        <Card className=\"shadow-md border-0\">\r\n          <CardHeader>\r\n            <CardTitle>Product Revenue vs. Costs</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {productComparisonData.length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart\r\n                  data={productComparisonData}\r\n                  margin={{ top: 20, right: 30, left: 20, bottom: 80 }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis \r\n                    dataKey=\"name\" \r\n                    angle={-45} \r\n                    textAnchor=\"end\" \r\n                    height={80} \r\n                  />\r\n                  <YAxis />\r\n                  <Tooltip \r\n                    formatter={(value) => [`$${value.toLocaleString()}`, '']}\r\n                  />\r\n                  <Legend />\r\n                  <Bar dataKey=\"revenue\" fill=\"#0088FE\" name=\"Revenue\" />\r\n                  <Bar dataKey=\"costs\" fill=\"#FF8042\" name=\"Costs\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <div className=\"flex items-center justify-center h-48\">\r\n                <p className=\"text-gray-500\">No product data available</p>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card className=\"shadow-md border-0\">\r\n          <CardHeader>\r\n            <CardTitle>Revenue by Product Type</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {revenueByTypeData.length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <RechartsPieChart>\r\n                  <Pie\r\n                    data={revenueByTypeData}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    labelLine={false}\r\n                    outerRadius={100}\r\n                    fill=\"#8884d8\"\r\n                    dataKey=\"revenue\"\r\n                    nameKey=\"name\"\r\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                  >\r\n                    {revenueByTypeData.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip formatter={(value) => [`$${value.toLocaleString()}`, 'Revenue']} />\r\n                </RechartsPieChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <div className=\"flex items-center justify-center h-48\">\r\n                <p className=\"text-gray-500\">No product type data available</p>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Cumulative Profit Chart */}\r\n      <Card className=\"shadow-md border-0 mb-8\">\r\n        <CardHeader>\r\n          <CardTitle>Portfolio Cumulative Profit Over Time</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {cumulativeProfitData.length > 0 ? (\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <LineChart\r\n                data={cumulativeProfitData}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"week\" />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value) => [`$${value.toLocaleString()}`, '']}\r\n                />\r\n                <Legend />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"profit\" \r\n                  stroke=\"#0088FE\" \r\n                  name=\"Weekly Profit\" \r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"cumulativeProfit\" \r\n                  stroke=\"#00C49F\" \r\n                  name=\"Cumulative Profit\" \r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center h-48\">\r\n              <p className=\"text-gray-500\">No profit data available</p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Products List */}\r\n      <Card className=\"shadow-md border-0\">\r\n        <CardHeader>\r\n          <CardTitle>Your Products</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {products.length > 0 ? (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {products.map(product => (\r\n                <Card key={product.info.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => navigate(`/product/${product.info.id}`)}>\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"flex items-center gap-3 mb-3\">\r\n                      {product.info.logo ? (\r\n                        <img \r\n                          src={product.info.logo} \r\n                          alt={product.info.name} \r\n                          className=\"w-10 h-10 rounded object-cover\"\r\n                        />\r\n                      ) : (\r\n                        <div className=\"w-10 h-10 bg-gray-200 rounded flex items-center justify-center\">\r\n                          <span className=\"text-gray-500 font-bold\">\r\n                            {product.info.name.substring(0, 2).toUpperCase()}\r\n                          </span>\r\n                        </div>\r\n                      )}\r\n                      <div>\r\n                        <h3 className=\"font-semibold text-gray-900\">{product.info.name}</h3>\r\n                        <p className=\"text-xs text-gray-500\">{product.info.type}</p>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                      <div>\r\n                        <p className=\"text-gray-500\">Revenue</p>\r\n                        <p className=\"font-semibold\">${product.weeklyProjections.reduce(\r\n                          (sum, proj) => sum + proj.totalRevenue, \r\n                          0\r\n                        ).toLocaleString()}</p>\r\n                      </div>\r\n                      <div>\r\n                        <p className=\"text-gray-500\">Profit</p>\r\n                        <p className=\"font-semibold\">${(product.weeklyProjections.reduce(\r\n                          (sum, proj) => sum + proj.totalRevenue, \r\n                          0\r\n                        ) - product.weeklyProjections.reduce(\r\n                          (sum, proj) => sum + proj.totalCosts, \r\n                          0\r\n                        )).toLocaleString()}</p>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex flex-col items-center justify-center py-8\">\r\n              <p className=\"text-gray-500 mb-4\">No products available</p>\r\n              <Button onClick={() => navigate('/')}>Create Your First Product</Button>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ProductBasedScenarioModeling.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":10,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":10,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":10,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowUpDown' is defined but never used.","line":10,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RechartsChart' is defined but never used.","line":12,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pie' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cell' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercent' is defined but never used.","line":26,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'COLORS' is assigned a value but never used.","line":30,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isCreatingScenario' is assigned a value but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveScenario' is assigned a value but never used.","line":166,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Slider } from './ui/slider';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { PlusCircle, Trash2, Save, Copy, PieChart, BarChart, ArrowUpDown, Download } from 'lucide-react';\r\nimport { \r\n  PieChart as RechartsChart, \r\n  Pie, \r\n  Cell, \r\n  ResponsiveContainer, \r\n  Tooltip, \r\n  Legend, \r\n  BarChart as RechartsBarChart, \r\n  Bar, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid \r\n} from 'recharts';\r\nimport useStore from '../store/useStore';\r\nimport { ScenarioModel, Product, WeeklyProjection } from '../types';\r\nimport { formatCurrency, formatPercent } from '../lib/utils';\r\nimport { exportScenarioComparison } from '../lib/exportUtils';\r\n\r\n// Colors for charts\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\r\n\r\nexport default function ProductBasedScenarioModeling() {\r\n  const { \r\n    products, \r\n    currentProductId, \r\n    scenarios,\r\n    addScenarioModel, \r\n    updateScenarioModel, \r\n    deleteScenarioModel,\r\n    getScenariosByProduct\r\n  } = useStore();\r\n  \r\n  // Selected product state\r\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\r\n  const [baselineData, setBaselineData] = useState<WeeklyProjection[]>([]);\r\n  \r\n  // Scenario management state\r\n  const [activeScenario, setActiveScenario] = useState<ScenarioModel | null>(null);\r\n  const [isCreatingScenario, setIsCreatingScenario] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<string>('parameters');\r\n  \r\n  // Load current product when component mounts or currentProductId changes\r\n  useEffect(() => {\r\n    if (currentProductId) {\r\n      const product = products.find(p => p.info.id === currentProductId);\r\n      if (product) {\r\n        setSelectedProduct(product);\r\n        setBaselineData(product.weeklyProjections || []);\r\n        \r\n        // Load scenarios for this product\r\n        const productScenarios = getScenariosByProduct(currentProductId);\r\n        if (productScenarios.length > 0 && !activeScenario) {\r\n          setActiveScenario(productScenarios[0]);\r\n        }\r\n      }\r\n    }\r\n  }, [currentProductId, products, getScenariosByProduct, activeScenario]);\r\n  \r\n  // Create a default blank scenario for the selected product\r\n  const createDefaultScenario = () => {\r\n    if (!selectedProduct) return;\r\n    \r\n    const newScenario: ScenarioModel = {\r\n      id: crypto.randomUUID(),\r\n      name: `${selectedProduct.info.name} - New Scenario`,\r\n      productId: selectedProduct.info.id,\r\n      description: `Scenario for ${selectedProduct.info.name}`,\r\n      modifiers: {\r\n        revenue: {\r\n          ticketRevenue: 0,\r\n          fbRevenue: 0,\r\n          merchandiseRevenue: 0,\r\n          digitalRevenue: 0\r\n        },\r\n        costs: {\r\n          marketingCost: 0,\r\n          staffingCost: 0,\r\n          eventCost: 0,\r\n          setupCost: 0\r\n        },\r\n        attendance: {\r\n          footTraffic: 0\r\n        }\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      lastModified: new Date().toISOString(),\r\n      variant: 'custom'\r\n    };\r\n    \r\n    addScenarioModel(newScenario);\r\n    setActiveScenario(newScenario);\r\n    setIsCreatingScenario(false);\r\n  };\r\n  \r\n  // Handle product selection change\r\n  const handleProductChange = (productId: string) => {\r\n    const product = products.find(p => p.info.id === productId);\r\n    if (product) {\r\n      setSelectedProduct(product);\r\n      setBaselineData(product.weeklyProjections || []);\r\n      \r\n      // Load scenarios for this product\r\n      const productScenarios = getScenariosByProduct(productId);\r\n      setActiveScenario(productScenarios.length > 0 ? productScenarios[0] : null);\r\n    }\r\n  };\r\n  \r\n  // Calculate scenario projections by applying modifiers to baseline data\r\n  const calculateScenarioProjections = (scenario: ScenarioModel) => {\r\n    if (!baselineData || baselineData.length === 0) return [];\r\n    \r\n    return baselineData.map(week => {\r\n      const { modifiers } = scenario;\r\n      \r\n      // Apply percentage adjustments to baseline values\r\n      return {\r\n        ...week,\r\n        projectedTicketRevenue: week.projectedTicketRevenue * (1 + modifiers.revenue.ticketRevenue / 100),\r\n        projectedFbRevenue: week.projectedFbRevenue * (1 + modifiers.revenue.fbRevenue / 100),\r\n        projectedMerchandiseRevenue: week.projectedMerchandiseRevenue * (1 + modifiers.revenue.merchandiseRevenue / 100),\r\n        projectedDigitalRevenue: week.projectedDigitalRevenue * (1 + modifiers.revenue.digitalRevenue / 100),\r\n        projectedMarketingCost: week.projectedMarketingCost * (1 + modifiers.costs.marketingCost / 100),\r\n        projectedStaffingCost: week.projectedStaffingCost * (1 + modifiers.costs.staffingCost / 100),\r\n        projectedEventCost: week.projectedEventCost * (1 + modifiers.costs.eventCost / 100),\r\n        projectedSetupCost: week.projectedSetupCost * (1 + modifiers.costs.setupCost / 100),\r\n        projectedFootTraffic: week.projectedFootTraffic * (1 + modifiers.attendance.footTraffic / 100)\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Update a scenario modifier\r\n  const updateModifier = (\r\n    category: 'revenue' | 'costs' | 'attendance',\r\n    key: string,\r\n    value: number\r\n  ) => {\r\n    if (!activeScenario) return;\r\n    \r\n    const updatedScenario = {\r\n      ...activeScenario,\r\n      modifiers: {\r\n        ...activeScenario.modifiers,\r\n        [category]: {\r\n          ...activeScenario.modifiers[category],\r\n          [key]: value\r\n        }\r\n      },\r\n      lastModified: new Date().toISOString()\r\n    };\r\n    \r\n    updateScenarioModel(updatedScenario);\r\n    setActiveScenario(updatedScenario);\r\n  };\r\n  \r\n  // Save the current scenario\r\n  const saveScenario = (name: string, description: string, variant: 'optimistic' | 'pessimistic' | 'neutral' | 'custom' = 'custom') => {\r\n    if (!activeScenario || !selectedProduct) return;\r\n    \r\n    const updatedScenario = {\r\n      ...activeScenario,\r\n      name,\r\n      description,\r\n      variant,\r\n      lastModified: new Date().toISOString()\r\n    };\r\n    \r\n    updateScenarioModel(updatedScenario);\r\n    setActiveScenario(updatedScenario);\r\n  };\r\n  \r\n  // Delete a scenario\r\n  const handleDeleteScenario = (scenarioId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this scenario?')) {\r\n      deleteScenarioModel(scenarioId);\r\n      \r\n      // Select a different scenario if the active one was deleted\r\n      if (activeScenario?.id === scenarioId) {\r\n        const remainingScenarios = getScenariosByProduct(selectedProduct?.info.id || '');\r\n        setActiveScenario(remainingScenarios.length > 0 ? remainingScenarios[0] : null);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Duplicate a scenario\r\n  const handleDuplicateScenario = (scenarioId: string) => {\r\n    const scenarioToDuplicate = scenarios.find(s => s.id === scenarioId);\r\n    if (!scenarioToDuplicate || !selectedProduct) return;\r\n    \r\n    const newScenario: ScenarioModel = {\r\n      ...scenarioToDuplicate,\r\n      id: crypto.randomUUID(),\r\n      name: `${scenarioToDuplicate.name} (Copy)`,\r\n      createdAt: new Date().toISOString(),\r\n      lastModified: new Date().toISOString()\r\n    };\r\n    \r\n    addScenarioModel(newScenario);\r\n    setActiveScenario(newScenario);\r\n  };\r\n  \r\n  // Export scenario comparison\r\n  const handleExportScenario = () => {\r\n    if (!activeScenario || !selectedProduct) return;\r\n    \r\n    const scenarioData = calculateScenarioProjections(activeScenario);\r\n    exportScenarioComparison(\r\n      selectedProduct,\r\n      baselineData,\r\n      scenarioData,\r\n      activeScenario.name\r\n    );\r\n  };\r\n  \r\n  // Calculate totals for baseline and scenario data for charts and tables\r\n  const calculateTotals = () => {\r\n    if (!baselineData || baselineData.length === 0) {\r\n      return { baseline: null, scenario: null };\r\n    }\r\n    \r\n    const baselineTotals = {\r\n      ticketRevenue: baselineData.reduce((sum, week) => sum + week.projectedTicketRevenue, 0),\r\n      fbRevenue: baselineData.reduce((sum, week) => sum + week.projectedFbRevenue, 0),\r\n      merchandiseRevenue: baselineData.reduce((sum, week) => sum + week.projectedMerchandiseRevenue, 0),\r\n      digitalRevenue: baselineData.reduce((sum, week) => sum + week.projectedDigitalRevenue, 0),\r\n      totalRevenue: baselineData.reduce((sum, week) => \r\n        sum + week.projectedTicketRevenue + week.projectedFbRevenue + \r\n        week.projectedMerchandiseRevenue + week.projectedDigitalRevenue, 0),\r\n      \r\n      marketingCost: baselineData.reduce((sum, week) => sum + week.projectedMarketingCost, 0),\r\n      staffingCost: baselineData.reduce((sum, week) => sum + week.projectedStaffingCost, 0),\r\n      eventCost: baselineData.reduce((sum, week) => sum + week.projectedEventCost, 0),\r\n      setupCost: baselineData.reduce((sum, week) => sum + week.projectedSetupCost, 0),\r\n      totalCost: baselineData.reduce((sum, week) => \r\n        sum + week.projectedMarketingCost + week.projectedStaffingCost + \r\n        week.projectedEventCost + week.projectedSetupCost, 0),\r\n      \r\n      footTraffic: baselineData.reduce((sum, week) => sum + week.projectedFootTraffic, 0)\r\n    };\r\n    \r\n    baselineTotals.profit = baselineTotals.totalRevenue - baselineTotals.totalCost;\r\n    \r\n    if (!activeScenario) return { baseline: baselineTotals, scenario: null };\r\n    \r\n    const scenarioData = calculateScenarioProjections(activeScenario);\r\n    \r\n    const scenarioTotals = {\r\n      ticketRevenue: scenarioData.reduce((sum, week) => sum + week.projectedTicketRevenue, 0),\r\n      fbRevenue: scenarioData.reduce((sum, week) => sum + week.projectedFbRevenue, 0),\r\n      merchandiseRevenue: scenarioData.reduce((sum, week) => sum + week.projectedMerchandiseRevenue, 0),\r\n      digitalRevenue: scenarioData.reduce((sum, week) => sum + week.projectedDigitalRevenue, 0),\r\n      totalRevenue: scenarioData.reduce((sum, week) => \r\n        sum + week.projectedTicketRevenue + week.projectedFbRevenue + \r\n        week.projectedMerchandiseRevenue + week.projectedDigitalRevenue, 0),\r\n      \r\n      marketingCost: scenarioData.reduce((sum, week) => sum + week.projectedMarketingCost, 0),\r\n      staffingCost: scenarioData.reduce((sum, week) => sum + week.projectedStaffingCost, 0),\r\n      eventCost: scenarioData.reduce((sum, week) => sum + week.projectedEventCost, 0),\r\n      setupCost: scenarioData.reduce((sum, week) => sum + week.projectedSetupCost, 0),\r\n      totalCost: scenarioData.reduce((sum, week) => \r\n        sum + week.projectedMarketingCost + week.projectedStaffingCost + \r\n        week.projectedEventCost + week.projectedSetupCost, 0),\r\n      \r\n      footTraffic: scenarioData.reduce((sum, week) => sum + week.projectedFootTraffic, 0)\r\n    };\r\n    \r\n    scenarioTotals.profit = scenarioTotals.totalRevenue - scenarioTotals.totalCost;\r\n    \r\n    return { baseline: baselineTotals, scenario: scenarioTotals };\r\n  };\r\n  \r\n  // Format percentage change between baseline and scenario\r\n  const formatChange = (baseline: number, scenario: number) => {\r\n    if (baseline === 0) return 'N/A';\r\n    const change = ((scenario - baseline) / baseline) * 100;\r\n    return `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;\r\n  };\r\n  \r\n  // Render product selector\r\n  const renderProductSelector = () => (\r\n    <Select\r\n      value={selectedProduct?.info.id || ''}\r\n      onValueChange={handleProductChange}\r\n    >\r\n      <SelectTrigger className=\"w-full\">\r\n        <SelectValue placeholder=\"Select a product\" />\r\n      </SelectTrigger>\r\n      <SelectContent>\r\n        {products.map(product => (\r\n          <SelectItem key={product.info.id} value={product.info.id}>\r\n            {product.info.name}\r\n          </SelectItem>\r\n        ))}\r\n      </SelectContent>\r\n    </Select>\r\n  );\r\n  \r\n  // Render scenario selection panel\r\n  const renderScenarioPanel = () => {\r\n    const productScenarios = selectedProduct \r\n      ? getScenariosByProduct(selectedProduct.info.id)\r\n      : [];\r\n    \r\n    return (\r\n      <Card className=\"mb-4\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-xl\">Scenarios</CardTitle>\r\n          <CardDescription>\r\n            Create and manage scenarios for {selectedProduct?.info.name || 'selected product'}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {productScenarios.length > 0 ? (\r\n            <div className=\"space-y-2\">\r\n              {productScenarios.map(scenario => (\r\n                <div \r\n                  key={scenario.id}\r\n                  className={`p-2 border rounded-md flex justify-between items-center cursor-pointer ${\r\n                    activeScenario?.id === scenario.id ? 'bg-blue-50 border-blue-300' : ''\r\n                  }`}\r\n                  onClick={() => setActiveScenario(scenario)}\r\n                >\r\n                  <div>\r\n                    <div className=\"font-medium\">{scenario.name}</div>\r\n                    <div className=\"text-sm text-gray-500\">{scenario.variant}</div>\r\n                  </div>\r\n                  <div className=\"flex gap-1\">\r\n                    <Button \r\n                      variant=\"ghost\" \r\n                      size=\"sm\"\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        handleDuplicateScenario(scenario.id);\r\n                      }}\r\n                    >\r\n                      <Copy className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    <Button \r\n                      variant=\"ghost\" \r\n                      size=\"sm\"\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        handleDeleteScenario(scenario.id);\r\n                      }}\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-4 text-gray-500\">\r\n              No scenarios created yet.\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"mt-4\">\r\n            <Button \r\n              className=\"w-full\"\r\n              onClick={createDefaultScenario}\r\n            >\r\n              <PlusCircle className=\"h-4 w-4 mr-2\" /> Create New Scenario\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  // Render parameter modification controls\r\n  const renderModifierControls = () => {\r\n    if (!activeScenario) return null;\r\n    \r\n    return (\r\n      <Tabs \r\n        value={activeTab} \r\n        onValueChange={setActiveTab}\r\n        className=\"w-full\"\r\n      >\r\n        <TabsList className=\"grid grid-cols-3 mb-4\">\r\n          <TabsTrigger value=\"parameters\">Revenue</TabsTrigger>\r\n          <TabsTrigger value=\"costs\">Costs</TabsTrigger>\r\n          <TabsTrigger value=\"attendance\">Attendance</TabsTrigger>\r\n        </TabsList>\r\n        \r\n        <TabsContent value=\"parameters\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Revenue Adjustments</CardTitle>\r\n              <CardDescription>Adjust revenue projections relative to baseline</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Ticket Revenue: {activeScenario.modifiers.revenue.ticketRevenue}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.ticketRevenue || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.ticketRevenue || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.revenue.ticketRevenue]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('revenue', 'ticketRevenue', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>F&B Revenue: {activeScenario.modifiers.revenue.fbRevenue}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.fbRevenue || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.fbRevenue || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.revenue.fbRevenue]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('revenue', 'fbRevenue', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Merchandise Revenue: {activeScenario.modifiers.revenue.merchandiseRevenue}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.merchandiseRevenue || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.merchandiseRevenue || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.revenue.merchandiseRevenue]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('revenue', 'merchandiseRevenue', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Digital Revenue: {activeScenario.modifiers.revenue.digitalRevenue}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.digitalRevenue || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.digitalRevenue || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.revenue.digitalRevenue]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('revenue', 'digitalRevenue', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"pt-4 border-t border-gray-200\">\r\n                <div className=\"font-medium flex justify-between\">\r\n                  <span>Total Revenue Impact</span>\r\n                  <span className={calculateTotals().scenario && calculateTotals().baseline && \r\n                    calculateTotals().scenario.totalRevenue > calculateTotals().baseline.totalRevenue \r\n                    ? 'text-green-600' \r\n                    : 'text-red-600'\r\n                  }>\r\n                    {calculateTotals().baseline && calculateTotals().scenario && \r\n                      formatChange(calculateTotals().baseline.totalRevenue, calculateTotals().scenario.totalRevenue)\r\n                    }\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n        \r\n        <TabsContent value=\"costs\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Cost Adjustments</CardTitle>\r\n              <CardDescription>Adjust cost projections relative to baseline</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Marketing Cost: {activeScenario.modifiers.costs.marketingCost}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.marketingCost || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.marketingCost || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.costs.marketingCost]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('costs', 'marketingCost', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Staffing Cost: {activeScenario.modifiers.costs.staffingCost}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.staffingCost || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.staffingCost || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.costs.staffingCost]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('costs', 'staffingCost', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Event Cost: {activeScenario.modifiers.costs.eventCost}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.eventCost || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.eventCost || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.costs.eventCost]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('costs', 'eventCost', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Setup Cost: {activeScenario.modifiers.costs.setupCost}%</Label>\r\n                  <span>\r\n                    {formatCurrency(calculateTotals().baseline?.setupCost || 0)} → \r\n                    {formatCurrency(calculateTotals().scenario?.setupCost || 0)}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.costs.setupCost]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('costs', 'setupCost', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"pt-4 border-t border-gray-200\">\r\n                <div className=\"font-medium flex justify-between\">\r\n                  <span>Total Cost Impact</span>\r\n                  <span className={calculateTotals().scenario && calculateTotals().baseline && \r\n                    calculateTotals().scenario.totalCost < calculateTotals().baseline.totalCost \r\n                    ? 'text-green-600' \r\n                    : 'text-red-600'\r\n                  }>\r\n                    {calculateTotals().baseline && calculateTotals().scenario && \r\n                      formatChange(calculateTotals().baseline.totalCost, calculateTotals().scenario.totalCost)\r\n                    }\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n        \r\n        <TabsContent value=\"attendance\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Attendance Adjustments</CardTitle>\r\n              <CardDescription>Adjust attendance projections relative to baseline</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <Label>Foot Traffic: {activeScenario.modifiers.attendance.footTraffic}%</Label>\r\n                  <span>\r\n                    {(calculateTotals().baseline?.footTraffic || 0).toLocaleString()} → \r\n                    {(calculateTotals().scenario?.footTraffic || 0).toLocaleString()}\r\n                  </span>\r\n                </div>\r\n                <Slider \r\n                  value={[activeScenario.modifiers.attendance.footTraffic]} \r\n                  min={-50} \r\n                  max={50} \r\n                  step={1}\r\n                  onValueChange={(value) => updateModifier('attendance', 'footTraffic', value[0])}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"pt-4 border-t border-gray-200\">\r\n                <div className=\"font-medium flex justify-between\">\r\n                  <span>Attendance Impact</span>\r\n                  <span className={calculateTotals().scenario && calculateTotals().baseline && \r\n                    calculateTotals().scenario.footTraffic > calculateTotals().baseline.footTraffic \r\n                    ? 'text-green-600' \r\n                    : 'text-red-600'\r\n                  }>\r\n                    {calculateTotals().baseline && calculateTotals().scenario && \r\n                      formatChange(calculateTotals().baseline.footTraffic, calculateTotals().scenario.footTraffic)\r\n                    }\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    );\r\n  };\r\n  \r\n  // Render comparison charts and tables\r\n  const renderComparisonCharts = () => {\r\n    const totals = calculateTotals();\r\n    if (!totals.baseline || !totals.scenario) return null;\r\n    \r\n    // Generate data for charts\r\n    const revenueComparisonData = [\r\n      { name: 'Ticket', baseline: totals.baseline.ticketRevenue, scenario: totals.scenario.ticketRevenue },\r\n      { name: 'F&B', baseline: totals.baseline.fbRevenue, scenario: totals.scenario.fbRevenue },\r\n      { name: 'Merch', baseline: totals.baseline.merchandiseRevenue, scenario: totals.scenario.merchandiseRevenue },\r\n      { name: 'Digital', baseline: totals.baseline.digitalRevenue, scenario: totals.scenario.digitalRevenue }\r\n    ];\r\n    \r\n    const costComparisonData = [\r\n      { name: 'Marketing', baseline: totals.baseline.marketingCost, scenario: totals.scenario.marketingCost },\r\n      { name: 'Staffing', baseline: totals.baseline.staffingCost, scenario: totals.scenario.staffingCost },\r\n      { name: 'Event', baseline: totals.baseline.eventCost, scenario: totals.scenario.eventCost },\r\n      { name: 'Setup', baseline: totals.baseline.setupCost, scenario: totals.scenario.setupCost }\r\n    ];\r\n    \r\n    const summaryComparisonData = [\r\n      { name: 'Revenue', baseline: totals.baseline.totalRevenue, scenario: totals.scenario.totalRevenue },\r\n      { name: 'Costs', baseline: totals.baseline.totalCost, scenario: totals.scenario.totalCost },\r\n      { name: 'Profit', baseline: totals.baseline.profit, scenario: totals.scenario.profit },\r\n      { name: 'Attendance', baseline: totals.baseline.footTraffic, scenario: totals.scenario.footTraffic, isCount: true }\r\n    ];\r\n    \r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"text-xl font-semibold\">\r\n          Scenario Impact Analysis\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            className=\"ml-2\"\r\n            onClick={handleExportScenario}\r\n          >\r\n            <Download className=\"h-4 w-4 mr-1\" /> Export Comparison\r\n          </Button>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Revenue Comparison</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"h-64\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <RechartsBarChart data={revenueComparisonData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis tickFormatter={(value) => `$${Math.round(value / 1000)}k`} />\r\n                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />\r\n                    <Legend />\r\n                    <Bar dataKey=\"baseline\" name=\"Baseline\" fill=\"#8884d8\" />\r\n                    <Bar dataKey=\"scenario\" name=\"Scenario\" fill=\"#82ca9d\" />\r\n                  </RechartsBarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Cost Comparison</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"h-64\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <RechartsBarChart data={costComparisonData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis tickFormatter={(value) => `$${Math.round(value / 1000)}k`} />\r\n                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />\r\n                    <Legend />\r\n                    <Bar dataKey=\"baseline\" name=\"Baseline\" fill=\"#8884d8\" />\r\n                    <Bar dataKey=\"scenario\" name=\"Scenario\" fill=\"#82ca9d\" />\r\n                  </RechartsBarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n        \r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Summary Comparison</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Metric</TableHead>\r\n                  <TableHead className=\"text-right\">Baseline</TableHead>\r\n                  <TableHead className=\"text-right\">Scenario</TableHead>\r\n                  <TableHead className=\"text-right\">Difference</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {summaryComparisonData.map((item) => {\r\n                  const isImprovement = item.name === 'Costs' \r\n                    ? item.scenario < item.baseline\r\n                    : item.scenario > item.baseline;\r\n                  \r\n                  return (\r\n                    <TableRow key={item.name}>\r\n                      <TableCell>{item.name}</TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        {item.isCount \r\n                          ? Math.round(item.baseline).toLocaleString() \r\n                          : formatCurrency(item.baseline)}\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        {item.isCount \r\n                          ? Math.round(item.scenario).toLocaleString() \r\n                          : formatCurrency(item.scenario)}\r\n                      </TableCell>\r\n                      <TableCell className={`text-right ${isImprovement ? 'text-green-600' : 'text-red-600'}`}>\r\n                        {formatChange(item.baseline, item.scenario)}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Main component render\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h2 className=\"text-3xl font-bold\">Product-Based Scenario Modeling</h2>\r\n        <div className=\"w-1/3\">\r\n          {renderProductSelector()}\r\n        </div>\r\n      </div>\r\n      \r\n      {selectedProduct ? (\r\n        <div className=\"grid grid-cols-4 gap-6\">\r\n          {/* Scenario selection panel */}\r\n          <div className=\"col-span-1\">\r\n            {renderScenarioPanel()}\r\n          </div>\r\n          \r\n          {/* Scenario content area */}\r\n          {activeScenario ? (\r\n            <div className=\"col-span-3 space-y-6\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <CardTitle className=\"text-2xl\">{activeScenario.name}</CardTitle>\r\n                    <div className=\"text-sm text-gray-500\">\r\n                      Last modified: {new Date(activeScenario.lastModified).toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n                  <CardDescription>{activeScenario.description}</CardDescription>\r\n                </CardHeader>\r\n              </Card>\r\n              \r\n              {renderModifierControls()}\r\n              {renderComparisonCharts()}\r\n            </div>\r\n          ) : (\r\n            <div className=\"col-span-3 flex items-center justify-center h-64 border rounded-lg bg-gray-50\">\r\n              <div className=\"text-center\">\r\n                <p className=\"text-lg text-gray-500 mb-4\">No scenario selected</p>\r\n                <Button onClick={createDefaultScenario}>\r\n                  <PlusCircle className=\"h-4 w-4 mr-2\" /> Create New Scenario\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"p-8 text-center\">\r\n          <p className=\"text-lg text-gray-500\">Select a product to start scenario modeling</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ProductDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileDown' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileUp' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScenarioModeling' is defined but never used.","line":37,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RiskMatrix' is defined but never used.","line":38,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportToPDF' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'downloadFile' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportToJSON' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportFinancialData' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportWeeklyProjections' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportActualMetrics' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportRevenueBreakdown' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportCostAnalysis' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportVarianceAnalysis' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportMarketingChannelData' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentProduct' is defined but never used.","line":59,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateProduct' is defined but never used.","line":59,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is defined but never used.","line":59,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsExporting' is assigned a value but never used.","line":67,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'exportType' is assigned a value but never used.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setExportType' is assigned a value but never used.","line":68,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport { Button } from './ui/button';\r\nimport { \r\n  ArrowLeft, \r\n  Download, \r\n  BarChart, \r\n  PieChart, \r\n  AlertTriangle, \r\n  TrendingUp, \r\n  DollarSign, \r\n  BarChart2, \r\n  ChevronDown,\r\n  Award,\r\n  FileText,\r\n  ChevronRight,\r\n  FileDown,\r\n  FileUp\r\n} from 'lucide-react';\r\nimport { Spinner } from './ui/spinner';\r\nimport { Breadcrumbs } from './ui/breadcrumb';\r\nimport { RecentlyViewed } from './ui/recently-viewed';\r\nimport { QuickJump } from './ui/quick-jump';\r\nimport { SetupWizard } from './ui/setup-wizard';\r\nimport ProductHeader from './ProductHeader';\r\nimport ExecutiveDashboard from './ExecutiveDashboard';\r\nimport ForecastRevenue from './ForecastRevenue';\r\nimport ForecastCosts from './ForecastCosts';\r\nimport WeeklyForecast from './WeeklyForecast';\r\nimport FinancialProjections from './FinancialProjections';\r\nimport LongTermProjections from './LongTermProjections';\r\nimport RiskAssessment from './RiskAssessment';\r\nimport ActualsTracker from './ActualsTracker';\r\nimport SeasonalAnalysis from './SeasonalAnalysis';\r\nimport ProductScenario from './ProductScenario';\r\nimport ScenarioModeling from './ScenarioModeling';\r\nimport RiskMatrix from './RiskMatrix';\r\nimport MarketingAnalytics from './MarketingAnalytics';\r\nimport MarketingApiIntegration from './MarketingApiIntegration';\r\nimport BudgetAllocation from './BudgetAllocation';\r\nimport MarketingKPITracker from './MarketingKPITracker';\r\nimport useStore from '../store/useStore';\r\nimport { \r\n  exportToPDF, \r\n  downloadFile, \r\n  ReportType, \r\n  exportToJSON, \r\n  exportFinancialData,\r\n  exportWeeklyProjections,\r\n  exportActualMetrics,\r\n  exportRevenueBreakdown,\r\n  exportCostAnalysis,\r\n  exportVarianceAnalysis,\r\n  exportMarketingChannelData\r\n} from '../lib/exportUtils';\r\nimport { Product } from '../types/custom.d';\r\n\r\nexport default function ProductDashboard({ currentProduct, updateProduct, isLoading }: { \r\n  currentProduct: Product; \r\n  updateProduct: (product: Product) => void;\r\n  isLoading: boolean;\r\n}) {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { products, setCurrentProduct } = useStore();\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [exportType, setExportType] = useState<ReportType>('financial');\r\n  const [marketingTab, setMarketingTab] = useState<'analytics' | 'api' | 'budget' | 'kpi'>('analytics');\r\n  const [activeTab, setActiveTab] = useState('dashboard');\r\n  const product = products.find(p => p.info.id === id);\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      setCurrentProduct(id);\r\n    }\r\n  }, [id, setCurrentProduct]);\r\n\r\n  // All the export functions remain the same\r\n  // handleExportPDF, handleExportExcel, handleExportJSON functions...\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      const target = event.target;\r\n      if (dropdownOpen && !target.closest('.dropdown-container')) {\r\n        setDropdownOpen(false);\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [dropdownOpen]);\r\n\r\n  const handleNavigateToProduct = (productId) => {\r\n    navigate(`/product/${productId}`);\r\n  };\r\n  \r\n  const handleQuickJump = (path) => {\r\n    navigate(path);\r\n  };\r\n  \r\n  // Handle tab selection from the setup wizard\r\n  const handleSelectTab = (tabId: string) => {\r\n    console.log('ProductDashboard: Setting active tab to:', tabId);\r\n    // Force active tab to update by ensuring it's a string type\r\n    const safeTabId = String(tabId);\r\n    setActiveTab(safeTabId);\r\n    \r\n    // Add a small timeout to ensure the UI updates\r\n    setTimeout(() => {\r\n      console.log('ProductDashboard: Active tab is now:', activeTab);\r\n      // Additional check - force scroll to the tab content\r\n      const tabContent = document.querySelector(`[data-state=\"active\"][role=\"tabpanel\"]`);\r\n      if (tabContent) {\r\n        tabContent.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  if (!id) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n        <div className=\"max-w-6xl mx-auto\">\r\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center\">\r\n            <h1 className=\"text-2xl font-bold text-yellow-800 mb-4\">No Product Selected</h1>\r\n            <p className=\"text-yellow-700 mb-6\">Please select a product to view.</p>\r\n            <Button onClick={() => navigate('/')}>Return to Home</Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!product) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n        <div className=\"max-w-6xl mx-auto\">\r\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center\">\r\n            <h1 className=\"text-2xl font-bold text-yellow-800 mb-4\">Product Not Found</h1>\r\n            <p className=\"text-yellow-700 mb-6\">The requested product could not be found.</p>\r\n            <Button onClick={() => navigate('/')}>Return to Home</Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render marketing content based on selected tab\r\n  const renderMarketingContent = () => {\r\n    switch (marketingTab) {\r\n      case 'analytics':\r\n        return <MarketingAnalytics />;\r\n      case 'api':\r\n        return <MarketingApiIntegration />;\r\n      case 'budget':\r\n        return <BudgetAllocation />;\r\n      case 'kpi':\r\n        return <MarketingKPITracker />;\r\n      default:\r\n        return <MarketingAnalytics />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <Breadcrumbs \r\n          items={[\r\n            { label: 'Products', href: '/' },\r\n            { label: product?.info.name || 'Product Details' }\r\n          ]}\r\n          onNavigate={navigate}\r\n        />\r\n        \r\n        <header className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <Button variant=\"ghost\" onClick={() => navigate('/')} className=\"mr-4\">\r\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n              Back\r\n            </Button>\r\n            \r\n            {/* Export dropdown button */}\r\n            <div className=\"relative dropdown-container\">\r\n              <Button \r\n                disabled={isExporting}\r\n                className=\"flex items-center\"\r\n                onClick={() => setDropdownOpen(!dropdownOpen)}\r\n              >\r\n                {isExporting ? (\r\n                  <Spinner className=\"h-4 w-4 mr-2\" />\r\n                ) : (\r\n                  <Download className=\"h-4 w-4 mr-2\" />\r\n                )}\r\n                {isExporting ? 'Exporting...' : 'Export Data'}\r\n                <ChevronDown className=\"h-4 w-4 ml-2\" />\r\n              </Button>\r\n              \r\n              {dropdownOpen && (\r\n                <div className=\"absolute right-0 z-50 mt-2 w-64 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5\">\r\n                  <div className=\"py-1\" role=\"menu\" aria-orientation=\"vertical\">\r\n                    {/* Dropdown content (PDF, Excel, JSON options) */}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Product header */}\r\n          <ProductHeader info={product.info} />\r\n        </header>\r\n\r\n        {/* Main layout with sidebar */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\r\n          {/* Main content area - 3/4 width on large screens */}\r\n          <div className=\"lg:col-span-3\">\r\n            {/* Main tab navigation */}\r\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\r\n              <div className=\"overflow-x-auto pb-2\">\r\n                <TabsList className=\"inline-flex min-w-max w-full md:w-auto\">\r\n                  <TabsTrigger value=\"dashboard\" className=\"whitespace-nowrap\">\r\n                    Executive Dashboard\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"revenue\" className=\"whitespace-nowrap\">\r\n                    Revenue Forecast\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"costs\" className=\"whitespace-nowrap\">\r\n                    Cost Forecast\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"forecast\" className=\"whitespace-nowrap\">\r\n                    12-Week Forecast\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"actuals\" className=\"whitespace-nowrap\">\r\n                    Actuals Tracker\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"marketing\" className=\"whitespace-nowrap\">\r\n                    Marketing Analytics\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"financials\" className=\"whitespace-nowrap\">\r\n                    Financial Projections\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"longterm\" className=\"whitespace-nowrap\">\r\n                    Long-term Projections\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"seasonal\" className=\"whitespace-nowrap\">\r\n                    Seasonal Analysis\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"scenarios\" className=\"whitespace-nowrap\">\r\n                    Scenario Modeling\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"risk\" className=\"whitespace-nowrap\">\r\n                    Risk Assessment\r\n                  </TabsTrigger>\r\n                </TabsList>\r\n              </div>\r\n\r\n              {/* Tab content */}\r\n              <TabsContent value=\"dashboard\">\r\n                <ExecutiveDashboard />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"revenue\">\r\n                <ForecastRevenue />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"costs\">\r\n                <ForecastCosts />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"forecast\">\r\n                <WeeklyForecast />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"actuals\">\r\n                <ActualsTracker />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"marketing\">\r\n                <div className=\"space-y-4\">\r\n                  <Tabs value={marketingTab} onValueChange={(value) => setMarketingTab(value)} className=\"w-full\">\r\n                    <TabsList className=\"grid grid-cols-4 w-full max-w-md mb-4\">\r\n                      <TabsTrigger value=\"analytics\">\r\n                        <BarChart2 className=\"h-4 w-4 mr-2\" />\r\n                        Analytics\r\n                      </TabsTrigger>\r\n                      <TabsTrigger value=\"api\">\r\n                        <TrendingUp className=\"h-4 w-4 mr-2\" />\r\n                        API Import\r\n                      </TabsTrigger>\r\n                      <TabsTrigger value=\"budget\">\r\n                        <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                        Budget\r\n                      </TabsTrigger>\r\n                      <TabsTrigger value=\"kpi\">\r\n                        <Award className=\"h-4 w-4 mr-2\" />\r\n                        KPIs\r\n                      </TabsTrigger>\r\n                    </TabsList>\r\n                  </Tabs>\r\n                  \r\n                  {renderMarketingContent()}\r\n                </div>\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"financials\">\r\n                <FinancialProjections />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"longterm\">\r\n                <LongTermProjections />\r\n              </TabsContent>\r\n              \r\n              <TabsContent value=\"seasonal\">\r\n                <SeasonalAnalysis />\r\n              </TabsContent>\r\n              \r\n              <TabsContent value=\"scenarios\">\r\n                <ProductScenario />\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"risk\">\r\n                <RiskAssessment />\r\n              </TabsContent>\r\n            </Tabs>\r\n          </div>\r\n          \r\n          {/* Sidebar - 1/4 width on large screens */}\r\n          <div className=\"space-y-4\">\r\n            {/* Setup wizard with ability to select tabs */}\r\n            <SetupWizard \r\n              onNavigate={handleQuickJump} \r\n              onSelectTab={handleSelectTab}\r\n            />\r\n            \r\n            {/* Quick jump navigation with tab support */}\r\n            <QuickJump \r\n              onNavigate={handleQuickJump} \r\n              onSelectTab={handleSelectTab}\r\n            />\r\n            \r\n            {/* Recently viewed products */}\r\n            <RecentlyViewed onNavigate={handleNavigateToProduct} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ProductHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ProductScenario.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'downloadFile' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'scenarios' is assigned a value but never used.","line":31,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'createDefaultScenario'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":76,"suggestions":[{"desc":"Update the dependencies array to be: [selectedProductId, products, getScenariosByProduct, activeScenarioId, createDefaultScenario]","fix":{"range":[3205,3275],"text":"[selectedProductId, products, getScenariosByProduct, activeScenarioId, createDefaultScenario]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Slider } from './ui/slider';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport useStore from '../store/useStore';\r\nimport { Product, ScenarioModel, WeeklyProjection } from '../types';\r\nimport { \r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, \r\n  Tooltip, Legend, ResponsiveContainer, Bar, BarChart\r\n} from 'recharts';\r\nimport { exportScenarioComparison } from '../lib/exportUtils';\r\nimport { downloadFile } from '../lib/exportUtils';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst DEFAULT_MODIFIER_VALUE = 0; // 0% change\r\n\r\nconst ProductScenario = () => {\r\n  const { id: productIdFromRoute } = useParams<{ id: string }>();\r\n  const { products, scenarios, addScenarioModel, updateScenarioModel, deleteScenarioModel, getScenariosByProduct, currentProductId } = useStore();\r\n  \r\n  // Use the product ID from route params if available, otherwise fall back to currentProductId from store\r\n  const [selectedProductId, setSelectedProductId] = useState<string | null>(\r\n    productIdFromRoute || currentProductId || null\r\n  );\r\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\r\n  const [activeScenarioId, setActiveScenarioId] = useState<string | null>(null);\r\n  const [isEditingName, setIsEditingName] = useState<boolean>(false);\r\n  const [newScenarioName, setNewScenarioName] = useState<string>('');\r\n  const [activeTab, setActiveTab] = useState('editor');\r\n  \r\n  // Update selectedProductId when productIdFromRoute or currentProductId changes\r\n  useEffect(() => {\r\n    if (productIdFromRoute && productIdFromRoute !== selectedProductId) {\r\n      setSelectedProductId(productIdFromRoute);\r\n    } else if (currentProductId && !selectedProductId) {\r\n      setSelectedProductId(currentProductId);\r\n    }\r\n  }, [productIdFromRoute, currentProductId, selectedProductId]);\r\n  \r\n  // Get the selected product's scenarios\r\n  const productScenarios = selectedProductId \r\n    ? getScenariosByProduct(selectedProductId) \r\n    : [];\r\n  \r\n  // Get the active scenario\r\n  const activeScenario = activeScenarioId \r\n    ? productScenarios.find(s => s.id === activeScenarioId) \r\n    : null;\r\n  \r\n  // Load product when selected\r\n  useEffect(() => {\r\n    if (selectedProductId) {\r\n      const product = products.find(p => p.info.id === selectedProductId);\r\n      setSelectedProduct(product || null);\r\n      \r\n      // Set first scenario as active if available\r\n      const productScenarios = getScenariosByProduct(selectedProductId);\r\n      if (productScenarios.length > 0 && !activeScenarioId) {\r\n        setActiveScenarioId(productScenarios[0].id);\r\n      } else if (productScenarios.length === 0) {\r\n        // If no scenarios exist, create a default one\r\n        createDefaultScenario(selectedProductId);\r\n      }\r\n    }\r\n  }, [selectedProductId, products, getScenariosByProduct, activeScenarioId]);\r\n  \r\n  // Create a default scenario for a product\r\n  const createDefaultScenario = (productId: string) => {\r\n    const newScenario: ScenarioModel = {\r\n      id: uuidv4(),\r\n      name: 'Default Scenario',\r\n      productId,\r\n      description: 'A default scenario based on product baseline',\r\n      modifiers: {\r\n        revenue: {\r\n          ticketRevenue: DEFAULT_MODIFIER_VALUE,\r\n          fbRevenue: DEFAULT_MODIFIER_VALUE,\r\n          merchandiseRevenue: DEFAULT_MODIFIER_VALUE,\r\n          digitalRevenue: DEFAULT_MODIFIER_VALUE,\r\n        },\r\n        costs: {\r\n          marketingCost: DEFAULT_MODIFIER_VALUE,\r\n          staffingCost: DEFAULT_MODIFIER_VALUE,\r\n          eventCost: DEFAULT_MODIFIER_VALUE,\r\n          setupCost: DEFAULT_MODIFIER_VALUE,\r\n        },\r\n        attendance: DEFAULT_MODIFIER_VALUE\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    addScenarioModel(newScenario);\r\n    setActiveScenarioId(newScenario.id);\r\n  };\r\n  \r\n  // Create a new scenario\r\n  const createNewScenario = () => {\r\n    if (selectedProductId) {\r\n      const newScenarioName = `Scenario ${productScenarios.length + 1}`;\r\n      \r\n      const newScenario: ScenarioModel = {\r\n        id: uuidv4(),\r\n        name: newScenarioName,\r\n        productId: selectedProductId,\r\n        description: 'New scenario based on product baseline',\r\n        modifiers: {\r\n          revenue: {\r\n            ticketRevenue: DEFAULT_MODIFIER_VALUE,\r\n            fbRevenue: DEFAULT_MODIFIER_VALUE,\r\n            merchandiseRevenue: DEFAULT_MODIFIER_VALUE,\r\n            digitalRevenue: DEFAULT_MODIFIER_VALUE,\r\n          },\r\n          costs: {\r\n            marketingCost: DEFAULT_MODIFIER_VALUE,\r\n            staffingCost: DEFAULT_MODIFIER_VALUE,\r\n            eventCost: DEFAULT_MODIFIER_VALUE,\r\n            setupCost: DEFAULT_MODIFIER_VALUE,\r\n          },\r\n          attendance: DEFAULT_MODIFIER_VALUE\r\n        },\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n      \r\n      addScenarioModel(newScenario);\r\n      setActiveScenarioId(newScenario.id);\r\n    }\r\n  };\r\n  \r\n  // Duplicate active scenario\r\n  const duplicateScenario = () => {\r\n    if (activeScenario && selectedProductId) {\r\n      const duplicatedScenario: ScenarioModel = {\r\n        ...activeScenario,\r\n        id: uuidv4(),\r\n        name: `${activeScenario.name} (Copy)`,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n      \r\n      addScenarioModel(duplicatedScenario);\r\n      setActiveScenarioId(duplicatedScenario.id);\r\n    }\r\n  };\r\n  \r\n  // Delete active scenario\r\n  const deleteScenario = () => {\r\n    if (activeScenarioId) {\r\n      deleteScenarioModel(activeScenarioId);\r\n      \r\n      // Set first available scenario as active\r\n      if (productScenarios.length > 1) {\r\n        const remainingScenarios = productScenarios.filter(s => s.id !== activeScenarioId);\r\n        setActiveScenarioId(remainingScenarios[0].id);\r\n      } else {\r\n        // If no scenarios left, create a default one\r\n        createDefaultScenario(selectedProductId as string);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Start scenario name editing\r\n  const startEditingName = () => {\r\n    if (activeScenario) {\r\n      setNewScenarioName(activeScenario.name);\r\n      setIsEditingName(true);\r\n    }\r\n  };\r\n  \r\n  // Save scenario name\r\n  const saveScenarioName = () => {\r\n    if (activeScenario && newScenarioName.trim() !== '') {\r\n      updateScenarioModel({\r\n        ...activeScenario,\r\n        name: newScenarioName.trim(),\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n      setIsEditingName(false);\r\n    }\r\n  };\r\n  \r\n  // Update scenario modifier\r\n  const updateModifier = (\r\n    category: 'revenue' | 'costs' | 'attendance',\r\n    type: string | null,\r\n    value: number\r\n  ) => {\r\n    if (activeScenario) {\r\n      const updatedScenario = { ...activeScenario };\r\n      \r\n      if (category === 'revenue' && type) {\r\n        updatedScenario.modifiers.revenue[type as keyof typeof updatedScenario.modifiers.revenue] = value;\r\n      } else if (category === 'costs' && type) {\r\n        updatedScenario.modifiers.costs[type as keyof typeof updatedScenario.modifiers.costs] = value;\r\n      } else if (category === 'attendance') {\r\n        updatedScenario.modifiers.attendance = value;\r\n      }\r\n      \r\n      updatedScenario.updatedAt = new Date().toISOString();\r\n      updateScenarioModel(updatedScenario);\r\n    }\r\n  };\r\n  \r\n  // Apply modifiers to generate projections\r\n  const generateProjectedData = (): { baseline: WeeklyProjection[], scenario: WeeklyProjection[] } => {\r\n    if (!selectedProduct || !activeScenario) {\r\n      return { baseline: [], scenario: [] };\r\n    }\r\n    \r\n    // Get baseline projections\r\n    const baseline = selectedProduct.weeklyProjections || [];\r\n    \r\n    // Generate scenario projections with modifiers applied\r\n    const scenario = baseline.map(week => {\r\n      const modifiers = activeScenario.modifiers;\r\n      \r\n      // Apply revenue modifiers\r\n      const ticketRevenue = week.ticketRevenue * (1 + modifiers.revenue.ticketRevenue / 100);\r\n      const fbRevenue = week.fbRevenue * (1 + modifiers.revenue.fbRevenue / 100);\r\n      const merchandiseRevenue = week.merchandiseRevenue * (1 + modifiers.revenue.merchandiseRevenue / 100);\r\n      const digitalRevenue = week.digitalRevenue * (1 + modifiers.revenue.digitalRevenue / 100);\r\n      \r\n      // Apply cost modifiers\r\n      const marketingCosts = week.marketingCosts * (1 + modifiers.costs.marketingCost / 100);\r\n      const staffingCosts = week.staffingCosts * (1 + modifiers.costs.staffingCost / 100);\r\n      const eventCosts = week.eventCosts * (1 + modifiers.costs.eventCost / 100);\r\n      const setupCosts = week.setupCosts * (1 + modifiers.costs.setupCost / 100);\r\n      \r\n      // Apply attendance modifier\r\n      const footTraffic = week.footTraffic * (1 + modifiers.attendance / 100);\r\n      \r\n      return {\r\n        ...week,\r\n        ticketRevenue: ticketRevenue,\r\n        fbRevenue: fbRevenue,\r\n        merchandiseRevenue: merchandiseRevenue,\r\n        digitalRevenue: digitalRevenue,\r\n        marketingCosts: marketingCosts,\r\n        staffingCosts: staffingCosts,\r\n        eventCosts: eventCosts,\r\n        setupCosts: setupCosts,\r\n        footTraffic: footTraffic,\r\n        // Recalculate totals\r\n        totalRevenue: ticketRevenue + fbRevenue + merchandiseRevenue + digitalRevenue,\r\n        totalCosts: marketingCosts + staffingCosts + eventCosts + setupCosts,\r\n        weeklyProfit: (ticketRevenue + fbRevenue + merchandiseRevenue + digitalRevenue) - \r\n                     (marketingCosts + staffingCosts + eventCosts + setupCosts)\r\n      };\r\n    });\r\n    \r\n    return { baseline, scenario };\r\n  };\r\n  \r\n  // Generate chart data\r\n  const generateChartData = () => {\r\n    const { baseline, scenario } = generateProjectedData();\r\n    if (baseline.length === 0 || scenario.length === 0) return { chartData: [], summaryData: {} };\r\n    \r\n    // Map the data to format suitable for charts\r\n    const chartData = baseline.map((week, index) => {\r\n      const scenarioWeek = scenario[index];\r\n      \r\n      // Calculate total revenues\r\n      const baselineRevenue = week.totalRevenue;\r\n      const scenarioRevenue = scenarioWeek.totalRevenue;\r\n      \r\n      // Calculate total costs\r\n      const baselineCost = week.totalCosts;\r\n      const scenarioCost = scenarioWeek.totalCosts;\r\n      \r\n      // Calculate profits\r\n      const baselineProfit = baselineRevenue - baselineCost;\r\n      const scenarioProfit = scenarioRevenue - scenarioCost;\r\n      \r\n      return {\r\n        week: week.week,\r\n        baselineRevenue,\r\n        scenarioRevenue,\r\n        revenueDifference: scenarioRevenue - baselineRevenue,\r\n        revenuePercentChange: ((scenarioRevenue - baselineRevenue) / baselineRevenue) * 100,\r\n        baselineCost,\r\n        scenarioCost,\r\n        costDifference: scenarioCost - baselineCost,\r\n        costPercentChange: ((scenarioCost - baselineCost) / baselineCost) * 100,\r\n        baselineProfit,\r\n        scenarioProfit,\r\n        profitDifference: scenarioProfit - baselineProfit,\r\n        profitPercentChange: baselineProfit === 0 ? 0 : ((scenarioProfit - baselineProfit) / Math.abs(baselineProfit)) * 100,\r\n        baselineAttendance: week.footTraffic,\r\n        scenarioAttendance: scenarioWeek.footTraffic\r\n      };\r\n    });\r\n    \r\n    // Calculate summary data\r\n    let baselineTotalRevenue = 0;\r\n    let scenarioTotalRevenue = 0;\r\n    let baselineTotalCost = 0;\r\n    let scenarioTotalCost = 0;\r\n    let baselineTotalProfit = 0;\r\n    let scenarioTotalProfit = 0;\r\n    let baselineTotalAttendance = 0;\r\n    let scenarioTotalAttendance = 0;\r\n    \r\n    baseline.forEach((week, index) => {\r\n      const scenarioWeek = scenario[index];\r\n      \r\n      // Sum revenues\r\n      baselineTotalRevenue += week.totalRevenue;\r\n      scenarioTotalRevenue += scenarioWeek.totalRevenue;\r\n      \r\n      // Sum costs\r\n      baselineTotalCost += week.totalCosts;\r\n      scenarioTotalCost += scenarioWeek.totalCosts;\r\n      \r\n      // Sum attendance\r\n      baselineTotalAttendance += week.footTraffic;\r\n      scenarioTotalAttendance += scenarioWeek.footTraffic;\r\n    });\r\n    \r\n    baselineTotalProfit = baselineTotalRevenue - baselineTotalCost;\r\n    scenarioTotalProfit = scenarioTotalRevenue - scenarioTotalCost;\r\n    \r\n    const summaryData = {\r\n      totalBaselineRevenue: baselineTotalRevenue,\r\n      totalScenarioRevenue: scenarioTotalRevenue,\r\n      revenueDifference: scenarioTotalRevenue - baselineTotalRevenue,\r\n      revenuePercentChange: ((scenarioTotalRevenue - baselineTotalRevenue) / baselineTotalRevenue) * 100,\r\n      \r\n      totalBaselineCost: baselineTotalCost,\r\n      totalScenarioCost: scenarioTotalCost,\r\n      costDifference: scenarioTotalCost - baselineTotalCost,\r\n      costPercentChange: ((scenarioTotalCost - baselineTotalCost) / baselineTotalCost) * 100,\r\n      \r\n      totalBaselineProfit: baselineTotalProfit,\r\n      totalScenarioProfit: scenarioTotalProfit,\r\n      profitDifference: scenarioTotalProfit - baselineTotalProfit,\r\n      profitPercentChange: baselineTotalProfit === 0 ? 0 : ((scenarioTotalProfit - baselineTotalProfit) / Math.abs(baselineTotalProfit)) * 100,\r\n      \r\n      totalBaselineAttendance: baselineTotalAttendance,\r\n      totalScenarioAttendance: scenarioTotalAttendance,\r\n      attendanceDifference: scenarioTotalAttendance - baselineTotalAttendance,\r\n      attendancePercentChange: ((scenarioTotalAttendance - baselineTotalAttendance) / baselineTotalAttendance) * 100\r\n    };\r\n    \r\n    return { chartData, summaryData };\r\n  };\r\n  \r\n  // Generate a list of products for the dropdown\r\n  const productOptions = products.map(product => ({\r\n    value: product.info.id,\r\n    label: product.info.name\r\n  }));\r\n  \r\n  // Handle product selection\r\n  const handleProductChange = (value: string) => {\r\n    setSelectedProductId(value);\r\n  };\r\n  \r\n  // Handle export to Excel\r\n  const handleExportExcel = () => {\r\n    if (selectedProduct && activeScenario) {\r\n      const { baseline, scenario } = generateProjectedData();\r\n      exportScenarioComparison(\r\n        selectedProduct, \r\n        baseline, \r\n        scenario, \r\n        activeScenario.name\r\n      );\r\n    }\r\n  };\r\n  \r\n  // Render the product selector\r\n  const renderProductSelector = () => (\r\n    <div className=\"mb-6\">\r\n      <Label htmlFor=\"product-select\" className=\"text-sm font-medium\">\r\n        Select Product\r\n      </Label>\r\n      <Select \r\n        onValueChange={(value: string) => handleProductChange(value)}\r\n        value={selectedProductId || ''}\r\n      >\r\n        <SelectTrigger id=\"product-select\" className=\"w-full\">\r\n          <SelectValue placeholder=\"Select a product\" />\r\n        </SelectTrigger>\r\n        <SelectContent>\r\n          {productOptions.map(option => (\r\n            <SelectItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </SelectItem>\r\n          ))}\r\n        </SelectContent>\r\n      </Select>\r\n    </div>\r\n  );\r\n  \r\n  // Render the scenario list\r\n  const renderScenarioList = () => (\r\n    <div className=\"space-y-2 mb-4\">\r\n      {productScenarios.map(scenario => (\r\n        <Button \r\n          key={scenario.id}\r\n          variant={scenario.id === activeScenarioId ? \"default\" : \"outline\"} \r\n          className=\"w-full justify-between\"\r\n          onClick={() => setActiveScenarioId(scenario.id)}\r\n        >\r\n          <span>{scenario.name}</span>\r\n          {scenario.id === activeScenarioId && (\r\n            <span className=\"rounded-full bg-primary-foreground h-2 w-2\"></span>\r\n          )}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n  // Render the revenue sliders\r\n  const renderRevenueSliders = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Revenue Adjustments</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-6\">\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"ticket-revenue\">Ticket Revenue</Label>\r\n              <span>{activeScenario?.modifiers.revenue.ticketRevenue}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"ticket-revenue\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.revenue.ticketRevenue || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('revenue', 'ticketRevenue', value[0])}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"fb-revenue\">F&B Revenue</Label>\r\n              <span>{activeScenario?.modifiers.revenue.fbRevenue}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"fb-revenue\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.revenue.fbRevenue || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('revenue', 'fbRevenue', value[0])}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"merch-revenue\">Merchandise Revenue</Label>\r\n              <span>{activeScenario?.modifiers.revenue.merchandiseRevenue}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"merch-revenue\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.revenue.merchandiseRevenue || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('revenue', 'merchandiseRevenue', value[0])}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"digital-revenue\">Digital Revenue</Label>\r\n              <span>{activeScenario?.modifiers.revenue.digitalRevenue}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"digital-revenue\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.revenue.digitalRevenue || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('revenue', 'digitalRevenue', value[0])}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n  \r\n  // Render the cost sliders\r\n  const renderCostSliders = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Cost Adjustments</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-6\">\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"marketing-cost\">Marketing</Label>\r\n              <span>{activeScenario?.modifiers.costs.marketingCost}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"marketing-cost\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.costs.marketingCost || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('costs', 'marketingCost', value[0])}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"staffing-cost\">Staffing</Label>\r\n              <span>{activeScenario?.modifiers.costs.staffingCost}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"staffing-cost\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.costs.staffingCost || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('costs', 'staffingCost', value[0])}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"event-cost\">Event</Label>\r\n              <span>{activeScenario?.modifiers.costs.eventCost}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"event-cost\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.costs.eventCost || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('costs', 'eventCost', value[0])}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <Label htmlFor=\"setup-cost\">Setup</Label>\r\n              <span>{activeScenario?.modifiers.costs.setupCost}%</span>\r\n            </div>\r\n            <Slider \r\n              id=\"setup-cost\"\r\n              min={-100}\r\n              max={100}\r\n              step={1}\r\n              value={[activeScenario?.modifiers.costs.setupCost || 0]}\r\n              onValueChange={(value: number[]) => updateModifier('costs', 'setupCost', value[0])}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n  \r\n  // Render the attendance slider\r\n  const renderAttendanceSlider = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Attendance Adjustments</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex justify-between\">\r\n            <Label htmlFor=\"foot-traffic\">Foot Traffic</Label>\r\n            <span>{activeScenario?.modifiers.attendance}%</span>\r\n          </div>\r\n          <Slider \r\n            id=\"foot-traffic\"\r\n            min={-100}\r\n            max={100}\r\n            step={1}\r\n            value={[activeScenario?.modifiers.attendance || 0]}\r\n            onValueChange={(value: number[]) => updateModifier('attendance', null, value[0])}\r\n          />\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n  \r\n  // Format currency\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(value);\r\n  };\r\n  \r\n  // Format percentage\r\n  const formatPercentage = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'percent',\r\n      minimumFractionDigits: 1,\r\n      maximumFractionDigits: 1\r\n    }).format(value / 100);\r\n  };\r\n  \r\n  // Get summary for display\r\n  const summary = generateChartData().summaryData;\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Product-Based Scenario Modeling</CardTitle>\r\n          <CardDescription>\r\n            Create scenarios by modifying baseline product forecasts\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Product Selector */}\r\n          {renderProductSelector()}\r\n          \r\n          {/* Only show content if a product is selected */}\r\n          {selectedProductId && (\r\n            <>\r\n              {/* Scenario Navigator */}\r\n              <div className=\"mb-6 flex items-center space-x-2\">\r\n                <div className=\"flex-1\">\r\n                  <Label htmlFor=\"scenario-select\">Scenario</Label>\r\n                  {renderScenarioList()}\r\n                </div>\r\n                <div className=\"flex space-x-2 pt-6\">\r\n                  <Button onClick={createNewScenario} variant=\"outline\" size=\"sm\">New</Button>\r\n                  <Button onClick={duplicateScenario} variant=\"outline\" size=\"sm\">Duplicate</Button>\r\n                  <Button \r\n                    onClick={deleteScenario} \r\n                    variant=\"outline\" \r\n                    size=\"sm\"\r\n                    disabled={productScenarios.length <= 1}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Scenario Name Editor */}\r\n              {activeScenario && (\r\n                <div className=\"mb-6\">\r\n                  {isEditingName ? (\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Input\r\n                        value={newScenarioName}\r\n                        onChange={(e) => setNewScenarioName(e.target.value)}\r\n                        className=\"flex-1\"\r\n                      />\r\n                      <Button onClick={saveScenarioName} size=\"sm\">Save</Button>\r\n                      <Button onClick={() => setIsEditingName(false)} variant=\"outline\" size=\"sm\">Cancel</Button>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <h3 className=\"text-lg font-medium\">{activeScenario.name}</h3>\r\n                      <Button onClick={startEditingName} variant=\"ghost\" size=\"sm\">Edit Name</Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n              \r\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n                <TabsList className=\"mb-4\">\r\n                  <TabsTrigger value=\"editor\">Parameters</TabsTrigger>\r\n                  <TabsTrigger value=\"results\">Results</TabsTrigger>\r\n                </TabsList>\r\n                \r\n                {activeScenario && (\r\n                  <>\r\n                    <TabsContent value=\"editor\">\r\n                      {/* Parameter Controls */}\r\n                      <div className=\"space-y-6\">\r\n                        {renderRevenueSliders()}\r\n                        {renderCostSliders()}\r\n                        {renderAttendanceSlider()}\r\n                      </div>\r\n                    </TabsContent>\r\n                    \r\n                    <TabsContent value=\"results\">\r\n                      {/* Summary Section */}\r\n                      <div className=\"mb-8 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                        <Card>\r\n                          <CardHeader className=\"pb-2\">\r\n                            <CardTitle className=\"text-base\">Revenue</CardTitle>\r\n                          </CardHeader>\r\n                          <CardContent>\r\n                            <div className=\"space-y-2\">\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Baseline:</span>\r\n                                <span className=\"font-medium\">{formatCurrency(summary.totalBaselineRevenue)}</span>\r\n                              </div>\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Scenario:</span>\r\n                                <span className=\"font-medium\">{formatCurrency(summary.totalScenarioRevenue)}</span>\r\n                              </div>\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Difference:</span>\r\n                                <span className={`font-medium ${summary.revenueDifference >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                                  {formatCurrency(summary.revenueDifference)} ({formatPercentage(summary.revenuePercentChange)})\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </CardContent>\r\n                        </Card>\r\n                        \r\n                        <Card>\r\n                          <CardHeader className=\"pb-2\">\r\n                            <CardTitle className=\"text-base\">Profit</CardTitle>\r\n                          </CardHeader>\r\n                          <CardContent>\r\n                            <div className=\"space-y-2\">\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Baseline:</span>\r\n                                <span className=\"font-medium\">{formatCurrency(summary.totalBaselineProfit)}</span>\r\n                              </div>\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Scenario:</span>\r\n                                <span className=\"font-medium\">{formatCurrency(summary.totalScenarioProfit)}</span>\r\n                              </div>\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Difference:</span>\r\n                                <span className={`font-medium ${summary.profitDifference >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                                  {formatCurrency(summary.profitDifference)} ({formatPercentage(summary.profitPercentChange)})\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </CardContent>\r\n                        </Card>\r\n                        \r\n                        <Card>\r\n                          <CardHeader className=\"pb-2\">\r\n                            <CardTitle className=\"text-base\">Attendance</CardTitle>\r\n                          </CardHeader>\r\n                          <CardContent>\r\n                            <div className=\"space-y-2\">\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Baseline:</span>\r\n                                <span className=\"font-medium\">\r\n                                  {summary.totalBaselineAttendance.toLocaleString()}\r\n                                </span>\r\n                              </div>\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Scenario:</span>\r\n                                <span className=\"font-medium\">\r\n                                  {summary.totalScenarioAttendance.toLocaleString()}\r\n                                </span>\r\n                              </div>\r\n                              <div className=\"flex justify-between\">\r\n                                <span>Difference:</span>\r\n                                <span className={`font-medium ${summary.attendanceDifference >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                                  {summary.attendanceDifference.toLocaleString()} ({formatPercentage(summary.attendancePercentChange)})\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </CardContent>\r\n                        </Card>\r\n                      </div>\r\n                      \r\n                      {/* Revenue Chart */}\r\n                      <div className=\"mb-8\">\r\n                        <h3 className=\"font-medium mb-4\">Revenue Comparison</h3>\r\n                        <div className=\"h-64\">\r\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                            <BarChart data={generateChartData().chartData}>\r\n                              <CartesianGrid strokeDasharray=\"3 3\" />\r\n                              <XAxis dataKey=\"week\" />\r\n                              <YAxis tickFormatter={(value) => `$${value / 1000}K`} />\r\n                              <Tooltip \r\n                                formatter={(value) => [`$${Number(value).toLocaleString()}`, '']}\r\n                                labelFormatter={(label) => label}\r\n                              />\r\n                              <Legend />\r\n                              <Bar dataKey=\"baselineRevenue\" name=\"Baseline Revenue\" fill=\"#8884d8\" />\r\n                              <Bar dataKey=\"scenarioRevenue\" name=\"Scenario Revenue\" fill=\"#4ade80\" />\r\n                            </BarChart>\r\n                          </ResponsiveContainer>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Profit Chart */}\r\n                      <div className=\"mb-8\">\r\n                        <h3 className=\"font-medium mb-4\">Profit Comparison</h3>\r\n                        <div className=\"h-64\">\r\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                            <LineChart data={generateChartData().chartData}>\r\n                              <CartesianGrid strokeDasharray=\"3 3\" />\r\n                              <XAxis dataKey=\"week\" />\r\n                              <YAxis tickFormatter={(value) => `$${value / 1000}K`} />\r\n                              <Tooltip \r\n                                formatter={(value) => [`$${Number(value).toLocaleString()}`, '']}\r\n                                labelFormatter={(label) => label}\r\n                              />\r\n                              <Legend />\r\n                              <Line \r\n                                type=\"monotone\" \r\n                                dataKey=\"baselineProfit\" \r\n                                name=\"Baseline Profit\" \r\n                                stroke=\"#8884d8\" \r\n                                activeDot={{ r: 8 }} \r\n                              />\r\n                              <Line \r\n                                type=\"monotone\" \r\n                                dataKey=\"scenarioProfit\" \r\n                                name=\"Scenario Profit\" \r\n                                stroke=\"#4ade80\" \r\n                                activeDot={{ r: 8 }} \r\n                              />\r\n                            </LineChart>\r\n                          </ResponsiveContainer>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Attendance Chart */}\r\n                      <div>\r\n                        <h3 className=\"font-medium mb-4\">Attendance Comparison</h3>\r\n                        <div className=\"h-64\">\r\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                            <BarChart data={generateChartData().chartData}>\r\n                              <CartesianGrid strokeDasharray=\"3 3\" />\r\n                              <XAxis dataKey=\"week\" />\r\n                              <YAxis />\r\n                              <Tooltip \r\n                                formatter={(value) => [Number(value).toLocaleString(), '']}\r\n                                labelFormatter={(label) => label}\r\n                              />\r\n                              <Legend />\r\n                              <Bar dataKey=\"baselineAttendance\" name=\"Baseline Attendance\" fill=\"#8884d8\" />\r\n                              <Bar dataKey=\"scenarioAttendance\" name=\"Scenario Attendance\" fill=\"#4ade80\" />\r\n                            </BarChart>\r\n                          </ResponsiveContainer>\r\n                        </div>\r\n                      </div>\r\n                    </TabsContent>\r\n                  </>\r\n                )}\r\n              </Tabs>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n        <CardFooter>\r\n          <div className=\"flex justify-between w-full\">\r\n            <Button variant=\"outline\" onClick={() => setSelectedProductId(null)}>\r\n              Back\r\n            </Button>\r\n            <Button onClick={handleExportExcel} disabled={!selectedProductId || !activeScenario}>\r\n              Export Comparison\r\n            </Button>\r\n          </div>\r\n        </CardFooter>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductScenario; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\RecentlyViewedContainer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useStore' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { RecentlyViewed } from './ui/recently-viewed';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport useStore from '../store/useStore';\r\n\r\ninterface RecentlyViewedContainerProps {\r\n  onNavigateToProduct: (productId: string) => void;\r\n}\r\n\r\nexport default function RecentlyViewedContainer({ onNavigateToProduct }: RecentlyViewedContainerProps) {\r\n  return (\r\n    <Card className=\"mt-6 shadow-md\">\r\n      <CardHeader>\r\n        <CardTitle>Recently Viewed Products</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <RecentlyViewed onNavigate={onNavigateToProduct} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\RiskAssessment.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChangeEvent' is defined but never used.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormEvent' is defined but never used.","line":1,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Product' is defined but never used.","line":12,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":14,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleLikelihoodChange' is assigned a value but never used.","line":55,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleImpactChange' is assigned a value but never used.","line":59,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleStatusChange' is assigned a value but never used.","line":63,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleTypeChange' is assigned a value but never used.","line":67,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFilterTypeChange' is assigned a value but never used.","line":71,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFilterStatusChange' is assigned a value but never used.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFilterLikelihoodChange' is assigned a value but never used.","line":79,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFilterImpactChange' is assigned a value but never used.","line":84,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFinancialImpactChange' is assigned a value but never used.","line":89,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, ChangeEvent, FormEvent } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Button } from './ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { PlusCircle, Pencil, Trash2, Save, X, AlertTriangle, Filter, BarChart } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency } from '../lib/utils';\r\nimport type { Product, RiskAssessment as RiskAssessmentType, LikelihoodLevel, ImpactLevel, StatusOption } from '../types';\r\nimport { RISK_TYPES, LIKELIHOOD_LEVELS, IMPACT_LEVELS, STATUS_OPTIONS } from '../types';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\nimport RiskMatrix from './RiskMatrix';\r\n\r\nfunction RiskAssessment() {\r\n  const { products, currentProductId, addRiskAssessment, updateRiskAssessment, deleteRiskAssessment } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n\r\n  const [showNewRisk, setShowNewRisk] = useState(false);\r\n  const [editingRiskId, setEditingRiskId] = useState<string | null>(null);\r\n  const [filterType, setFilterType] = useState<string | null>(null);\r\n  const [filterStatus, setFilterStatus] = useState<string | null>(null);\r\n  const [viewMode, setViewMode] = useState<'table' | 'matrix'>('table');\r\n  const [filteredLikelihood, setFilteredLikelihood] = useState<LikelihoodLevel | null>(null);\r\n  const [filteredImpact, setFilteredImpact] = useState<ImpactLevel | null>(null);\r\n  const [formData, setFormData] = useState<Partial<RiskAssessmentType>>({\r\n    type: 'Revenue',\r\n    description: '',\r\n    likelihood: 'Low',\r\n    impact: 'Low',\r\n    financialImpact: 0,\r\n    mitigationStrategy: '',\r\n    owner: '',\r\n    status: 'Open',\r\n    riskScore: 1 // Default score (low likelihood * low impact)\r\n  });\r\n\r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleInputChange = (field: keyof RiskAssessmentType, value: string | number) => {\r\n    setFormData((prev: Partial<RiskAssessmentType>) => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleLikelihoodChange = (value: string) => {\r\n    handleInputChange('likelihood', value as LikelihoodLevel);\r\n  };\r\n\r\n  const handleImpactChange = (value: string) => {\r\n    handleInputChange('impact', value as ImpactLevel);\r\n  };\r\n\r\n  const handleStatusChange = (value: string) => {\r\n    handleInputChange('status', value as StatusOption);\r\n  };\r\n\r\n  const handleTypeChange = (value: string) => {\r\n    handleInputChange('type', value);\r\n  };\r\n\r\n  const handleFilterTypeChange = (value: string | null) => {\r\n    setFilterType(value);\r\n  };\r\n\r\n  const handleFilterStatusChange = (value: string | null) => {\r\n    setFilterStatus(value);\r\n  };\r\n\r\n  const handleFilterLikelihoodChange = (e: React.SyntheticEvent<HTMLSelectElement>) => {\r\n    const target = e.target as HTMLSelectElement;\r\n    setFilteredLikelihood(target.value === 'All' ? null : target.value as LikelihoodLevel);\r\n  };\r\n\r\n  const handleFilterImpactChange = (e: React.SyntheticEvent<HTMLSelectElement>) => {\r\n    const target = e.target as HTMLSelectElement;\r\n    setFilteredImpact(target.value === 'All' ? null : target.value as ImpactLevel);\r\n  };\r\n\r\n  const handleFinancialImpactChange = (value: string) => {\r\n    handleInputChange('financialImpact', parseFloat(value) || 0);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (!currentProduct) return;\r\n\r\n    if (editingRiskId) {\r\n      // Update existing risk\r\n      updateRiskAssessment(\r\n        currentProduct.info.id,\r\n        editingRiskId,\r\n        formData as Partial<RiskAssessmentType>\r\n      );\r\n    } else {\r\n      // Add new risk\r\n      addRiskAssessment(\r\n        currentProduct.info.id,\r\n        formData as Omit<RiskAssessmentType, 'id'>\r\n      );\r\n    }\r\n\r\n    // Reset form\r\n    setShowNewRisk(false);\r\n    setEditingRiskId(null);\r\n    setFormData({\r\n      type: 'Revenue',\r\n      description: '',\r\n      likelihood: 'Low',\r\n      impact: 'Low',\r\n      financialImpact: 0,\r\n      mitigationStrategy: '',\r\n      owner: '',\r\n      status: 'Open',\r\n      riskScore: 1\r\n    });\r\n  };\r\n\r\n  const handleEdit = (risk: RiskAssessmentType) => {\r\n    setFormData({ ...risk });\r\n    setEditingRiskId(risk.id);\r\n    setShowNewRisk(true);\r\n  };\r\n\r\n  const handleDelete = (riskId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this risk?')) {\r\n      deleteRiskAssessment(currentProduct.info.id, riskId);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowNewRisk(false);\r\n    setEditingRiskId(null);\r\n    setFormData({\r\n      type: 'Revenue',\r\n      description: '',\r\n      likelihood: 'Low',\r\n      impact: 'Low',\r\n      financialImpact: 0,\r\n      mitigationStrategy: '',\r\n      owner: '',\r\n      status: 'Open',\r\n      riskScore: 1\r\n    });\r\n  };\r\n\r\n  // Filter risks based on selected filters\r\n  const filteredRisks = currentProduct.risks.filter(risk => {\r\n    // Apply type filter\r\n    if (filterType && risk.type !== filterType) return false;\r\n    \r\n    // Apply status filter\r\n    if (filterStatus && risk.status !== filterStatus) return false;\r\n    \r\n    // Apply matrix cell filter if selected\r\n    if (filteredLikelihood && filteredImpact) {\r\n      if (risk.likelihood !== filteredLikelihood || risk.impact !== filteredImpact) return false;\r\n    }\r\n    \r\n    return true;\r\n  });\r\n\r\n  const handleMatrixCellClick = (likelihood: LikelihoodLevel, impact: ImpactLevel) => {\r\n    setFilteredLikelihood(likelihood);\r\n    setFilteredImpact(impact);\r\n    setViewMode('table');\r\n  };\r\n\r\n  // Calculate risk metrics\r\n  const totalRisks = currentProduct.risks.length;\r\n  const highRisks = currentProduct.risks.filter(r => r.riskScore >= 6).length;\r\n  const mediumRisks = currentProduct.risks.filter(r => r.riskScore >= 3 && r.riskScore < 6).length;\r\n  const lowRisks = currentProduct.risks.filter(r => r.riskScore < 3).length;\r\n  \r\n  const totalFinancialImpact = currentProduct.risks.reduce((sum, risk) => sum + risk.financialImpact, 0);\r\n  const highRiskFinancialImpact = currentProduct.risks\r\n    .filter(r => r.riskScore >= 6)\r\n    .reduce((sum, risk) => sum + risk.financialImpact, 0);\r\n\r\n  // Helper functions for risk scores\r\n  const getRiskScoreColor = (score: number) => {\r\n    if (score >= 6) return 'bg-red-100 text-red-800';\r\n    if (score >= 3) return 'bg-amber-100 text-amber-800';\r\n    return 'bg-green-100 text-green-800';\r\n  };\r\n\r\n  const getRiskScoreText = (score: number) => {\r\n    if (score >= 6) return 'High';\r\n    if (score >= 3) return 'Medium';\r\n    return 'Low';\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-6\">\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between bg-slate-50\">\r\n          <CardTitle>Risk Assessment</CardTitle>\r\n          <div className=\"flex space-x-2\">\r\n            <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'table' | 'matrix')}>\r\n              <TabsList>\r\n                <TabsTrigger value=\"table\" className=\"flex items-center\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  Table View\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"matrix\" className=\"flex items-center\">\r\n                  <BarChart className=\"h-4 w-4 mr-2\" />\r\n                  Risk Matrix\r\n                </TabsTrigger>\r\n              </TabsList>\r\n            </Tabs>\r\n            \r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setShowNewRisk(true);\r\n                setEditingRiskId(null);\r\n                setFormData({\r\n                  type: 'Revenue',\r\n                  description: '',\r\n                  likelihood: 'Low',\r\n                  impact: 'Low',\r\n                  financialImpact: 0,\r\n                  mitigationStrategy: '',\r\n                  owner: '',\r\n                  status: 'Open',\r\n                  riskScore: 1\r\n                });\r\n              }}\r\n            >\r\n              <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n              New Risk\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-6\">\r\n            {/* Filter controls */}\r\n            <div className=\"flex flex-wrap gap-4 bg-slate-50 p-4 rounded-lg\">\r\n              <div className=\"w-full md:w-auto\">\r\n                <Label htmlFor=\"filterType\">Filter by Type</Label>\r\n                <Select \r\n                  value={filterType || 'all'} \r\n                  onValueChange={(value) => setFilterType(value === 'all' ? null : value)}\r\n                >\r\n                  <SelectTrigger className=\"w-[200px]\">\r\n                    <SelectValue placeholder=\"All Types\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Types</SelectItem>\r\n                    {RISK_TYPES.map(type => (\r\n                      <SelectItem key={type} value={type}>{type}</SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              \r\n              <div className=\"w-full md:w-auto\">\r\n                <Label htmlFor=\"filterStatus\">Filter by Status</Label>\r\n                <Select \r\n                  value={filterStatus || 'all'} \r\n                  onValueChange={(value) => setFilterStatus(value === 'all' ? null : value)}\r\n                >\r\n                  <SelectTrigger className=\"w-[200px]\">\r\n                    <SelectValue placeholder=\"All Statuses\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\r\n                    {STATUS_OPTIONS.map(status => (\r\n                      <SelectItem key={status} value={status}>{status}</SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              \r\n              <div className=\"w-full md:w-auto flex items-end\">\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => {\r\n                    setFilterType(null);\r\n                    setFilterStatus(null);\r\n                    setFilteredLikelihood(null);\r\n                    setFilteredImpact(null);\r\n                  }}\r\n                >\r\n                  Clear Filters\r\n                </Button>\r\n              </div>\r\n              \r\n              {/* Show active matrix filter if any */}\r\n              {filteredLikelihood && filteredImpact && (\r\n                <div className=\"w-full flex items-center mt-2\">\r\n                  <span className=\"text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded-full flex items-center\">\r\n                    Filtered by: {filteredLikelihood} Likelihood + {filteredImpact} Impact\r\n                    <Button\r\n                      variant=\"ghost\" \r\n                      size=\"sm\" \r\n                      className=\"ml-2 h-5 w-5 p-0\"\r\n                      onClick={() => {\r\n                        setFilteredLikelihood(null);\r\n                        setFilteredImpact(null);\r\n                      }}\r\n                    >\r\n                      <X className=\"h-3 w-3\" />\r\n                    </Button>\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Conditional rendering based on view mode */}\r\n            {viewMode === 'matrix' ? (\r\n              <RiskMatrix \r\n                risks={currentProduct.risks} \r\n                onSelectCell={handleMatrixCellClick} \r\n              />\r\n            ) : (\r\n              <>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <Card>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium\">Total Risks</CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{totalRisks}</div>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        across {Object.keys(RISK_TYPES).length} categories\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n                  \r\n                  <Card>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium\">High Risks</CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold text-red-600\">\r\n                        {highRisks}\r\n                        <span className=\"text-sm font-normal text-muted-foreground ml-2\">\r\n                          ({totalRisks > 0 ? Math.round((highRisks / totalRisks) * 100) : 0}%)\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        {highRisks > 0 ? 'requiring immediate attention' : 'no high risks detected'}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n                  \r\n                  <Card>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium\">Risk Distribution</CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"bg-red-100 h-2 rounded-full\" style={{ width: `${totalRisks > 0 ? (highRisks / totalRisks) * 100 : 0}%` }}></div>\r\n                        <div className=\"bg-amber-100 h-2 rounded-full\" style={{ width: `${totalRisks > 0 ? (mediumRisks / totalRisks) * 100 : 0}%` }}></div>\r\n                        <div className=\"bg-green-100 h-2 rounded-full\" style={{ width: `${totalRisks > 0 ? (lowRisks / totalRisks) * 100 : 0}%` }}></div>\r\n                      </div>\r\n                      <div className=\"flex justify-between text-xs text-muted-foreground mt-2\">\r\n                        <span>High: {highRisks}</span>\r\n                        <span>Medium: {mediumRisks}</span>\r\n                        <span>Low: {lowRisks}</span>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                  \r\n                  <Card>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium\">Financial Impact</CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{formatCurrency(totalFinancialImpact)}</div>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        {formatCurrency(highRiskFinancialImpact)} from high risk items\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n\r\n                {/* Show form for adding/editing risks */}\r\n                {showNewRisk && (\r\n                  <div className=\"border rounded-lg p-4 mb-4 bg-white\">\r\n                    <h3 className=\"text-lg font-medium mb-4\">\r\n                      {editingRiskId ? 'Edit Risk' : 'Add New Risk'}\r\n                    </h3>\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"risk-type\">Risk Type</Label>\r\n                        <Select\r\n                          value={formData.type as string}\r\n                          onValueChange={(value) => handleInputChange('type', value)}\r\n                        >\r\n                          <SelectTrigger id=\"risk-type\">\r\n                            <SelectValue placeholder=\"Select risk type\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {RISK_TYPES.map(type => (\r\n                              <SelectItem key={type} value={type}>{type}</SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      \r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"risk-owner\">Risk Owner</Label>\r\n                        <Input\r\n                          id=\"risk-owner\"\r\n                          value={formData.owner || ''}\r\n                          onChange={(e) => handleInputChange('owner', e.target.value)}\r\n                          placeholder=\"Who is responsible for this risk?\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-2 mb-4\">\r\n                      <Label htmlFor=\"risk-description\">Description</Label>\r\n                      <Textarea\r\n                        id=\"risk-description\"\r\n                        value={formData.description || ''}\r\n                        onChange={(e) => handleInputChange('description', e.target.value)}\r\n                        placeholder=\"Describe the risk...\"\r\n                        rows={3}\r\n                      />\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"risk-likelihood\">Likelihood</Label>\r\n                        <Select\r\n                          value={formData.likelihood as string}\r\n                          onValueChange={(value) => handleInputChange('likelihood', value)}\r\n                        >\r\n                          <SelectTrigger id=\"risk-likelihood\">\r\n                            <SelectValue placeholder=\"Select likelihood\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {LIKELIHOOD_LEVELS.map(level => (\r\n                              <SelectItem key={level} value={level}>{level}</SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      \r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"risk-impact\">Impact</Label>\r\n                        <Select\r\n                          value={formData.impact as string}\r\n                          onValueChange={(value) => handleInputChange('impact', value)}\r\n                        >\r\n                          <SelectTrigger id=\"risk-impact\">\r\n                            <SelectValue placeholder=\"Select impact\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {IMPACT_LEVELS.map(level => (\r\n                              <SelectItem key={level} value={level}>{level}</SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      \r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"financial-impact\">Financial Impact ($)</Label>\r\n                        <Input\r\n                          id=\"financial-impact\"\r\n                          type=\"number\"\r\n                          value={formData.financialImpact || 0}\r\n                          onChange={(e) => handleInputChange('financialImpact', parseFloat(e.target.value))}\r\n                          placeholder=\"0.00\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"risk-mitigation\">Mitigation Strategy</Label>\r\n                        <Textarea\r\n                          id=\"risk-mitigation\"\r\n                          value={formData.mitigationStrategy || ''}\r\n                          onChange={(e) => handleInputChange('mitigationStrategy', e.target.value)}\r\n                          placeholder=\"How will this risk be mitigated?\"\r\n                          rows={3}\r\n                        />\r\n                      </div>\r\n                      \r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"risk-status\">Status</Label>\r\n                        <Select\r\n                          value={formData.status as string}\r\n                          onValueChange={(value) => handleInputChange('status', value)}\r\n                        >\r\n                          <SelectTrigger id=\"risk-status\">\r\n                            <SelectValue placeholder=\"Select status\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {STATUS_OPTIONS.map(status => (\r\n                              <SelectItem key={status} value={status}>{status}</SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        \r\n                        <div className=\"mt-6 flex items-center\">\r\n                          <div className=\"text-sm mr-2\">Risk Score:</div>\r\n                          <div className={`px-2 py-1 rounded text-xs font-medium ${\r\n                            getRiskScoreColor(\r\n                              (formData.likelihood === 'Low' ? 1 : formData.likelihood === 'Medium' ? 2 : 3) * \r\n                              (formData.impact === 'Low' ? 1 : formData.impact === 'Medium' ? 2 : 3)\r\n                            )\r\n                          }`}>\r\n                            {getRiskScoreText(\r\n                              (formData.likelihood === 'Low' ? 1 : formData.likelihood === 'Medium' ? 2 : 3) * \r\n                              (formData.impact === 'Low' ? 1 : formData.impact === 'Medium' ? 2 : 3)\r\n                            )}\r\n                            {' '}\r\n                            ({(formData.likelihood === 'Low' ? 1 : formData.likelihood === 'Medium' ? 2 : 3) * \r\n                            (formData.impact === 'Low' ? 1 : formData.impact === 'Medium' ? 2 : 3)})\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex justify-end space-x-2\">\r\n                      <Button variant=\"outline\" onClick={handleCancel}>\r\n                        <X className=\"h-4 w-4 mr-2\" />\r\n                        Cancel\r\n                      </Button>\r\n                      <Button onClick={handleSave}>\r\n                        <Save className=\"h-4 w-4 mr-2\" />\r\n                        {editingRiskId ? 'Update Risk' : 'Add Risk'}\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Table of risks */}\r\n                {filteredRisks.length === 0 ? (\r\n                  <div className=\"text-center py-8 bg-white rounded-lg border\">\r\n                    <AlertTriangle className=\"h-8 w-8 text-amber-500 mx-auto mb-2\" />\r\n                    <h3 className=\"text-lg font-medium\">No risks found</h3>\r\n                    <p className=\"text-muted-foreground\">\r\n                      {currentProduct.risks.length === 0 \r\n                        ? 'Start by adding a risk assessment for this product.' \r\n                        : 'Adjust your filters to see more results.'}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"bg-white rounded-lg border overflow-hidden\">\r\n                    <Table>\r\n                      <TableHeader>\r\n                        <TableRow>\r\n                          <TableHead>Risk</TableHead>\r\n                          <TableHead>Type</TableHead>\r\n                          <TableHead>Owner</TableHead>\r\n                          <TableHead>Likelihood</TableHead>\r\n                          <TableHead>Impact</TableHead>\r\n                          <TableHead>Score</TableHead>\r\n                          <TableHead>Status</TableHead>\r\n                          <TableHead>Financial Impact</TableHead>\r\n                          <TableHead className=\"text-right\">Actions</TableHead>\r\n                        </TableRow>\r\n                      </TableHeader>\r\n                      <TableBody>\r\n                        {filteredRisks.map(risk => (\r\n                          <TableRow key={risk.id}>\r\n                            <TableCell className=\"font-medium max-w-[200px] truncate\">\r\n                              {risk.description}\r\n                            </TableCell>\r\n                            <TableCell>{risk.type}</TableCell>\r\n                            <TableCell>{risk.owner}</TableCell>\r\n                            <TableCell>{risk.likelihood}</TableCell>\r\n                            <TableCell>{risk.impact}</TableCell>\r\n                            <TableCell>\r\n                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                                getRiskScoreColor(risk.riskScore)\r\n                              }`}>\r\n                                {risk.riskScore}\r\n                              </span>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                                risk.status === 'Open' \r\n                                  ? 'bg-blue-100 text-blue-800'\r\n                                  : risk.status === 'Mitigated'\r\n                                    ? 'bg-green-100 text-green-800'\r\n                                    : risk.status === 'Closed'\r\n                                      ? 'bg-gray-100 text-gray-800'\r\n                                      : 'bg-purple-100 text-purple-800'\r\n                              }`}>\r\n                                {risk.status}\r\n                              </span>\r\n                            </TableCell>\r\n                            <TableCell>{formatCurrency(risk.financialImpact)}</TableCell>\r\n                            <TableCell className=\"text-right\">\r\n                              <div className=\"flex justify-end space-x-2\">\r\n                                <Button \r\n                                  variant=\"ghost\" \r\n                                  size=\"sm\" \r\n                                  onClick={() => handleEdit(risk)}\r\n                                >\r\n                                  <Pencil className=\"h-4 w-4\" />\r\n                                </Button>\r\n                                <Button \r\n                                  variant=\"ghost\" \r\n                                  size=\"sm\"\r\n                                  onClick={() => handleDelete(risk.id)}\r\n                                >\r\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\r\n                                </Button>\r\n                              </div>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RiskAssessment;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\RiskMatrix.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Download } from 'lucide-react';\r\nimport type { RiskAssessment, LikelihoodLevel, ImpactLevel } from '../types';\r\nimport { LIKELIHOOD_LEVELS, IMPACT_LEVELS } from '../types';\r\nimport { formatCurrency } from '../lib/utils';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { Badge } from './ui/badge';\r\n\r\ninterface RiskMatrixProps {\r\n  risks: RiskAssessment[];\r\n  onSelectCell: (likelihood: LikelihoodLevel, impact: ImpactLevel) => void;\r\n}\r\n\r\nconst RiskMatrix = ({ risks, onSelectCell }: RiskMatrixProps) => {\r\n  // Count risks by likelihood and impact\r\n  const riskCounts: Record<string, Record<string, RiskAssessment[]>> = {};\r\n  \r\n  // Initialize the structure\r\n  LIKELIHOOD_LEVELS.forEach(likelihood => {\r\n    riskCounts[likelihood] = {};\r\n    IMPACT_LEVELS.forEach(impact => {\r\n      riskCounts[likelihood][impact] = [];\r\n    });\r\n  });\r\n\r\n  // Populate the counts\r\n  risks.forEach((risk: RiskAssessment) => {\r\n    riskCounts[risk.likelihood][risk.impact].push(risk);\r\n  });\r\n\r\n  // Helper to get color based on risk score\r\n  const getScoreColor = (likelihood: LikelihoodLevel, impact: ImpactLevel) => {\r\n    const score = calculateRiskScore(likelihood, impact);\r\n    if (score >= 6) return 'bg-red-100 hover:bg-red-200';\r\n    if (score >= 3) return 'bg-amber-100 hover:bg-amber-200';\r\n    return 'bg-green-100 hover:bg-green-200';\r\n  };\r\n\r\n  // Helper to calculate risk score\r\n  const calculateRiskScore = (likelihood: LikelihoodLevel, impact: ImpactLevel): number => {\r\n    const likelihoodScore = likelihood === 'Low' ? 1 : likelihood === 'Medium' ? 2 : 3;\r\n    const impactScore = impact === 'Low' ? 1 : impact === 'Medium' ? 2 : 3;\r\n    return likelihoodScore * impactScore;\r\n  };\r\n\r\n  // Function to export risk matrix data\r\n  const exportRiskMatrix = () => {\r\n    if (!risks.length) return;\r\n\r\n    // Create CSV content\r\n    let csvContent = \"Risk Description,Type,Likelihood,Impact,Score,Financial Impact,Status,Owner,Mitigation Strategy\\n\";\r\n    \r\n    risks.forEach((risk: RiskAssessment) => {\r\n      const rowData = [\r\n        `\"${risk.description.replace(/\"/g, '\"\"')}\"`,\r\n        risk.type,\r\n        risk.likelihood,\r\n        risk.impact,\r\n        risk.riskScore,\r\n        risk.financialImpact,\r\n        risk.status,\r\n        `\"${risk.owner.replace(/\"/g, '\"\"')}\"`,\r\n        `\"${risk.mitigationStrategy.replace(/\"/g, '\"\"')}\"`\r\n      ];\r\n      csvContent += rowData.join(',') + '\\n';\r\n    });\r\n\r\n    // Create a download link\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', `Risk_Matrix_${new Date().toISOString().slice(0, 10)}.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  if (!risks.length) {\r\n    return (\r\n      <div className=\"text-center py-12 text-gray-500\">\r\n        No risks to display in the matrix. Add risks to visualize them.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"grid grid-cols-4 gap-4 mb-6\">\r\n        <div className=\"col-span-4\">\r\n          <div className=\"flex justify-between items-center mb-2\">\r\n            <h3 className=\"text-xl font-semibold\">Risk Priority Matrix</h3>\r\n            <Button variant=\"outline\" size=\"sm\" onClick={exportRiskMatrix}>\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export Matrix\r\n            </Button>\r\n          </div>\r\n          <p className=\"text-sm text-gray-500 mb-4\">\r\n            This matrix visualizes risks by likelihood and impact. Click on any cell to see the risks in that category.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-4 gap-2 mb-8\">\r\n        <div className=\"font-medium text-center\"></div>\r\n        {IMPACT_LEVELS.map(impact => (\r\n          <div key={`header-${impact}`} className=\"font-semibold text-center\">\r\n            {impact} Impact\r\n          </div>\r\n        ))}\r\n\r\n        {LIKELIHOOD_LEVELS.slice().reverse().map(likelihood => (\r\n          <div key={`row-${likelihood}`} className=\"contents\">\r\n            <div className=\"font-semibold text-right pr-4 flex items-center justify-end\">\r\n              {likelihood} <br/>Likelihood\r\n            </div>\r\n            \r\n            {IMPACT_LEVELS.map(impact => {\r\n              const cellRisks = riskCounts[likelihood][impact];\r\n              const score = calculateRiskScore(likelihood as LikelihoodLevel, impact as ImpactLevel);\r\n              \r\n              return (\r\n                <div \r\n                  key={`cell-${likelihood}-${impact}`}\r\n                  className={`p-4 rounded-lg ${getScoreColor(likelihood as LikelihoodLevel, impact as ImpactLevel)} cursor-pointer transition-all duration-200`}\r\n                  onClick={() => {\r\n                    if (cellRisks.length > 0) {\r\n                      onSelectCell(likelihood as LikelihoodLevel, impact as ImpactLevel);\r\n                    }\r\n                  }}\r\n                >\r\n                  <div className=\"text-center\">\r\n                    <div className=\"font-bold text-2xl mb-1\">{score}</div>\r\n                    <div className=\"text-sm font-medium mb-2\">Risk Score</div>\r\n                    <div className=\"text-xs font-medium bg-white bg-opacity-50 rounded-full px-2 py-1\">\r\n                      {cellRisks.length} {cellRisks.length === 1 ? 'Risk' : 'Risks'}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <h4 className=\"font-medium mb-2\">Legend</h4>\r\n        <div className=\"flex space-x-4\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-4 h-4 bg-green-100 rounded mr-2\"></div>\r\n            <span className=\"text-sm\">Low Risk (1-2)</span>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-4 h-4 bg-amber-100 rounded mr-2\"></div>\r\n            <span className=\"text-sm\">Medium Risk (3-4)</span>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-4 h-4 bg-red-100 rounded mr-2\"></div>\r\n            <span className=\"text-sm\">High Risk (6-9)</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Top Risks Section */}\r\n      <div className=\"mt-8\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">Top Risks by Score</h3>\r\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Risk</TableHead>\r\n                <TableHead>Type</TableHead>\r\n                <TableHead>Score</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Financial Impact</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {risks\r\n                .sort((a: RiskAssessment, b: RiskAssessment) => b.riskScore - a.riskScore)\r\n                .slice(0, 5)\r\n                .map((risk: RiskAssessment) => (\r\n                  <TableRow key={`top-${risk.id}`}>\r\n                    <TableCell className=\"font-medium\">{risk.description}</TableCell>\r\n                    <TableCell>{risk.type}</TableCell>\r\n                    <TableCell>\r\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                        risk.riskScore >= 6 \r\n                          ? 'bg-red-100 text-red-800' \r\n                          : risk.riskScore >= 3 \r\n                            ? 'bg-amber-100 text-amber-800' \r\n                            : 'bg-green-100 text-green-800'\r\n                      }`}>\r\n                        {risk.riskScore}\r\n                      </span>\r\n                    </TableCell>\r\n                    <TableCell>{risk.status}</TableCell>\r\n                    <TableCell>{formatCurrency(risk.financialImpact)}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RiskMatrix; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ScenarioModeling.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercent' is defined but never used.","line":13,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Button } from './ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { PlusCircle, Trash2, Save, PieChart, Edit, ChevronDown, ChevronUp, Plus, Copy, BarChart, ArrowUpDown } from 'lucide-react';\r\nimport { Slider } from './ui/slider';\r\nimport { PieChart as RechartsChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend, BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid } from 'recharts';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency, formatPercent } from '../lib/utils';\r\nimport type { Scenario, ScenarioParameter, VariableSensitivity } from '../types';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\r\n\r\n// Colors for the charts\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\r\nconst SCENARIO_TYPES = ['Base Case', 'Best Case', 'Worst Case', 'Custom'] as const;\r\n\r\nfunction ScenarioModelingComponent() {\r\n  const { products, currentProductId, addScenario, updateScenario, deleteScenario } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  const [activeView, setActiveView] = useState<'overview' | 'comparison' | 'sensitivity'>('overview');\r\n  const [showNewScenario, setShowNewScenario] = useState(false);\r\n  const [editingScenarioId, setEditingScenarioId] = useState<string | null>(null);\r\n  const [compareScenarioIds, setCompareScenarioIds] = useState<string[]>([]);\r\n  const [showParameterForm, setShowParameterForm] = useState(false);\r\n  const [showSensitivityForm, setShowSensitivityForm] = useState(false);\r\n  \r\n  const [formData, setFormData] = useState<Partial<Scenario>>({\r\n    name: '',\r\n    description: '',\r\n    type: 'Custom',\r\n    assumptions: [],\r\n    projectedRevenue: 0,\r\n    projectedCosts: 0,\r\n    projectedProfit: 0,\r\n    probabilityOfOccurrence: 50, // Default 50%\r\n    riskFactors: [],\r\n    parameters: [],\r\n    sensitivities: [],\r\n    notes: ''\r\n  });\r\n  \r\n  const [currentAssumption, setCurrentAssumption] = useState('');\r\n  const [currentRiskFactor, setCurrentRiskFactor] = useState('');\r\n  const [currentParameter, setCurrentParameter] = useState<Partial<ScenarioParameter>>({\r\n    name: '',\r\n    baseValue: 0,\r\n    adjustedValue: 0,\r\n    unit: '',\r\n    description: ''\r\n  });\r\n  const [currentSensitivity, setCurrentSensitivity] = useState<Partial<VariableSensitivity>>({\r\n    variable: '',\r\n    baseValue: 0,\r\n    lowValue: 0,\r\n    highValue: 0,\r\n    impact: 'Medium'\r\n  });\r\n  \r\n  useEffect(() => {\r\n    // Calculate projected profit when revenue or costs change\r\n    if (formData.projectedRevenue !== undefined && formData.projectedCosts !== undefined) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        projectedProfit: formData.projectedRevenue - formData.projectedCosts\r\n      }));\r\n    }\r\n  }, [formData.projectedRevenue, formData.projectedCosts]);\r\n  \r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  const scenarios = currentProduct.scenarios || [];\r\n  \r\n  const handleInputChange = (field: keyof Scenario, value: unknown) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n  \r\n  const handleAddAssumption = () => {\r\n    if (!currentAssumption.trim()) return;\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      assumptions: [...(prev.assumptions || []), currentAssumption.trim()]\r\n    }));\r\n    \r\n    setCurrentAssumption('');\r\n  };\r\n  \r\n  const handleRemoveAssumption = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      assumptions: prev.assumptions?.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n  \r\n  const handleAddRiskFactor = () => {\r\n    if (!currentRiskFactor.trim()) return;\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      riskFactors: [...(prev.riskFactors || []), currentRiskFactor.trim()]\r\n    }));\r\n    \r\n    setCurrentRiskFactor('');\r\n  };\r\n  \r\n  const handleRemoveRiskFactor = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      riskFactors: prev.riskFactors?.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n  \r\n  const handleParameterInputChange = (field: keyof ScenarioParameter, value: unknown) => {\r\n    setCurrentParameter(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n  \r\n  const handleAddParameter = () => {\r\n    if (!currentParameter.name) return;\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      parameters: [...(prev.parameters || []), currentParameter as ScenarioParameter]\r\n    }));\r\n    \r\n    setCurrentParameter({\r\n      name: '',\r\n      baseValue: 0,\r\n      adjustedValue: 0,\r\n      unit: '',\r\n      description: ''\r\n    });\r\n  };\r\n  \r\n  const handleRemoveParameter = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      parameters: prev.parameters?.filter((_, i) => i !== index) || []\r\n    }));\r\n  };\r\n  \r\n  const handleSensitivityInputChange = (field: keyof VariableSensitivity, value: unknown) => {\r\n    setCurrentSensitivity(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n  \r\n  const handleAddSensitivity = () => {\r\n    if (!currentSensitivity.variable) return;\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      sensitivities: [...(prev.sensitivities || []), currentSensitivity as VariableSensitivity]\r\n    }));\r\n    \r\n    setCurrentSensitivity({\r\n      variable: '',\r\n      baseValue: 0,\r\n      lowValue: 0,\r\n      highValue: 0,\r\n      impact: 'Medium'\r\n    });\r\n  };\r\n  \r\n  const handleRemoveSensitivity = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      sensitivities: prev.sensitivities?.filter((_, i) => i !== index) || []\r\n    }));\r\n  };\r\n  \r\n  const handleSave = () => {\r\n    if (!currentProduct || !formData.name || !formData.description) return;\r\n    \r\n    if (editingScenarioId) {\r\n      // Update existing scenario\r\n      updateScenario(\r\n        currentProduct.info.id,\r\n        editingScenarioId,\r\n        formData as Partial<Scenario>\r\n      );\r\n    } else {\r\n      // Add new scenario\r\n      addScenario(\r\n        currentProduct.info.id,\r\n        {\r\n          ...formData,\r\n          id: '', // This will be replaced with a UUID in the store\r\n          projectedProfit: (formData.projectedRevenue || 0) - (formData.projectedCosts || 0),\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        } as Omit<Scenario, 'id'>\r\n      );\r\n    }\r\n    \r\n    // Reset form\r\n    setFormData({\r\n      name: '',\r\n      description: '',\r\n      type: 'Custom',\r\n      assumptions: [],\r\n      projectedRevenue: 0,\r\n      projectedCosts: 0,\r\n      projectedProfit: 0,\r\n      probabilityOfOccurrence: 50,\r\n      riskFactors: [],\r\n      parameters: [],\r\n      sensitivities: [],\r\n      notes: ''\r\n    });\r\n    setShowNewScenario(false);\r\n    setEditingScenarioId(null);\r\n    setShowParameterForm(false);\r\n    setShowSensitivityForm(false);\r\n  };\r\n  \r\n  const handleEdit = (scenario: Scenario) => {\r\n    setFormData({ ...scenario });\r\n    setEditingScenarioId(scenario.id);\r\n    setShowNewScenario(true);\r\n  };\r\n  \r\n  const handleDelete = (scenario: Scenario) => {\r\n    if (window.confirm(`Are you sure you want to delete the scenario \"${scenario.name}\"?`)) {\r\n      deleteScenario(currentProduct.info.id, scenario.id);\r\n      // Also remove from comparison if selected\r\n      setCompareScenarioIds(prev => prev.filter(id => id !== scenario.id));\r\n    }\r\n  };\r\n  \r\n  const handleDuplicate = (scenario: Scenario) => {\r\n    addScenario(\r\n      currentProduct.info.id,\r\n      {\r\n        ...scenario,\r\n        id: '', // Will be replaced with a UUID\r\n        name: `${scenario.name} (Copy)`,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n    );\r\n  };\r\n  \r\n  const calculateTotalProbability = () => {\r\n    return scenarios.reduce((sum, scenario) => sum + (scenario.probabilityOfOccurrence || 0), 0);\r\n  };\r\n  \r\n  const toggleCompareScenario = (scenarioId: string) => {\r\n    setCompareScenarioIds(prev => \r\n      prev.includes(scenarioId)\r\n        ? prev.filter(id => id !== scenarioId)\r\n        : [...prev, scenarioId]\r\n    );\r\n  };\r\n  \r\n  // Function to get scenarios to compare\r\n  const getScenariosToCompare = () => {\r\n    if (compareScenarioIds.length === 0 && scenarios.length > 0) {\r\n      // If none selected, compare all scenarios (up to 4)\r\n      return scenarios.slice(0, 4);\r\n    }\r\n    return scenarios.filter(s => compareScenarioIds.includes(s.id));\r\n  };\r\n  \r\n  // Prepare data for charts\r\n  const totalProbability = calculateTotalProbability();\r\n  \r\n  // Probability chart data\r\n  const probabilityChartData = scenarios.map((scenario, index) => ({\r\n    name: scenario.name,\r\n    value: scenario.probabilityOfOccurrence,\r\n    color: COLORS[index % COLORS.length]\r\n  }));\r\n  \r\n  // Financial comparison chart data\r\n  const financialChartData = scenarios.map((scenario, index) => ({\r\n    name: scenario.name,\r\n    value: scenario.projectedProfit || (scenario.projectedRevenue - scenario.projectedCosts),\r\n    revenue: scenario.projectedRevenue,\r\n    costs: scenario.projectedCosts,\r\n    color: COLORS[index % COLORS.length]\r\n  }));\r\n  \r\n  // Comparison data for selected scenarios\r\n  const comparisonData = getScenariosToCompare();\r\n  const comparisonChartData = [\r\n    { name: 'Revenue', ...Object.fromEntries(comparisonData.map(s => [s.name, s.projectedRevenue])) },\r\n    { name: 'Costs', ...Object.fromEntries(comparisonData.map(s => [s.name, s.projectedCosts])) },\r\n    { name: 'Profit', ...Object.fromEntries(comparisonData.map(s => [s.name, s.projectedProfit || (s.projectedRevenue - s.projectedCosts)])) }\r\n  ];\r\n  \r\n  // Sensitivity analysis data\r\n  const sensitivityData = scenarios\r\n    .flatMap(s => (s.sensitivities || []).map(sensitivity => ({\r\n      scenario: s.name,\r\n      ...sensitivity,\r\n      range: sensitivity.highValue - sensitivity.lowValue,\r\n      color: COLORS[scenarios.indexOf(s) % COLORS.length]\r\n    })))\r\n    .sort((a, b) => b.range - a.range); // Sort by range size\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Tabs value={activeView} onValueChange={(value) => setActiveView(value as 'overview' | 'comparison' | 'sensitivity')}>\r\n        <TabsList className=\"mb-4\">\r\n          <TabsTrigger value=\"overview\" className=\"flex items-center\">\r\n            <PieChart className=\"h-4 w-4 mr-2\" />\r\n            Overview\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"comparison\" className=\"flex items-center\">\r\n            <BarChart className=\"h-4 w-4 mr-2\" />\r\n            Scenario Comparison\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"sensitivity\" className=\"flex items-center\">\r\n            <ArrowUpDown className=\"h-4 w-4 mr-2\" />\r\n            Sensitivity Analysis\r\n          </TabsTrigger>\r\n        </TabsList>\r\n        \r\n        <TabsContent value=\"overview\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {scenarios.length > 0 && (\r\n              <>\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle>Scenario Probability Distribution</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"h-80\">\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <RechartsChart>\r\n                          <Pie\r\n                            data={probabilityChartData}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            labelLine={false}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"value\"\r\n                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                          >\r\n                            {probabilityChartData.map((entry, index) => (\r\n                              <Cell key={`cell-${index}`} fill={entry.color} />\r\n                            ))}\r\n                          </Pie>\r\n                          <Tooltip formatter={(value) => `${value}%`} />\r\n                          <Legend />\r\n                        </RechartsChart>\r\n                      </ResponsiveContainer>\r\n                    </div>\r\n                    \r\n                    <div className=\"mt-2 text-center text-sm text-muted-foreground\">\r\n                      {totalProbability > 100 ? (\r\n                        <p className=\"text-red-500\">\r\n                          Warning: Total probability exceeds 100% ({totalProbability}%)\r\n                        </p>\r\n                      ) : totalProbability < 100 ? (\r\n                        <p className=\"text-yellow-500\">\r\n                          Note: Total probability is {totalProbability}% (ideally should sum to 100%)\r\n                        </p>\r\n                      ) : (\r\n                        <p className=\"text-green-500\">\r\n                          Total probability: 100%\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n                \r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle>Financial Outcomes by Scenario</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"h-80\">\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <RechartsChart>\r\n                          <Pie\r\n                            data={financialChartData}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            labelLine={false}\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            dataKey=\"value\"\r\n                            label={({ name, value }) => `${name}: ${formatCurrency(value)}`}\r\n                          >\r\n                            {financialChartData.map((entry, index) => (\r\n                              <Cell key={`cell-${index}`} fill={entry.color} />\r\n                            ))}\r\n                          </Pie>\r\n                          <Tooltip formatter={(value) => formatCurrency(value as number)} />\r\n                          <Legend />\r\n                        </RechartsChart>\r\n                      </ResponsiveContainer>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </>\r\n            )}\r\n          </div>\r\n        </TabsContent>\r\n        \r\n        <TabsContent value=\"comparison\">\r\n          {comparisonData.length > 0 ? (\r\n            <div className=\"space-y-6\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Scenario Comparison</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"h-96\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <RechartsBarChart\r\n                        data={comparisonChartData}\r\n                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip formatter={(value) => formatCurrency(value as number)} />\r\n                        <Legend />\r\n                        {comparisonData.map((scenario, index) => (\r\n                          <Bar \r\n                            key={scenario.id} \r\n                            dataKey={scenario.name} \r\n                            fill={COLORS[index % COLORS.length]} \r\n                          />\r\n                        ))}\r\n                      </RechartsBarChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n              \r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Detailed Comparison</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"overflow-x-auto\">\r\n                    <Table>\r\n                      <TableHeader>\r\n                        <TableRow>\r\n                          <TableHead className=\"w-[15%]\">Metric</TableHead>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableHead key={scenario.id}>{scenario.name}</TableHead>\r\n                          ))}\r\n                        </TableRow>\r\n                      </TableHeader>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Type</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell key={`type-${scenario.id}`}>{scenario.type}</TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Revenue</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell key={`revenue-${scenario.id}`}>{formatCurrency(scenario.revenue)}</TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Costs</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell key={`costs-${scenario.id}`}>{formatCurrency(scenario.costs)}</TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Profit</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell \r\n                              key={`profit-${scenario.id}`}\r\n                              className={\r\n                                (scenario.profit || (scenario.revenue - scenario.costs)) >= 0 \r\n                                  ? 'text-green-600' \r\n                                  : 'text-red-600'\r\n                              }\r\n                            >\r\n                              {formatCurrency(scenario.profit || (scenario.revenue - scenario.costs))}\r\n                            </TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Probability</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell key={`prob-${scenario.id}`}>{scenario.value}%</TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Assumptions</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell key={`assume-${scenario.id}`} className=\"text-sm\">\r\n                              {scenario.assumptions && scenario.assumptions.length > 0 \r\n                                ? scenario.assumptions.join(', ') \r\n                                : 'None'}\r\n                            </TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell className=\"font-medium\">Risk Factors</TableCell>\r\n                          {comparisonData.map(scenario => (\r\n                            <TableCell key={`risk-${scenario.id}`} className=\"text-sm\">\r\n                              {scenario.riskFactors && scenario.riskFactors.length > 0 \r\n                                ? scenario.riskFactors.join(', ') \r\n                                : 'None'}\r\n                            </TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\r\n              <BarChart className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">No Scenarios to Compare</h3>\r\n              <p className=\"text-gray-500 mb-4\">\r\n                Create at least two scenarios to enable comparison.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n        \r\n        <TabsContent value=\"sensitivity\">\r\n          {sensitivityData.length > 0 ? (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Sensitivity Analysis</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"mb-4 text-sm text-muted-foreground\">\r\n                  This analysis shows how changes in key variables affect your scenarios' outcomes.\r\n                  Variables with wider ranges have a higher impact on results.\r\n                </div>\r\n                <div className=\"overflow-x-auto\">\r\n                  <Table>\r\n                    <TableHeader>\r\n                      <TableRow>\r\n                        <TableHead>Scenario</TableHead>\r\n                        <TableHead>Variable</TableHead>\r\n                        <TableHead>Base Value</TableHead>\r\n                        <TableHead>Low Value</TableHead>\r\n                        <TableHead>High Value</TableHead>\r\n                        <TableHead>Range</TableHead>\r\n                        <TableHead>Impact</TableHead>\r\n                      </TableRow>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                      {sensitivityData.map((item, index) => (\r\n                        <TableRow key={`sensitivity-${index}`}>\r\n                          <TableCell>{item.scenario}</TableCell>\r\n                          <TableCell>{item.variable}</TableCell>\r\n                          <TableCell>{item.baseValue}</TableCell>\r\n                          <TableCell>{item.lowValue}</TableCell>\r\n                          <TableCell>{item.highValue}</TableCell>\r\n                          <TableCell>\r\n                            <div className=\"w-full bg-gray-200 h-4 rounded-full overflow-hidden\">\r\n                              <div \r\n                                className=\"h-4 rounded-full\" \r\n                                style={{ \r\n                                  width: `${Math.min(100, (item.range / (sensitivityData[0]?.range || 1)) * 100)}%`,\r\n                                  backgroundColor: item.color\r\n                                }}\r\n                              />\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                              item.impact === 'High' \r\n                                ? 'bg-red-100 text-red-800' \r\n                                : item.impact === 'Medium'\r\n                                  ? 'bg-amber-100 text-amber-800' \r\n                                  : 'bg-green-100 text-green-800'\r\n                            }`}>\r\n                              {item.impact}\r\n                            </span>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\r\n              <ArrowUpDown className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">No Sensitivity Data</h3>\r\n              <p className=\"text-gray-500 mb-4\">\r\n                Add sensitivity variables to your scenarios to enable analysis.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n      </Tabs>\r\n      \r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle>Scenario Modeling</CardTitle>\r\n          <Button onClick={() => setShowNewScenario(true)} disabled={showNewScenario}>\r\n            <PlusCircle className=\"h-4 w-4 mr-2\" />\r\n            Create New Scenario\r\n          </Button>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {showNewScenario ? (\r\n            <div className=\"border rounded-lg p-4 mb-4 bg-white\">\r\n              <h3 className=\"text-lg font-medium mb-4\">\r\n                {editingScenarioId ? 'Edit Scenario' : 'Create New Scenario'}\r\n              </h3>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-name\">Scenario Name</Label>\r\n                  <Input\r\n                    id=\"scenario-name\"\r\n                    value={formData.name || ''}\r\n                    onChange={e => handleInputChange('name', e.target.value)}\r\n                    placeholder=\"e.g., Base Case, Best Case, Worst Case\"\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-type\">Scenario Type</Label>\r\n                  <Select\r\n                    value={formData.type || 'Custom'}\r\n                    onValueChange={(value) => handleInputChange('type', value)}\r\n                  >\r\n                    <SelectTrigger id=\"scenario-type\">\r\n                      <SelectValue placeholder=\"Select scenario type\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {SCENARIO_TYPES.map(type => (\r\n                        <SelectItem key={type} value={type}>{type}</SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-probability\">Probability of Occurrence (%)</Label>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Slider\r\n                      id=\"scenario-probability\"\r\n                      min={0}\r\n                      max={100}\r\n                      step={1}\r\n                      value={[formData.probabilityOfOccurrence || 50]}\r\n                      onValueChange={(value) => handleInputChange('probabilityOfOccurrence', value[0])}\r\n                      className=\"flex-1\"\r\n                    />\r\n                    <span className=\"w-12 text-right\">{formData.probabilityOfOccurrence || 50}%</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-notes\">Notes</Label>\r\n                  <Input\r\n                    id=\"scenario-notes\"\r\n                    value={formData.notes || ''}\r\n                    onChange={e => handleInputChange('notes', e.target.value)}\r\n                    placeholder=\"Additional notes...\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"space-y-2 mb-4\">\r\n                <Label htmlFor=\"scenario-description\">Description</Label>\r\n                <Textarea\r\n                  id=\"scenario-description\"\r\n                  value={formData.description || ''}\r\n                  onChange={e => handleInputChange('description', e.target.value)}\r\n                  placeholder=\"Describe this scenario...\"\r\n                  rows={2}\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-revenue\">Projected Revenue</Label>\r\n                  <Input\r\n                    id=\"scenario-revenue\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    step=\"1000\"\r\n                    value={formData.projectedRevenue || 0}\r\n                    onChange={e => handleInputChange('projectedRevenue', parseFloat(e.target.value))}\r\n                    placeholder=\"0.00\"\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-costs\">Projected Costs</Label>\r\n                  <Input\r\n                    id=\"scenario-costs\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    step=\"1000\"\r\n                    value={formData.projectedCosts || 0}\r\n                    onChange={e => handleInputChange('projectedCosts', parseFloat(e.target.value))}\r\n                    placeholder=\"0.00\"\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scenario-profit\">Projected Profit</Label>\r\n                  <Input\r\n                    id=\"scenario-profit\"\r\n                    type=\"number\"\r\n                    disabled\r\n                    value={formData.projectedProfit || (formData.projectedRevenue || 0) - (formData.projectedCosts || 0)}\r\n                    className={\r\n                      (formData.projectedRevenue || 0) - (formData.projectedCosts || 0) >= 0 \r\n                        ? 'text-green-600 bg-green-50' \r\n                        : 'text-red-600 bg-red-50'\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Assumptions and Risk Factors */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n                <div className=\"mb-4\">\r\n                  <Label className=\"mb-2 block\">Key Assumptions</Label>\r\n                  <div className=\"flex mb-2\">\r\n                    <Input\r\n                      value={currentAssumption}\r\n                      onChange={e => setCurrentAssumption(e.target.value)}\r\n                      placeholder=\"Add a key assumption...\"\r\n                      className=\"flex-1 mr-2\"\r\n                    />\r\n                    <Button onClick={handleAddAssumption} type=\"button\">Add</Button>\r\n                  </div>\r\n                  \r\n                  {formData.assumptions && formData.assumptions.length > 0 ? (\r\n                    <ul className=\"space-y-2 mt-2\">\r\n                      {formData.assumptions.map((assumption, index) => (\r\n                        <li key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\r\n                          <span>{assumption}</span>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleRemoveAssumption(index)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  ) : (\r\n                    <p className=\"text-sm text-muted-foreground mt-2\">No assumptions added yet.</p>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"mb-4\">\r\n                  <Label className=\"mb-2 block\">Risk Factors</Label>\r\n                  <div className=\"flex mb-2\">\r\n                    <Input\r\n                      value={currentRiskFactor}\r\n                      onChange={e => setCurrentRiskFactor(e.target.value)}\r\n                      placeholder=\"Add a risk factor...\"\r\n                      className=\"flex-1 mr-2\"\r\n                    />\r\n                    <Button onClick={handleAddRiskFactor} type=\"button\">Add</Button>\r\n                  </div>\r\n                  \r\n                  {formData.riskFactors && formData.riskFactors.length > 0 ? (\r\n                    <ul className=\"space-y-2 mt-2\">\r\n                      {formData.riskFactors.map((risk, index) => (\r\n                        <li key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\r\n                          <span>{risk}</span>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleRemoveRiskFactor(index)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  ) : (\r\n                    <p className=\"text-sm text-muted-foreground mt-2\">No risk factors added yet.</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Advanced Settings */}\r\n              <div className=\"mb-4\">\r\n                <div className=\"flex justify-between items-center mb-2\">\r\n                  <h4 className=\"font-medium\">Advanced Settings</h4>\r\n                  <div className=\"space-x-2\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setShowParameterForm(!showParameterForm)}\r\n                    >\r\n                      {showParameterForm ? 'Hide Parameters' : 'Show Parameters'}\r\n                      {showParameterForm ? <ChevronUp className=\"ml-2 h-4 w-4\" /> : <ChevronDown className=\"ml-2 h-4 w-4\" />}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setShowSensitivityForm(!showSensitivityForm)}\r\n                    >\r\n                      {showSensitivityForm ? 'Hide Sensitivity' : 'Show Sensitivity'}\r\n                      {showSensitivityForm ? <ChevronUp className=\"ml-2 h-4 w-4\" /> : <ChevronDown className=\"ml-2 h-4 w-4\" />}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Parameters Form */}\r\n                {showParameterForm && (\r\n                  <div className=\"border p-4 rounded-lg mb-4\">\r\n                    <h5 className=\"font-medium mb-2\">Custom Parameters</h5>\r\n                    <p className=\"text-sm text-muted-foreground mb-4\">\r\n                      Add custom parameters to track in this scenario. These can be used for more detailed modeling.\r\n                    </p>\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-5 gap-2 mb-2\">\r\n                      <div>\r\n                        <Label htmlFor=\"param-name\" className=\"text-xs\">Name</Label>\r\n                        <Input\r\n                          id=\"param-name\"\r\n                          value={currentParameter.name || ''}\r\n                          onChange={e => handleParameterInputChange('name', e.target.value)}\r\n                          placeholder=\"Parameter name\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"param-base\" className=\"text-xs\">Base Value</Label>\r\n                        <Input\r\n                          id=\"param-base\"\r\n                          type=\"number\"\r\n                          value={currentParameter.baseValue || 0}\r\n                          onChange={e => handleParameterInputChange('baseValue', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"param-adjusted\" className=\"text-xs\">Adjusted Value</Label>\r\n                        <Input\r\n                          id=\"param-adjusted\"\r\n                          type=\"number\"\r\n                          value={currentParameter.adjustedValue || 0}\r\n                          onChange={e => handleParameterInputChange('adjustedValue', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"param-unit\" className=\"text-xs\">Unit</Label>\r\n                        <Input\r\n                          id=\"param-unit\"\r\n                          value={currentParameter.unit || ''}\r\n                          onChange={e => handleParameterInputChange('unit', e.target.value)}\r\n                          placeholder=\"Unit (e.g. %)\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"flex items-end\">\r\n                        <Button onClick={handleAddParameter} className=\"w-full\" disabled={!currentParameter.name}>\r\n                          <Plus className=\"h-4 w-4 mr-1\" /> Add\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-xs text-muted-foreground mb-2\">\r\n                      <Label htmlFor=\"param-desc\" className=\"text-xs\">Description (Optional)</Label>\r\n                      <Input\r\n                        id=\"param-desc\"\r\n                        value={currentParameter.description || ''}\r\n                        onChange={e => handleParameterInputChange('description', e.target.value)}\r\n                        placeholder=\"Brief description of what this parameter represents\"\r\n                      />\r\n                    </div>\r\n                    \r\n                    {formData.parameters && formData.parameters.length > 0 ? (\r\n                      <div className=\"mt-4\">\r\n                        <h6 className=\"font-medium text-sm mb-2\">Added Parameters</h6>\r\n                        <div className=\"overflow-x-auto\">\r\n                          <Table>\r\n                            <TableHeader>\r\n                              <TableRow>\r\n                                <TableHead>Name</TableHead>\r\n                                <TableHead>Base Value</TableHead>\r\n                                <TableHead>Adjusted Value</TableHead>\r\n                                <TableHead>Unit</TableHead>\r\n                                <TableHead>Description</TableHead>\r\n                                <TableHead></TableHead>\r\n                              </TableRow>\r\n                            </TableHeader>\r\n                            <TableBody>\r\n                              {formData.parameters.map((param, index) => (\r\n                                <TableRow key={`param-${index}`}>\r\n                                  <TableCell className=\"font-medium\">{param.name}</TableCell>\r\n                                  <TableCell>{param.baseValue}</TableCell>\r\n                                  <TableCell>{param.adjustedValue}</TableCell>\r\n                                  <TableCell>{param.unit}</TableCell>\r\n                                  <TableCell className=\"text-xs\">{param.description}</TableCell>\r\n                                  <TableCell>\r\n                                    <Button\r\n                                      variant=\"ghost\"\r\n                                      size=\"sm\"\r\n                                      onClick={() => handleRemoveParameter(index)}\r\n                                    >\r\n                                      <Trash2 className=\"h-4 w-4\" />\r\n                                    </Button>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <p className=\"text-sm text-muted-foreground mt-4\">No parameters added yet.</p>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Sensitivity Analysis Form */}\r\n                {showSensitivityForm && (\r\n                  <div className=\"border p-4 rounded-lg mb-4\">\r\n                    <h5 className=\"font-medium mb-2\">Sensitivity Analysis</h5>\r\n                    <p className=\"text-sm text-muted-foreground mb-4\">\r\n                      Add variables to test how changes affect your model. This helps identify which factors have the most impact.\r\n                    </p>\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-5 gap-2 mb-2\">\r\n                      <div>\r\n                        <Label htmlFor=\"sens-variable\" className=\"text-xs\">Variable</Label>\r\n                        <Input\r\n                          id=\"sens-variable\"\r\n                          value={currentSensitivity.variable || ''}\r\n                          onChange={e => handleSensitivityInputChange('variable', e.target.value)}\r\n                          placeholder=\"Variable name\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"sens-base\" className=\"text-xs\">Base Value</Label>\r\n                        <Input\r\n                          id=\"sens-base\"\r\n                          type=\"number\"\r\n                          value={currentSensitivity.baseValue || 0}\r\n                          onChange={e => handleSensitivityInputChange('baseValue', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"sens-low\" className=\"text-xs\">Low Value</Label>\r\n                        <Input\r\n                          id=\"sens-low\"\r\n                          type=\"number\"\r\n                          value={currentSensitivity.lowValue || 0}\r\n                          onChange={e => handleSensitivityInputChange('lowValue', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"sens-high\" className=\"text-xs\">High Value</Label>\r\n                        <Input\r\n                          id=\"sens-high\"\r\n                          type=\"number\"\r\n                          value={currentSensitivity.highValue || 0}\r\n                          onChange={e => handleSensitivityInputChange('highValue', parseFloat(e.target.value))}\r\n                        />\r\n                      </div>\r\n                      <div className=\"flex items-end\">\r\n                        <Button onClick={handleAddSensitivity} className=\"w-full\" disabled={!currentSensitivity.variable}>\r\n                          <Plus className=\"h-4 w-4 mr-1\" /> Add\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"mb-2\">\r\n                      <Label htmlFor=\"sens-impact\" className=\"text-xs\">Impact Level</Label>\r\n                      <Select\r\n                        value={currentSensitivity.impact as string || 'Medium'}\r\n                        onValueChange={(value) => handleSensitivityInputChange('impact', value)}\r\n                      >\r\n                        <SelectTrigger id=\"sens-impact\">\r\n                          <SelectValue placeholder=\"Select impact level\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"Low\">Low</SelectItem>\r\n                          <SelectItem value=\"Medium\">Medium</SelectItem>\r\n                          <SelectItem value=\"High\">High</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                    \r\n                    {formData.sensitivities && formData.sensitivities.length > 0 ? (\r\n                      <div className=\"mt-4\">\r\n                        <h6 className=\"font-medium text-sm mb-2\">Added Sensitivity Variables</h6>\r\n                        <div className=\"overflow-x-auto\">\r\n                          <Table>\r\n                            <TableHeader>\r\n                              <TableRow>\r\n                                <TableHead>Variable</TableHead>\r\n                                <TableHead>Base</TableHead>\r\n                                <TableHead>Low</TableHead>\r\n                                <TableHead>High</TableHead>\r\n                                <TableHead>Impact</TableHead>\r\n                                <TableHead></TableHead>\r\n                              </TableRow>\r\n                            </TableHeader>\r\n                            <TableBody>\r\n                              {formData.sensitivities.map((sensitivity, index) => (\r\n                                <TableRow key={`sensitivity-${index}`}>\r\n                                  <TableCell className=\"font-medium\">{sensitivity.variable}</TableCell>\r\n                                  <TableCell>{sensitivity.baseValue}</TableCell>\r\n                                  <TableCell>{sensitivity.lowValue}</TableCell>\r\n                                  <TableCell>{sensitivity.highValue}</TableCell>\r\n                                  <TableCell>\r\n                                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                                      sensitivity.impact === 'High' \r\n                                        ? 'bg-red-100 text-red-800' \r\n                                        : sensitivity.impact === 'Medium'\r\n                                          ? 'bg-amber-100 text-amber-800' \r\n                                          : 'bg-green-100 text-green-800'\r\n                                    }`}>\r\n                                      {sensitivity.impact}\r\n                                    </span>\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    <Button\r\n                                      variant=\"ghost\"\r\n                                      size=\"sm\"\r\n                                      onClick={() => handleRemoveSensitivity(index)}\r\n                                    >\r\n                                      <Trash2 className=\"h-4 w-4\" />\r\n                                    </Button>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <p className=\"text-sm text-muted-foreground mt-4\">No sensitivity variables added yet.</p>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"flex justify-end space-x-2\">\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setShowNewScenario(false);\r\n                  setEditingScenarioId(null);\r\n                  setShowParameterForm(false);\r\n                  setShowSensitivityForm(false);\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleSave} disabled={!formData.name || !formData.description}>\r\n                  <Save className=\"h-4 w-4 mr-2\" />\r\n                  {editingScenarioId ? 'Update Scenario' : 'Save Scenario'}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          \r\n          {/* Scenarios List */}\r\n          {scenarios.length === 0 ? (\r\n            <div className=\"text-center py-12\">\r\n              <PieChart className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">No Scenarios Created</h3>\r\n              <p className=\"text-gray-500 mb-4\">\r\n                Create different scenarios to model potential outcomes for your product.\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead className=\"w-[30px]\"></TableHead>\r\n                    <TableHead className=\"w-[15%]\">Scenario</TableHead>\r\n                    <TableHead className=\"w-[20%]\">Description</TableHead>\r\n                    <TableHead className=\"w-[10%]\">Type</TableHead>\r\n                    <TableHead className=\"w-[10%]\">Probability</TableHead>\r\n                    <TableHead className=\"w-[12%]\">Revenue</TableHead>\r\n                    <TableHead className=\"w-[12%]\">Profit/Loss</TableHead>\r\n                    <TableHead className=\"w-[12%]\">Actions</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {scenarios.map(scenario => (\r\n                    <TableRow \r\n                      key={scenario.id}\r\n                      className={compareScenarioIds.includes(scenario.id) ? 'bg-blue-50' : undefined}\r\n                    >\r\n                      <TableCell>\r\n                        <input \r\n                          type=\"checkbox\" \r\n                          checked={compareScenarioIds.includes(scenario.id)} \r\n                          onChange={() => toggleCompareScenario(scenario.id)}\r\n                          className=\"rounded border-gray-300\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell className=\"font-medium\">{scenario.name}</TableCell>\r\n                      <TableCell className=\"max-w-[250px] truncate\">\r\n                        {scenario.description}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                          scenario.type === 'Best Case' \r\n                            ? 'bg-green-100 text-green-800' \r\n                            : scenario.type === 'Worst Case'\r\n                              ? 'bg-red-100 text-red-800' \r\n                              : scenario.type === 'Base Case'\r\n                                ? 'bg-blue-100 text-blue-800'\r\n                                : 'bg-gray-100 text-gray-800'\r\n                        }`}>\r\n                          {scenario.type}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell>{scenario.probabilityOfOccurrence}%</TableCell>\r\n                      <TableCell>{formatCurrency(scenario.projectedRevenue)}</TableCell>\r\n                      <TableCell className={\r\n                        (scenario.projectedProfit || (scenario.projectedRevenue - scenario.projectedCosts)) >= 0 \r\n                          ? 'text-green-600' \r\n                          : 'text-red-600'\r\n                      }>\r\n                        {formatCurrency(scenario.projectedProfit || (scenario.projectedRevenue - scenario.projectedCosts))}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex space-x-1\">\r\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit(scenario)} title=\"Edit\">\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDuplicate(scenario)} title=\"Duplicate\">\r\n                            <Copy className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete(scenario)} title=\"Delete\">\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n              \r\n              {/* Comparison Instructions */}\r\n              {scenarios.length > 1 && (\r\n                <div className=\"mt-3 text-sm text-muted-foreground border-t pt-3\">\r\n                  Select scenarios using the checkboxes to compare them, then switch to the \"Scenario Comparison\" tab.\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScenarioModelingComponent; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\SeasonalAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Button } from './ui/button';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\r\nimport { Save } from 'lucide-react';\r\nimport useStore from '../store/useStore';\r\nimport { formatCurrency } from '../lib/utils';\r\nimport type { SeasonalAnalysis } from '../types';\r\n\r\nfunction SeasonalAnalysisComponent() {\r\n  const { products, currentProductId, updateSeasonalAnalysis } = useStore();\r\n  const currentProduct = products.find(p => p.info.id === currentProductId);\r\n  \r\n  const [seasonalData, setSeasonalData] = useState<SeasonalAnalysis[]>([\r\n    { quarter: 'Q1', seasonalImpactFactor: 1.0, projectedRevenue: 0, projectedCosts: 0, notes: '' },\r\n    { quarter: 'Q2', seasonalImpactFactor: 1.0, projectedRevenue: 0, projectedCosts: 0, notes: '' },\r\n    { quarter: 'Q3', seasonalImpactFactor: 1.0, projectedRevenue: 0, projectedCosts: 0, notes: '' },\r\n    { quarter: 'Q4', seasonalImpactFactor: 1.0, projectedRevenue: 0, projectedCosts: 0, notes: '' }\r\n  ]);\r\n  \r\n  const [isDirty, setIsDirty] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    if (currentProduct?.seasonalAnalysis) {\r\n      setSeasonalData(currentProduct.seasonalAnalysis);\r\n    }\r\n  }, [currentProduct]);\r\n  \r\n  if (!currentProduct) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        No product selected or product not found.\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  const handleInputChange = (index: number, field: keyof SeasonalAnalysis, value: unknown) => {\r\n    const newData = [...seasonalData];\r\n    newData[index] = { ...newData[index], [field]: value };\r\n    \r\n    // Auto-calculate projected revenue based on impact factor\r\n    if (field === 'seasonalImpactFactor') {\r\n      // Base this on average weekly revenue from projections if available\r\n      const avgQuarterlyRevenue = calculateAverageQuarterlyRevenue();\r\n      newData[index].projectedRevenue = avgQuarterlyRevenue * value;\r\n    }\r\n    \r\n    setSeasonalData(newData);\r\n    setIsDirty(true);\r\n  };\r\n  \r\n  const calculateAverageQuarterlyRevenue = () => {\r\n    if (!currentProduct.weeklyProjections || currentProduct.weeklyProjections.length === 0) {\r\n      return 10000; // Default value if no projections\r\n    }\r\n    \r\n    const totalRevenue = currentProduct.weeklyProjections.reduce(\r\n      (sum, proj) => sum + proj.totalRevenue, 0\r\n    );\r\n    \r\n    // Assuming 13 weeks per quarter\r\n    return (totalRevenue / currentProduct.weeklyProjections.length) * 13;\r\n  };\r\n  \r\n  const handleSave = () => {\r\n    if (!currentProduct) return;\r\n    \r\n    updateSeasonalAnalysis(currentProduct.info.id, seasonalData);\r\n    setIsDirty(false);\r\n  };\r\n  \r\n  const totalAnnualRevenue = seasonalData.reduce((sum, q) => sum + q.projectedRevenue, 0);\r\n  const totalAnnualCosts = seasonalData.reduce((sum, q) => sum + q.projectedCosts, 0);\r\n  const annualProfit = totalAnnualRevenue - totalAnnualCosts;\r\n  \r\n  const chartData = seasonalData.map(q => ({\r\n    quarter: q.quarter,\r\n    revenue: q.projectedRevenue,\r\n    costs: q.projectedCosts,\r\n    profit: q.projectedRevenue - q.projectedCosts,\r\n    impactFactor: q.seasonalImpactFactor\r\n  }));\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-2xl font-bold\">{formatCurrency(totalAnnualRevenue)}</div>\r\n            <div className=\"text-sm text-muted-foreground\">Annual Revenue</div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-2xl font-bold\">{formatCurrency(totalAnnualCosts)}</div>\r\n            <div className=\"text-sm text-muted-foreground\">Annual Costs</div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className={`text-2xl font-bold ${annualProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n              {formatCurrency(annualProfit)}\r\n            </div>\r\n            <div className=\"text-sm text-muted-foreground\">Annual Profit</div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Quarterly Financial Projections</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"quarter\" />\r\n                  <YAxis />\r\n                  <Tooltip formatter={(value) => formatCurrency(value as number)} />\r\n                  <Legend />\r\n                  <Bar dataKey=\"revenue\" name=\"Revenue\" fill=\"#4f46e5\" />\r\n                  <Bar dataKey=\"costs\" name=\"Costs\" fill=\"#ef4444\" />\r\n                  <Bar dataKey=\"profit\" name=\"Profit\" fill=\"#10b981\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Seasonal Impact Factors</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"quarter\" />\r\n                  <YAxis domain={[0, 'dataMax + 0.5']} />\r\n                  <Tooltip />\r\n                  <Legend />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"impactFactor\" \r\n                    name=\"Seasonal Impact\" \r\n                    stroke=\"#8884d8\" \r\n                    activeDot={{ r: 8 }} \r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      \r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle>Quarterly Analysis</CardTitle>\r\n          <Button onClick={handleSave} disabled={!isDirty}>\r\n            <Save className=\"h-4 w-4 mr-2\" />\r\n            Save Changes\r\n          </Button>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Quarter</TableHead>\r\n                <TableHead>Seasonal Impact Factor</TableHead>\r\n                <TableHead>Projected Revenue</TableHead>\r\n                <TableHead>Projected Costs</TableHead>\r\n                <TableHead>Projected Profit</TableHead>\r\n                <TableHead>Notes</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {seasonalData.map((quarter, index) => (\r\n                <TableRow key={quarter.quarter}>\r\n                  <TableCell className=\"font-medium\">{quarter.quarter}</TableCell>\r\n                  <TableCell>\r\n                    <Input\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      min=\"0\"\r\n                      value={quarter.seasonalImpactFactor}\r\n                      onChange={(e) => handleInputChange(index, 'seasonalImpactFactor', parseFloat(e.target.value))}\r\n                      className=\"w-24\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Input\r\n                      type=\"number\"\r\n                      step=\"1000\"\r\n                      min=\"0\"\r\n                      value={quarter.projectedRevenue}\r\n                      onChange={(e) => handleInputChange(index, 'projectedRevenue', parseFloat(e.target.value))}\r\n                      className=\"w-32\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Input\r\n                      type=\"number\"\r\n                      step=\"1000\"\r\n                      min=\"0\"\r\n                      value={quarter.projectedCosts}\r\n                      onChange={(e) => handleInputChange(index, 'projectedCosts', parseFloat(e.target.value))}\r\n                      className=\"w-32\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell className={`font-medium ${quarter.projectedRevenue - quarter.projectedCosts >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                    {formatCurrency(quarter.projectedRevenue - quarter.projectedCosts)}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Textarea\r\n                      value={quarter.notes}\r\n                      onChange={(e) => handleInputChange(index, 'notes', e.target.value)}\r\n                      className=\"min-h-[80px]\"\r\n                      placeholder=\"Add notes about seasonal factors...\"\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeasonalAnalysisComponent; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\SignupForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\StorageToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\TestInputs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\WeeklyForecast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\fix-inputs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mutations' is defined but never used.","line":63,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\n\r\n/**\r\n * FixInputs - A wrapper component that ensures all inputs are interactive\r\n * \r\n * This component applies global fixes to make sure all input elements,\r\n * textareas, and select elements can receive focus and interact properly.\r\n */\r\nexport function FixInputs({ children }: { children: React.ReactNode }) {\r\n  React.useEffect(() => {\r\n    // Create a stylesheet to ensure inputs are interactive\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      /* Ensure all inputs have pointer events and proper z-index */\r\n      input, textarea, select, button, [role=\"button\"] {\r\n        pointer-events: auto !important;\r\n        position: relative !important;\r\n        z-index: 10 !important;\r\n      }\r\n      \r\n      /* Ensure parent elements don't block clicks */\r\n      form, label, div, span {\r\n        pointer-events: auto !important;\r\n      }\r\n      \r\n      /* Fix any overlay issues */\r\n      div[class*=\"overlay\"], div[class*=\"Overlay\"], div[style*=\"position: fixed\"] {\r\n        pointer-events: none !important;\r\n      }\r\n      \r\n      /* Make sure important interactive elements work */\r\n      button, a, [role=\"button\"] {\r\n        pointer-events: auto !important;\r\n        position: relative !important;\r\n        z-index: 5 !important;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    \r\n    // Fix for existing inputs\r\n    function fixInputs() {\r\n      const elements = document.querySelectorAll('input, textarea, select, button, [role=\"button\"]');\r\n      elements.forEach(el => {\r\n        if (el instanceof HTMLElement) {\r\n          el.style.pointerEvents = 'auto';\r\n          el.style.position = 'relative';\r\n          el.style.zIndex = '10';\r\n          \r\n          // Fix parent elements too\r\n          let parent = el.parentElement;\r\n          while (parent) {\r\n            parent.style.pointerEvents = 'auto';\r\n            parent = parent.parentElement;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Run initially\r\n    fixInputs();\r\n    \r\n    // Set up a MutationObserver to catch new inputs\r\n    const observer = new MutationObserver(mutations => {\r\n      fixInputs();\r\n    });\r\n    \r\n    // Watch for DOM changes\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n    \r\n    // Clean up\r\n    return () => {\r\n      observer.disconnect();\r\n      document.head.removeChild(style);\r\n    };\r\n  }, []);\r\n  \r\n  return <>{children}</>;\r\n}\r\n\r\nexport default FixInputs; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\MarketingChannels.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[318,321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[318,321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select';\r\nimport { Input } from './input';\r\nimport { Label } from './label';\r\nimport { Textarea } from './textarea';\r\n\r\ninterface MarketingChannelProps {\r\n  onChange?: (data: unknown) => void;\r\n  value?: any;\r\n}\r\n\r\nexport function MarketingChannels({ onChange, value = {} }: MarketingChannelProps) {\r\n  const [channel, setChannel] = React.useState(value.channel || '');\r\n  const [budget, setBudget] = React.useState(value.budget || 0);\r\n  const [notes, setNotes] = React.useState(value.notes || '');\r\n\r\n  const handleChannelChange = (newChannel: string) => {\r\n    setChannel(newChannel);\r\n    if (onChange) {\r\n      onChange({\r\n        channel: newChannel,\r\n        budget,\r\n        notes\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setNotes(e.target.value);\r\n    if (onChange) {\r\n      onChange({\r\n        channel,\r\n        budget,\r\n        notes: e.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"marketing-channels space-y-4\">\r\n      {/* Dropdown wrapper with fixed positioning and highest z-index */}\r\n      <div>\r\n        <Label htmlFor=\"marketing-channel\">Marketing Channel</Label>\r\n        <div className=\"relative\">\r\n          <Select\r\n            value={channel}\r\n            onValueChange={handleChannelChange}\r\n          >\r\n            <SelectTrigger id=\"marketing-channel\" className=\"w-full\">\r\n              <SelectValue placeholder=\"Select marketing channel\" />\r\n            </SelectTrigger>\r\n            <SelectContent \r\n              className=\"bg-white shadow-lg\" \r\n              position=\"popper\"\r\n              sideOffset={4}\r\n              align=\"start\"\r\n              avoidCollisions={true}\r\n            >\r\n              <SelectItem value=\"Social Media Advertising\">Social Media Advertising</SelectItem>\r\n              <SelectItem value=\"Google/Search Ads\">Google/Search Ads</SelectItem>\r\n              <SelectItem value=\"Print Media\">Print Media</SelectItem>\r\n              <SelectItem value=\"Email Marketing\">Email Marketing</SelectItem>\r\n              <SelectItem value=\"Influencer Partnerships\">Influencer Partnerships</SelectItem>\r\n              <SelectItem value=\"Referral Programs\">Referral Programs</SelectItem>\r\n              <SelectItem value=\"Other (Custom)\">Other (Custom)</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Budget field with proper spacing */}\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"weeklyBudget\">Weekly Budget ($)</Label>\r\n        <Input\r\n          id=\"weeklyBudget\"\r\n          type=\"number\"\r\n          min={0}\r\n          value={budget || ''}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            const value = e.target.value === '' ? 0 : parseFloat(e.target.value);\r\n            setBudget(value);\r\n            if (onChange) {\r\n              onChange({\r\n                channel,\r\n                budget: value,\r\n                notes\r\n              });\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n      {/* Notes field with proper spacing */}\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"marketingNotes\">Additional details about this marketing channel</Label>\r\n        <Textarea\r\n          id=\"marketingNotes\"\r\n          placeholder=\"Add notes about this marketing channel...\"\r\n          value={notes}\r\n          onChange={handleNotesChange}\r\n          className=\"h-24\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\NetworkStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\Notifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NotificationType' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport { AlertCircle, CheckCircle, Info, X } from 'lucide-react';\r\nimport { useNotifications } from '../../contexts/NotificationContext';\r\nimport { cn } from '../../lib/utils';\r\nimport type { NotificationType } from '../../contexts/NotificationContext';\r\n\r\n// Type for notification config\r\ninterface ConfigType {\r\n  bgColor: string;\r\n  textColor: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\n// Configuration for different notification types\r\nconst notificationConfig: Record<string, ConfigType> = {\r\n  error: {\r\n    bgColor: 'bg-red-50',\r\n    textColor: 'text-red-800',\r\n    icon: <AlertCircle className=\"h-5 w-5 text-red-500\" />\r\n  },\r\n  warning: {\r\n    bgColor: 'bg-yellow-50',\r\n    textColor: 'text-yellow-800',\r\n    icon: <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\r\n  },\r\n  success: {\r\n    bgColor: 'bg-green-50',\r\n    textColor: 'text-green-800',\r\n    icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />\r\n  },\r\n  info: {\r\n    bgColor: 'bg-blue-50',\r\n    textColor: 'text-blue-800',\r\n    icon: <Info className=\"h-5 w-5 text-blue-500\" />\r\n  }\r\n};\r\n\r\n// Type for notification\r\nexport interface NotificationItemType {\r\n  id: string;\r\n  type: 'error' | 'warning' | 'success' | 'info';\r\n  message: string;\r\n  duration?: number;\r\n}\r\n\r\n// NotificationItem component\r\nconst NotificationItem = ({ \r\n  notification, \r\n  onDismiss \r\n}: {\r\n  notification: NotificationItemType;\r\n  onDismiss: (id: string) => void;\r\n}) => {\r\n  const config = notificationConfig[notification.type] || notificationConfig.info;\r\n  \r\n  useEffect(() => {\r\n    if (notification.duration) {\r\n      const timer = setTimeout(() => {\r\n        onDismiss(notification.id);\r\n      }, notification.duration);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notification, onDismiss]);\r\n  \r\n  return (\r\n    <div className={cn(\r\n      \"p-4 mb-4 rounded-lg shadow-md border flex items-start\",\r\n      config.bgColor,\r\n      config.textColor\r\n    )}>\r\n      <div className=\"flex-shrink-0 mr-3\">\r\n        {config.icon}\r\n      </div>\r\n      <div className=\"flex-grow mr-3\">\r\n        <p className=\"text-sm font-medium\">{notification.message}</p>\r\n      </div>\r\n      <button\r\n        onClick={() => onDismiss(notification.id)}\r\n        className=\"flex-shrink-0 text-gray-400 hover:text-gray-500\"\r\n        aria-label=\"Close\"\r\n      >\r\n        <X className=\"h-5 w-5\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Notifications component\r\nconst Notifications = () => {\r\n  const { notifications, dismissNotification } = useNotifications();\r\n  \r\n  if (!notifications || !notifications.length) return null;\r\n  \r\n  return (\r\n    <div className=\"fixed top-4 right-4 w-80 z-50 p-2\">\r\n      {notifications.map((notification) => (\r\n        <NotificationItem\r\n          key={notification.id}\r\n          notification={notification as NotificationItemType}\r\n          onDismiss={dismissNotification}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\OfflineManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[505,508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[505,508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'isSyncing' and 'syncOfflineOperations'. Either include them or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [isOnline, pendingOperations.length, autoSync, isSyncing, syncOfflineOperations]","fix":{"range":[1587,1633],"text":"[isOnline, pendingOperations.length, autoSync, isSyncing, syncOfflineOperations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useNetworkStatus } from '../../contexts/NetworkStatusContext';\r\nimport { useNotifications } from '../../contexts/NotificationContext';\r\nimport { doc, updateDoc, deleteDoc, Firestore } from 'firebase/firestore';\r\nimport { db } from '../../lib/firebase';\r\nimport { Button } from './button';\r\n\r\ninterface OfflineOperation {\r\n  id: string;\r\n  type: 'create' | 'update' | 'delete';\r\n  collection: string;\r\n  docId: string;\r\n  data?: Record<string, any>;\r\n  timestamp: number;\r\n}\r\n\r\ninterface OfflineManagerProps {\r\n  autoSync?: boolean;\r\n}\r\n\r\nconst OfflineManager: React.FC<OfflineManagerProps> = ({ autoSync = true }) => {\r\n  const { isOnline } = useNetworkStatus();\r\n  const { addNotification } = useNotifications();\r\n  \r\n  const [pendingOperations, setPendingOperations] = useState<OfflineOperation[]>([]);\r\n  const [isSyncing, setIsSyncing] = useState(false);\r\n  const [syncProgress, setSyncProgress] = useState(0);\r\n\r\n  // Load pending operations from localStorage\r\n  useEffect(() => {\r\n    const storedOperations = localStorage.getItem('offlineOperations');\r\n    if (storedOperations) {\r\n      try {\r\n        setPendingOperations(JSON.parse(storedOperations));\r\n      } catch (error) {\r\n        console.error('Failed to parse stored operations:', error);\r\n        localStorage.removeItem('offlineOperations');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Auto-sync when coming back online\r\n  useEffect(() => {\r\n    if (isOnline && autoSync && pendingOperations.length > 0 && !isSyncing) {\r\n      syncOfflineOperations();\r\n    }\r\n  }, [isOnline, pendingOperations.length, autoSync]);\r\n\r\n  // Function to sync offline operations with Firestore\r\n  const syncOfflineOperations = async () => {\r\n    if (!isOnline || pendingOperations.length === 0 || isSyncing) {\r\n      return;\r\n    }\r\n\r\n    setIsSyncing(true);\r\n    setSyncProgress(0);\r\n    \r\n    let successCount = 0;\r\n    let failCount = 0;\r\n    \r\n    for (let i = 0; i < pendingOperations.length; i++) {\r\n      const operation = pendingOperations[i];\r\n      \r\n      try {\r\n        if (operation.type === 'update' && operation.data) {\r\n          // Update document in Firestore\r\n          await updateDoc(\r\n            doc(db as Firestore, operation.collection, operation.docId), \r\n            operation.data\r\n          );\r\n        } else if (operation.type === 'delete') {\r\n          // Delete document from Firestore\r\n          await deleteDoc(doc(db as Firestore, operation.collection, operation.docId));\r\n        }\r\n        // Note: 'create' would use addDoc, but we'll implement that when needed\r\n        \r\n        successCount++;\r\n      } catch (error) {\r\n        console.error(`Failed to sync operation: ${operation.id}`, error);\r\n        failCount++;\r\n      }\r\n      \r\n      // Update progress\r\n      setSyncProgress(Math.round(((i + 1) / pendingOperations.length) * 100));\r\n    }\r\n    \r\n    // Remove synchronized operations\r\n    if (successCount > 0) {\r\n      setPendingOperations([]);\r\n      localStorage.removeItem('offlineOperations');\r\n      \r\n      addNotification({\r\n        type: 'success',\r\n        message: `Successfully synchronized ${successCount} offline ${successCount === 1 ? 'operation' : 'operations'}`\r\n      });\r\n    }\r\n    \r\n    if (failCount > 0) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: `Failed to synchronize ${failCount} offline ${failCount === 1 ? 'operation' : 'operations'}`\r\n      });\r\n    }\r\n    \r\n    setIsSyncing(false);\r\n    setSyncProgress(0);\r\n  };\r\n\r\n  if (pendingOperations.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 left-4 z-50 bg-yellow-50 border border-yellow-200 rounded-lg p-4 shadow-md max-w-xs\">\r\n      <h3 className=\"font-medium text-yellow-800 mb-2\">Offline Changes Pending</h3>\r\n      <p className=\"text-sm text-yellow-700 mb-3\">\r\n        {pendingOperations.length} {pendingOperations.length === 1 ? 'change is' : 'changes are'} waiting to be synchronized\r\n      </p>\r\n      \r\n      {isSyncing ? (\r\n        <div className=\"space-y-2\">\r\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n            <div \r\n              className=\"bg-yellow-600 h-2.5 rounded-full\" \r\n              style={{ width: `${syncProgress}%` }}\r\n            ></div>\r\n          </div>\r\n          <p className=\"text-xs text-yellow-700\">Synchronizing... {syncProgress}%</p>\r\n        </div>\r\n      ) : (\r\n        <Button \r\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white\" \r\n          disabled={!isOnline || isSyncing}\r\n          onClick={syncOfflineOperations}\r\n        >\r\n          {isOnline ? 'Sync Now' : 'Waiting for Connection...'}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OfflineManager; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\StorageControls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Save, BarChart, Wifi, WifiOff, AlertCircle, ArrowUpDown } from 'lucide-react';\r\nimport { useStorage } from '../../contexts/StorageContext';\r\nimport { useNetworkStatus } from '../../contexts/NetworkStatusContext';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from './tooltip';\r\nimport { Button } from './button';\r\nimport { \r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger\r\n} from './dropdown-menu';\r\n\r\nexport const StorageControls = () => {\r\n  const { storageMode, setStorageMode, isCloudAvailable } = useStorage();\r\n  const { isOnline, connectionType } = useNetworkStatus();\r\n  const [isChanging, setIsChanging] = useState(false);\r\n\r\n  // Handle toggling storage mode\r\n  const handleToggleStorage = async () => {\r\n    setIsChanging(true);\r\n    try {\r\n      const newMode = storageMode === 'cloud' ? 'local' : 'cloud';\r\n      await setStorageMode(newMode);\r\n    } finally {\r\n      setIsChanging(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed top-4 right-4 z-50 flex items-center gap-2\">\r\n      <TooltipProvider>\r\n        {/* Network Status Indicator */}\r\n        <Tooltip>\r\n          <TooltipTrigger asChild>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"icon\" \r\n              className={`rounded-full w-8 h-8 ${\r\n                isOnline \r\n                  ? 'bg-green-100 text-green-700 hover:bg-green-200 hover:text-green-800' \r\n                  : 'bg-red-100 text-red-700 hover:bg-red-200 hover:text-red-800'\r\n              }`}\r\n            >\r\n              {isOnline ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />}\r\n            </Button>\r\n          </TooltipTrigger>\r\n          <TooltipContent>\r\n            {isOnline \r\n              ? `Online ${connectionType ? `(${connectionType})` : \"\"}` \r\n              : \"Offline - Saving data locally\"}\r\n          </TooltipContent>\r\n        </Tooltip>\r\n\r\n        {/* Storage Type Indicator */}\r\n        <Tooltip>\r\n          <TooltipTrigger asChild>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"icon\" \r\n              className={`rounded-full w-8 h-8 ${\r\n                storageMode === 'cloud'\r\n                  ? 'bg-blue-100 text-blue-700 hover:bg-blue-200 hover:text-blue-800'\r\n                  : 'bg-amber-100 text-amber-700 hover:bg-amber-200 hover:text-amber-800'\r\n              }`}\r\n            >\r\n              {storageMode === 'cloud' ? <Save className=\"h-4 w-4\" /> : <BarChart className=\"h-4 w-4\" />}\r\n            </Button>\r\n          </TooltipTrigger>\r\n          <TooltipContent>\r\n            {storageMode === 'cloud' \r\n              ? 'Cloud storage: data synced across devices' \r\n              : 'Local storage: data saved in browser'}\r\n          </TooltipContent>\r\n        </Tooltip>\r\n\r\n        {/* Storage Settings Dropdown */}\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"icon\" \r\n              className=\"rounded-full w-8 h-8 bg-gray-100 text-gray-700 hover:bg-gray-200 hover:text-gray-800\"\r\n            >\r\n              <ArrowUpDown className=\"h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\r\n            <div className=\"px-2 py-1.5 font-medium\">Storage Settings</div>\r\n            <div className=\"h-px bg-gray-200 my-1\"></div>\r\n            <DropdownMenuItem\r\n              disabled={isChanging || (storageMode === 'local' && !isCloudAvailable)}\r\n              onClick={handleToggleStorage}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <ArrowUpDown className=\"h-4 w-4\" />\r\n              <span>Switch to {storageMode === 'cloud' ? 'Local Storage' : 'Cloud Storage'}</span>\r\n            </DropdownMenuItem>\r\n            {!isCloudAvailable && storageMode === 'local' && (\r\n              <div className=\"px-2 py-1.5 text-xs text-muted-foreground\">\r\n                Cloud storage unavailable. Configure Firebase first.\r\n              </div>\r\n            )}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </TooltipProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StorageControls; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n        success: \r\n          \"border-transparent bg-green-500 text-white hover:bg-green-500/80\",\r\n        warning: \r\n          \"border-transparent bg-yellow-500 text-white hover:bg-yellow-500/80\",\r\n        info: \r\n          \"border-transparent bg-blue-500 text-white hover:bg-blue-500/80\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\ninterface BadgeProps extends React.HTMLAttributes<HTMLDivElement>,\r\n  VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  );\r\n}\r\n\r\nexport { Badge, badgeVariants }; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":52,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":52,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cn } from \"../../lib/utils\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\";\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button, buttonVariants };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\core-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\core-select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\core-textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'focused' is assigned a value but never used.","line":20,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  onValueChange?: (value: string) => void;\r\n}\r\n\r\n// Fixed Input component that correctly handles numbers and focus\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, value, onChange, onValueChange, ...props }, ref) => {\r\n    // Convert 0 to empty string for display only if it's a number type input\r\n    const displayValue = type === \"number\" && value === 0 ? \"\" : value;\r\n    \r\n    // Use a local ref if none is provided\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n    const resolvedRef = ref || inputRef;\r\n    \r\n    // Track focus state to prevent cursor issues\r\n    const [focused, setFocused] = React.useState(false);\r\n    \r\n    // Log values for debugging\r\n    React.useEffect(() => {\r\n      console.log(\"Input value:\", value, \"Display value:\", displayValue);\r\n    }, [value, displayValue]);\r\n    \r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={resolvedRef}\r\n        value={displayValue}\r\n        onFocus={(e) => {\r\n          setFocused(true);\r\n          props.onFocus?.(e);\r\n        }}\r\n        onBlur={(e) => {\r\n          setFocused(false);\r\n          props.onBlur?.(e);\r\n        }}\r\n        onChange={(e) => {\r\n          const newValue = e.target.value;\r\n          \r\n          // Handle number input type specially\r\n          if (type === \"number\") {\r\n            // Allow empty input (will be treated as 0 in parent component)\r\n            // Don't convert to number here to avoid cursor jumps\r\n            if (newValue === \"\") {\r\n              console.log(\"Empty input detected\");\r\n              onChange?.(e);\r\n              onValueChange?.(newValue);\r\n              return;\r\n            }\r\n            \r\n            // For numeric inputs, validate and clean the input\r\n            if (!/^-?\\d*\\.?\\d*$/.test(newValue)) {\r\n              // Invalid number format, don't update\r\n              return;\r\n            }\r\n          }\r\n          \r\n          onChange?.(e);\r\n          onValueChange?.(newValue);\r\n        }}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nInput.displayName = \"Input\";\r\n\r\nexport { Input };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\quick-jump.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Product' is defined but never used.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\r\nimport { Input } from './input';\r\nimport { Button } from './button';\r\nimport useStore from '../../store/useStore';\r\nimport type { Product } from '../../types';\r\n\r\ninterface QuickJumpProps {\r\n  className?: string;\r\n  onNavigate: (path: string) => void;\r\n  onSelectTab?: (tabId: string) => void;\r\n}\r\n\r\n// Common product tab destinations\r\nconst PRODUCT_TABS = [\r\n  { label: 'Executive Dashboard', tabId: 'dashboard' },\r\n  { label: 'Revenue Forecast', tabId: 'revenue' },\r\n  { label: 'Cost Forecast', tabId: 'costs' },\r\n  { label: '12-Week Forecast', tabId: 'forecast' },\r\n  { label: 'Actuals Tracker', tabId: 'actuals' },\r\n  { label: 'Marketing Analytics', tabId: 'marketing' },\r\n  { label: 'Financial Projections', tabId: 'financials' },\r\n  { label: 'Long-term Projections', tabId: 'longterm' },\r\n  { label: 'Seasonal Analysis', tabId: 'seasonal' },\r\n  { label: 'Scenario Modeling', tabId: 'scenarios' },\r\n  { label: 'Risk Assessment', tabId: 'risk' },\r\n];\r\n\r\n// Common app destinations\r\nconst COMMON_DESTINATIONS = [\r\n  { label: 'Home', path: '/' },\r\n];\r\n\r\nexport function QuickJump({ className, onNavigate, onSelectTab }: QuickJumpProps) {\r\n  const { products, currentProductId } = useStore();\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  \r\n  // Get current product\r\n  const currentProduct = currentProductId \r\n    ? products.find(p => p.info.id === currentProductId) \r\n    : null;\r\n  \r\n  // Create a list of all possible destinations\r\n  const allDestinations = [\r\n    ...COMMON_DESTINATIONS,\r\n    // Only include product tabs if we're currently viewing a product and onSelectTab is provided\r\n    ...(currentProduct && onSelectTab ? PRODUCT_TABS.map(tab => ({\r\n      ...tab,\r\n      isTab: true,\r\n    })) : []),\r\n    // Add other products (excluding current product)\r\n    ...products\r\n      .filter(p => p.info.id !== currentProductId)\r\n      .map(product => ({\r\n        label: product.info.name,\r\n        path: `/product/${product.info.id}`,\r\n        isTab: false,\r\n      }))\r\n  ];\r\n  \r\n  // Filter destinations based on search query\r\n  const filteredDestinations = searchQuery\r\n    ? allDestinations.filter(dest => \r\n        dest.label.toLowerCase().includes(searchQuery.toLowerCase())\r\n      )\r\n    : allDestinations;\r\n  \r\n  const handleInputChange = (e: unknown) => {\r\n    setSearchQuery(e.target.value);\r\n  };\r\n  \r\n  // Handle item click - either navigate to path or select tab\r\n  const handleItemClick = (item: unknown) => {\r\n    if (item.isTab && onSelectTab) {\r\n      // It's a tab and we have a tab handler\r\n      onSelectTab(item.tabId);\r\n    } else if (item.path) {\r\n      // It's a path, use navigation handler\r\n      onNavigate(item.path);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg\">Quick Jump</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          <Input\r\n            placeholder=\"Search destinations...\"\r\n            value={searchQuery}\r\n            onChange={handleInputChange}\r\n            className=\"w-full\"\r\n          />\r\n          \r\n          <div className=\"h-[200px] overflow-auto rounded-md border p-2\">\r\n            <div className=\"space-y-1\">\r\n              {filteredDestinations.map((item, index) => (\r\n                <Button\r\n                  key={`${item.path || item.tabId}-${index}`}\r\n                  variant=\"ghost\"\r\n                  className={`w-full justify-start text-left text-sm px-2 py-1 h-auto ${item.isTab ? 'text-blue-600' : ''}`}\r\n                  onClick={() => handleItemClick(item)}\r\n                >\r\n                  {item.label}\r\n                  {item.isTab && <span className=\"ml-1 text-xs opacity-70\">(tab)</span>}\r\n                </Button>\r\n              ))}\r\n              \r\n              {filteredDestinations.length === 0 && (\r\n                <p className=\"text-sm text-gray-500 px-2 py-4 text-center\">\r\n                  No matching destinations found\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\recently-viewed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\setup-wizard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Product' is defined but never used.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSelectTab' is defined but never used.","line":24,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './card';\r\nimport { Button } from './button';\r\nimport { Progress } from './progress';\r\nimport useStore from '../../store/useStore';\r\nimport type { Product, RevenueMetrics } from '../../types';\r\nimport { ChevronUp, ChevronDown } from 'lucide-react';\r\n\r\ninterface SetupWizardProps {\r\n  className?: string;\r\n  onNavigate: (path: string) => void;\r\n  onSelectTab?: (tabId: string) => void;\r\n}\r\n\r\n// Define a type for the step\r\ninterface SetupStep {\r\n  title: string;\r\n  description: string;\r\n  tabId?: string;\r\n  path?: string;\r\n  isComplete: boolean;\r\n}\r\n\r\nexport function SetupWizard({ className, onNavigate, onSelectTab }: SetupWizardProps) {\r\n  const { products, currentProductId } = useStore();\r\n  const [isCollapsed, setIsCollapsed] = useState(false);\r\n  \r\n  // Find current product\r\n  const currentProduct = currentProductId \r\n    ? products.find(p => p.info.id === currentProductId) \r\n    : null;\r\n  \r\n  // Function to check if at least one revenue field has a value\r\n  const hasAnyRevenueField = (revenueMetrics?: Partial<RevenueMetrics> | null): boolean => {\r\n    if (!revenueMetrics) return false;\r\n    \r\n    // Check if any of the revenue fields have a non-zero value\r\n    return (\r\n      (revenueMetrics.ticketPrice !== undefined && revenueMetrics.ticketPrice > 0) ||\r\n      (revenueMetrics.fbSpend !== undefined && revenueMetrics.fbSpend > 0) ||\r\n      (revenueMetrics.merchandiseSpend !== undefined && revenueMetrics.merchandiseSpend > 0) ||\r\n      (revenueMetrics.digitalPrice !== undefined && revenueMetrics.digitalPrice > 0)\r\n    );\r\n  };\r\n  \r\n  // Setup wizard steps with validation\r\n  const setupSteps = [\r\n    {\r\n      title: 'Product Info',\r\n      description: 'Set up your product details',\r\n      tabId: 'dashboard',\r\n      isComplete: Boolean(currentProduct?.info?.name && currentProduct?.info?.description),\r\n    },\r\n    {\r\n      title: 'Revenue Forecasting',\r\n      description: 'Set up your revenue model',\r\n      tabId: 'revenue',\r\n      isComplete: hasAnyRevenueField(currentProduct?.revenueMetrics),\r\n    },\r\n    {\r\n      title: 'Cost Setup',\r\n      description: 'Configure your costs',\r\n      tabId: 'costs',\r\n      isComplete: Boolean(\r\n        currentProduct?.costMetrics?.eventCosts?.length || \r\n        currentProduct?.costMetrics?.staffRoles?.length\r\n      ),\r\n    },\r\n    {\r\n      title: 'Risk Assessment',\r\n      description: 'Identify potential risks',\r\n      tabId: 'risk',\r\n      isComplete: Boolean(currentProduct?.risks?.length),\r\n    },\r\n  ];\r\n  \r\n  // Calculate overall setup completion percentage\r\n  const completedSteps = setupSteps.filter(step => step.isComplete).length;\r\n  const completionPercentage = (completedSteps / setupSteps.length) * 100;\r\n  \r\n  if (!currentProduct) {\r\n    return null;\r\n  }\r\n  \r\n  // Enhanced step click handler with improved error handling and feedback\r\n  const handleStepClick = (step: SetupStep) => {\r\n    console.log('Step clicked:', step);\r\n    \r\n    // Don't automatically change tabs - only navigate if explicitly requested by the user\r\n    if (step.path && onNavigate) {\r\n      onNavigate(step.path);\r\n    }\r\n    \r\n    // We're disabling automatic tab selection to prevent unwanted tab switching\r\n    // If we need this functionality later, we can re-enable it\r\n  };\r\n  \r\n  const toggleCollapse = () => {\r\n    setIsCollapsed(!isCollapsed);\r\n  };\r\n  \r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <div>\r\n          <CardTitle className=\"text-lg\">Setup Wizard</CardTitle>\r\n          <CardDescription>\r\n            {completedSteps === setupSteps.length\r\n              ? 'All setup steps completed!'\r\n              : `${completedSteps} of ${setupSteps.length} steps completed`}\r\n          </CardDescription>\r\n        </div>\r\n        <Button \r\n          variant=\"ghost\" \r\n          size=\"sm\" \r\n          onClick={toggleCollapse}\r\n          className=\"h-8 w-8 p-0\"\r\n        >\r\n          {isCollapsed ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\r\n        </Button>\r\n      </CardHeader>\r\n      \r\n      {!isCollapsed && (\r\n        <>\r\n          <CardContent className=\"space-y-4 pt-2\">\r\n            <Progress value={completionPercentage} className=\"h-2\" />\r\n            \r\n            <div className=\"space-y-2\">\r\n              {setupSteps.map((step, index) => (\r\n                <div \r\n                  key={index}\r\n                  className=\"flex items-center justify-between border rounded-md p-3\"\r\n                >\r\n                  <div>\r\n                    <h3 className=\"font-medium\">{step.title}</h3>\r\n                    <p className=\"text-sm text-gray-500\">{step.description}</p>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {step.isComplete ? (\r\n                      <div className=\"h-4 w-4 rounded-full bg-green-500\" />\r\n                    ) : (\r\n                      <div className=\"h-4 w-4 rounded-full bg-gray-200\" />\r\n                    )}\r\n                    <Button \r\n                      variant=\"outline\" \r\n                      size=\"sm\"\r\n                      onClick={() => handleStepClick(step)}\r\n                      className=\"hover:bg-blue-50 active:bg-blue-100 transition-colors font-medium\"\r\n                    >\r\n                      {step.isComplete ? 'Edit' : 'Setup'}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n          <CardFooter className=\"justify-between\">\r\n            <p className=\"text-sm text-gray-500\">\r\n              {completionPercentage >= 100 \r\n                ? 'Product fully configured!' \r\n                : 'Complete all steps to fully configure your product'}\r\n            </p>\r\n          </CardFooter>\r\n        </>\r\n      )}\r\n    </Card>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\simple-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\simple-select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\simple-textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\slider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SliderProps' is defined but never used.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\r\nimport { cn } from \"../../lib/utils\"\r\n\r\ninterface SliderProps {\r\n  value: number[]\r\n  onValueChange: (value: number[]) => void\r\n  min?: number\r\n  max?: number\r\n  step?: number\r\n  className?: string\r\n  disabled?: boolean\r\n}\r\n\r\n// @ts-expect-error - React.ElementRef is a valid type, TypeScript just can't find it sometimes\r\nconst Slider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  // @ts-expect-error - React.ComponentPropsWithoutRef is a valid type, TypeScript just can't find it sometimes\r\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <SliderPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full touch-none select-none items-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-gray-200\">\r\n      <SliderPrimitive.Range className=\"absolute h-full bg-blue-600\" />\r\n    </SliderPrimitive.Track>\r\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-blue-600 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\r\n  </SliderPrimitive.Root>\r\n))\r\n\r\nSlider.displayName = \"Slider\"\r\n\r\nexport { Slider } ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateProfile' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FallbackAuth' is defined but never used.","line":20,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":40,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":40,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1711,1714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1711,1714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1741,1744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1741,1744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1774,1777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1774,1777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'password' is defined but never used.","line":91,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'password' is defined but never used.","line":97,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'password' is defined but never used.","line":133,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  createUserWithEmailAndPassword, \r\n  signOut as firebaseSignOut, \r\n  onAuthStateChanged,\r\n  signInAnonymously as firebaseSignInAnonymously,\r\n  sendPasswordResetEmail,\r\n  sendEmailVerification,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  linkWithCredential,\r\n  EmailAuthProvider,\r\n  updateProfile,\r\n  User, \r\n  UserCredential,\r\n  Auth\r\n} from 'firebase/auth';\r\nimport { auth, isFirebaseInitialized } from '../lib/firebase';\r\nimport type { FallbackAuth } from '../lib/firebase';\r\n\r\ninterface AuthContextType {\r\n  currentUser: User | null;\r\n  isLoading: boolean;\r\n  signUp: (email: string, password: string) => Promise<UserCredential>;\r\n  signIn: (email: string, password: string) => Promise<UserCredential>;\r\n  signInWithGoogle: () => Promise<UserCredential>;\r\n  signInAnonymously: () => Promise<UserCredential>;\r\n  logout: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<void>;\r\n  sendVerificationEmail: () => Promise<void>;\r\n  linkAnonymousAccount: (email: string, password: string) => Promise<UserCredential>;\r\n  isAuthenticated: boolean;\r\n  isAnonymous: boolean;\r\n  isEmailVerified: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | null>(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n// Create a mock UserCredential for fallback mode\r\nconst createMockUserCredential = (): UserCredential => {\r\n  return {\r\n    user: null as any,\r\n    providerId: null as any,\r\n    operationType: null as any\r\n  } as UserCredential;\r\n};\r\n\r\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\r\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // Track if Firebase is available - this provider works with both real and fallback auth\r\n  const isFirebaseAvailable = isFirebaseInitialized();\r\n\r\n  useEffect(() => {\r\n    // Only attempt to observe auth state if Firebase is initialized\r\n    let unsubscribe = () => {};\r\n    \r\n    try {\r\n      // Set up the auth state listener\r\n      unsubscribe = onAuthStateChanged(auth as Auth, (user) => {\r\n        setCurrentUser(user);\r\n        setIsLoading(false);\r\n      });\r\n    } catch (error) {\r\n      console.error('Error setting up auth listener:', error);\r\n      // In case of error, just mark as done loading\r\n      setIsLoading(false);\r\n    }\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Create fallback/dummy implementations for all auth methods\r\n  // These will be used when Firebase is not initialized\r\n  const dummyAuth = {\r\n    // Sign up with email and password - fallback\r\n    signUp: async (email: string, password: string) => {\r\n      console.log('Fallback auth: Sign up attempt with', email);\r\n      return createMockUserCredential();\r\n    },\r\n\r\n    // Sign in with email and password - fallback \r\n    signIn: async (email: string, password: string) => {\r\n      console.log('Fallback auth: Sign in attempt with', email);\r\n      return createMockUserCredential();\r\n    },\r\n\r\n    // Sign in with Google - fallback\r\n    signInWithGoogle: async () => {\r\n      console.log('Fallback auth: Sign in with Google attempt');\r\n      return createMockUserCredential();\r\n    },\r\n\r\n    // Sign in anonymously - fallback\r\n    signInAnonymously: async () => {\r\n      console.log('Fallback auth: Anonymous sign in attempt');\r\n      return createMockUserCredential();\r\n    },\r\n\r\n    // Sign out - fallback\r\n    logout: async () => {\r\n      console.log('Fallback auth: Logout attempt');\r\n      return;\r\n    },\r\n\r\n    // Reset password - fallback\r\n    resetPassword: async (email: string) => {\r\n      console.log('Fallback auth: Password reset attempt for', email);\r\n      return;\r\n    },\r\n\r\n    // Send email verification - fallback\r\n    sendVerificationEmail: async () => {\r\n      console.log('Fallback auth: Verification email attempt');\r\n      return;\r\n    },\r\n\r\n    // Link anonymous account - fallback\r\n    linkAnonymousAccount: async (email: string, password: string) => {\r\n      console.log('Fallback auth: Link anonymous account attempt with', email);\r\n      return createMockUserCredential();\r\n    }\r\n  };\r\n\r\n  // Real Firebase auth functions - used when Firebase is initialized\r\n  const firebaseAuthFunctions = {\r\n    // Sign up with email and password\r\n    signUp: (email: string, password: string) => {\r\n      return createUserWithEmailAndPassword(auth as Auth, email, password);\r\n    },\r\n\r\n    // Sign in with email and password\r\n    signIn: (email: string, password: string) => {\r\n      return signInWithEmailAndPassword(auth as Auth, email, password);\r\n    },\r\n\r\n    // Sign in with Google\r\n    signInWithGoogle: async () => {\r\n      const provider = new GoogleAuthProvider();\r\n      return signInWithPopup(auth as Auth, provider);\r\n    },\r\n\r\n    // Sign in anonymously\r\n    signInAnonymously: () => {\r\n      return firebaseSignInAnonymously(auth as Auth);\r\n    },\r\n\r\n    // Sign out\r\n    logout: () => {\r\n      return firebaseSignOut(auth as Auth);\r\n    },\r\n\r\n    // Reset password\r\n    resetPassword: (email: string) => {\r\n      return sendPasswordResetEmail(auth as Auth, email);\r\n    },\r\n\r\n    // Send email verification\r\n    sendVerificationEmail: async () => {\r\n      if (!currentUser) {\r\n        throw new Error('No user logged in');\r\n      }\r\n      return sendEmailVerification(currentUser);\r\n    },\r\n\r\n    // Link anonymous account with email/password\r\n    linkAnonymousAccount: async (email: string, password: string) => {\r\n      if (!currentUser) {\r\n        throw new Error('No user logged in');\r\n      }\r\n      \r\n      if (!currentUser.isAnonymous) {\r\n        throw new Error('User is not anonymous');\r\n      }\r\n      \r\n      const credential = EmailAuthProvider.credential(email, password);\r\n      return linkWithCredential(currentUser, credential);\r\n    }\r\n  };\r\n\r\n  // Choose between real and fallback implementations based on Firebase initialization\r\n  const authImplementation = isFirebaseAvailable ? firebaseAuthFunctions : dummyAuth;\r\n\r\n  const value = {\r\n    currentUser,\r\n    isLoading,\r\n    ...authImplementation,\r\n    isAuthenticated: !!currentUser,\r\n    isAnonymous: currentUser?.isAnonymous || false,\r\n    isEmailVerified: currentUser?.emailVerified || false\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\contexts\\LocalAuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":28,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":28,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'authMethods' and 'currentUser'. Either include them or remove the dependency array.","line":288,"column":6,"nodeType":"ArrayExpression","endLine":288,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [authMethods, currentUser]","fix":{"range":[8301,8303],"text":"[authMethods, currentUser]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  User, \r\n  signInAnonymously as localSignInAnonymously,\r\n  getCurrentUser, \r\n  signOut as localSignOut\r\n} from '../lib/localStorageService';\r\nimport { generateId } from '../lib/localStorageService';\r\n\r\ninterface AuthContextType {\r\n  currentUser: User | null;\r\n  isLoading: boolean;\r\n  signUp: (email: string, password: string) => Promise<User>;\r\n  signIn: (email: string, password: string) => Promise<User>;\r\n  signInWithGoogle: () => Promise<User>;\r\n  signInAnonymously: () => Promise<User>;\r\n  logout: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<void>;\r\n  sendVerificationEmail: () => Promise<void>;\r\n  linkAnonymousAccount: (email: string, password: string) => Promise<User>;\r\n  isAuthenticated: boolean;\r\n  isAnonymous: boolean;\r\n  isEmailVerified: boolean;\r\n}\r\n\r\nconst LocalAuthContext = createContext<AuthContextType | null>(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(LocalAuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n// Mock user management\r\ninterface MockUsers {\r\n  [email: string]: {\r\n    id: string;\r\n    email: string; // Email is required and not null\r\n    password: string;\r\n    displayName: string | null;\r\n    isAnonymous: boolean;\r\n    emailVerified: boolean;\r\n  };\r\n}\r\n\r\n// Simulate a user database in localStorage\r\nconst getUsersFromStorage = (): MockUsers => {\r\n  try {\r\n    const users = localStorage.getItem('mock-users');\r\n    return users ? JSON.parse(users) : {};\r\n  } catch (error) {\r\n    console.error('Error loading mock users:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\nconst saveUsersToStorage = (users: MockUsers): void => {\r\n  localStorage.setItem('mock-users', JSON.stringify(users));\r\n};\r\n\r\nexport const LocalAuthProvider = ({ children }: AuthProviderProps) => {\r\n  const [currentUser, setCurrentUser] = useState<User | null>(getCurrentUser());\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Auth methods for the local implementation\r\n  const authMethods = {\r\n    // Sign up with email/password\r\n    signUp: async (email: string, password: string): Promise<User> => {\r\n      setIsLoading(true);\r\n      try {\r\n        const users = getUsersFromStorage();\r\n        \r\n        if (users[email]) {\r\n          throw new Error('Email already in use');\r\n        }\r\n        \r\n        const newUser = {\r\n          id: generateId(),\r\n          email,\r\n          password,\r\n          displayName: email.split('@')[0],\r\n          isAnonymous: false,\r\n          emailVerified: false\r\n        };\r\n        \r\n        users[email] = newUser;\r\n        saveUsersToStorage(users);\r\n        \r\n        // Create and set the current user (without the password)\r\n        const user: User = {\r\n          id: newUser.id,\r\n          email: newUser.email,\r\n          displayName: newUser.displayName,\r\n          isAnonymous: newUser.isAnonymous,\r\n          emailVerified: newUser.emailVerified\r\n        };\r\n        \r\n        setCurrentUser(user);\r\n        return user;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Sign in with email/password\r\n    signIn: async (email: string, password: string): Promise<User> => {\r\n      setIsLoading(true);\r\n      try {\r\n        const users = getUsersFromStorage();\r\n        const user = users[email];\r\n        \r\n        if (!user) {\r\n          throw new Error('User not found');\r\n        }\r\n        \r\n        if (user.password !== password) {\r\n          throw new Error('Invalid password');\r\n        }\r\n        \r\n        // Create and set the current user (without the password)\r\n        const authUser: User = {\r\n          id: user.id,\r\n          email: user.email,\r\n          displayName: user.displayName,\r\n          isAnonymous: user.isAnonymous,\r\n          emailVerified: user.emailVerified\r\n        };\r\n        \r\n        setCurrentUser(authUser);\r\n        return authUser;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Sign in with Google (mock)\r\n    signInWithGoogle: async (): Promise<User> => {\r\n      setIsLoading(true);\r\n      try {\r\n        // Create a fake Google user with a guaranteed email\r\n        const email = `google-user-${generateId().substring(0, 6)}@example.com`;\r\n        const googleUser: User = {\r\n          id: generateId(),\r\n          email,\r\n          displayName: 'Google User',\r\n          isAnonymous: false,\r\n          emailVerified: true\r\n        };\r\n        \r\n        setCurrentUser(googleUser);\r\n        \r\n        // Also save to our mock database\r\n        const users = getUsersFromStorage();\r\n        users[email] = {\r\n          ...googleUser,\r\n          password: generateId() // random password that user doesn't know\r\n        };\r\n        saveUsersToStorage(users);\r\n        \r\n        return googleUser;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Sign in anonymously\r\n    signInAnonymously: async (): Promise<User> => {\r\n      setIsLoading(true);\r\n      try {\r\n        const user = localSignInAnonymously();\r\n        setCurrentUser(user);\r\n        return user;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Sign out\r\n    logout: async (): Promise<void> => {\r\n      setIsLoading(true);\r\n      try {\r\n        localSignOut();\r\n        setCurrentUser(null);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Reset password (mock)\r\n    resetPassword: async (email: string): Promise<void> => {\r\n      setIsLoading(true);\r\n      try {\r\n        const users = getUsersFromStorage();\r\n        \r\n        if (!users[email]) {\r\n          throw new Error('User not found');\r\n        }\r\n        \r\n        // In a real app, we would send an email here\r\n        console.log(`Password reset requested for: ${email}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Send verification email (mock)\r\n    sendVerificationEmail: async (): Promise<void> => {\r\n      setIsLoading(true);\r\n      try {\r\n        if (!currentUser || !currentUser.email) {\r\n          throw new Error('No user logged in or user has no email');\r\n        }\r\n        \r\n        // In a real app, we would send an email here\r\n        console.log(`Verification email sent to: ${currentUser.email}`);\r\n        \r\n        // For demo purposes, let's just mark the user as verified\r\n        const users = getUsersFromStorage();\r\n        if (currentUser.email && users[currentUser.email]) {\r\n          users[currentUser.email].emailVerified = true;\r\n          saveUsersToStorage(users);\r\n          \r\n          // Update current user\r\n          setCurrentUser({\r\n            ...currentUser,\r\n            emailVerified: true\r\n          });\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    \r\n    // Link anonymous account\r\n    linkAnonymousAccount: async (email: string, password: string): Promise<User> => {\r\n      setIsLoading(true);\r\n      try {\r\n        if (!currentUser) {\r\n          throw new Error('No user logged in');\r\n        }\r\n        \r\n        if (!currentUser.isAnonymous) {\r\n          throw new Error('User is not anonymous');\r\n        }\r\n        \r\n        const users = getUsersFromStorage();\r\n        \r\n        if (users[email]) {\r\n          throw new Error('Email already in use');\r\n        }\r\n        \r\n        // Create a new non-anonymous user\r\n        const linkedUser: User = {\r\n          id: currentUser.id, // Keep the same ID\r\n          email, // Email is guaranteed to be a string here\r\n          displayName: email.split('@')[0],\r\n          isAnonymous: false,\r\n          emailVerified: false\r\n        };\r\n        \r\n        // Save to our mock database\r\n        users[email] = {\r\n          ...linkedUser,\r\n          password\r\n        };\r\n        saveUsersToStorage(users);\r\n        \r\n        // Update current user\r\n        setCurrentUser(linkedUser);\r\n        return linkedUser;\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Auto sign in anonymously on load if no user is present\r\n  useEffect(() => {\r\n    if (!currentUser) {\r\n      authMethods.signInAnonymously();\r\n    }\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    isLoading,\r\n    ...authMethods,\r\n    isAuthenticated: !!currentUser,\r\n    isAnonymous: currentUser?.isAnonymous || false,\r\n    isEmailVerified: currentUser?.emailVerified || false\r\n  };\r\n\r\n  return (\r\n    <LocalAuthContext.Provider value={value}>\r\n      {children}\r\n    </LocalAuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LocalAuthContext; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\contexts\\NetworkStatusContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":23,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":23,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isOnline'. Either include it or remove the dependency array.","line":131,"column":6,"nodeType":"ArrayExpression","endLine":131,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [isOnline]","fix":{"range":[4369,4371],"text":"[isOnline]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { doc, onSnapshot, Firestore } from 'firebase/firestore';\r\nimport { getDb, isFirebaseInitialized } from '../lib/firebase';\r\n\r\n// Define the NetworkStatus type\r\ninterface NetworkStatus {\r\n  isOnline: boolean;\r\n  connectionType: string | null;\r\n  isConnectionPending: boolean;\r\n}\r\n\r\n// Define the context with default values\r\nconst NetworkStatusContext = createContext<NetworkStatus & {\r\n  checkConnection: () => void;\r\n}>({\r\n  isOnline: true,\r\n  connectionType: null,\r\n  isConnectionPending: false,\r\n  checkConnection: () => {}\r\n});\r\n\r\n// Hook to access the network status context\r\nexport const useNetworkStatus = () => useContext(NetworkStatusContext);\r\n\r\n// Provider component for network status\r\nexport const NetworkStatusProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  // State for overall network status\r\n  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);\r\n  // State for connection type (e.g., 4g, wifi, etc.)\r\n  const [connectionType, setConnectionType] = useState<string | null>(null);\r\n  // State to track if we're still determining connection status\r\n  const [isConnectionPending, setIsConnectionPending] = useState<boolean>(true);\r\n\r\n  // Update connection type when available\r\n  useEffect(() => {\r\n    const updateConnectionType = () => {\r\n      if ('connection' in navigator && navigator.connection) {\r\n        // @ts-expect-error - Navigator connection API not fully typed\r\n        const { effectiveType } = navigator.connection;\r\n        setConnectionType(effectiveType);\r\n      }\r\n    };\r\n\r\n    // Get initial connection type\r\n    updateConnectionType();\r\n\r\n    // Listen for connection changes\r\n    // @ts-expect-error - Navigator connection API not fully typed\r\n    if ('connection' in navigator && navigator.connection?.addEventListener) {\r\n      // @ts-expect-error - Navigator connection API not fully typed\r\n      navigator.connection.addEventListener('change', updateConnectionType);\r\n      return () => {\r\n        // @ts-expect-error - Navigator connection API not fully typed\r\n        navigator.connection.removeEventListener('change', updateConnectionType);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Monitor navigator.onLine status\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      setIsOnline(true);\r\n      // When we reconnect, we should re-check if Firestore is available\r\n      checkFirestoreConnection();\r\n    };\r\n\r\n    const handleOffline = () => {\r\n      setIsOnline(false);\r\n      setIsConnectionPending(false);\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Function to check Firestore connection\r\n  const checkFirestoreConnection = () => {\r\n    setIsConnectionPending(true);\r\n    \r\n    // Only check Firestore if it's initialized\r\n    if (!isFirebaseInitialized()) {\r\n      setIsConnectionPending(false);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Attempt to connect to Firestore's special .info/connected document\r\n      // This will tell us if we can reach Firebase's servers\r\n      const db = getDb() as unknown as Firestore;\r\n      \r\n      const unsubscribe = onSnapshot(\r\n        doc(db, '.info/connected'),\r\n        (snapshot) => {\r\n          const connected = snapshot.exists() && snapshot.data()?.connected === true;\r\n          \r\n          if (connected) {\r\n            setIsConnectionPending(false);\r\n          } else {\r\n            // If not connected after a timeout, consider it failed\r\n            setTimeout(() => {\r\n              setIsConnectionPending(false);\r\n            }, 5000);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error('Firestore connection error:', error);\r\n          setIsConnectionPending(false);\r\n        }\r\n      );\r\n\r\n      // Clean up the listener after a timeout\r\n      setTimeout(() => {\r\n        unsubscribe();\r\n      }, 10000);\r\n    } catch (error) {\r\n      console.error('Error checking Firestore connection:', error);\r\n      setIsConnectionPending(false);\r\n    }\r\n  };\r\n\r\n  // Initial check\r\n  useEffect(() => {\r\n    if (isOnline) {\r\n      checkFirestoreConnection();\r\n    }\r\n  }, []);\r\n\r\n  // Function to manually check connection\r\n  const checkConnection = () => {\r\n    if (navigator.onLine) {\r\n      checkFirestoreConnection();\r\n    } else {\r\n      setIsOnline(false);\r\n      setIsConnectionPending(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NetworkStatusContext.Provider \r\n      value={{ \r\n        isOnline, \r\n        connectionType, \r\n        isConnectionPending, \r\n        checkConnection \r\n      }}\r\n    >\r\n      {children}\r\n    </NetworkStatusContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NetworkStatusProvider; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\contexts\\NotificationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'removeNotification'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [removeNotification]","fix":{"range":[1966,1968],"text":"[removeNotification]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\nexport type NotificationType = 'info' | 'success' | 'warning' | 'error';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  message: string;\r\n  type: NotificationType;\r\n  title?: string;\r\n  autoClose?: boolean;\r\n  duration?: number;\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[];\r\n  addNotification: (notification: Omit<Notification, 'id'>) => string;\r\n  updateNotification: (id: string, notification: Partial<Notification>) => void;\r\n  removeNotification: (id: string) => void;\r\n  clearNotifications: () => void;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType>({\r\n  notifications: [],\r\n  addNotification: () => '',\r\n  updateNotification: () => {},\r\n  removeNotification: () => {},\r\n  clearNotifications: () => {},\r\n});\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\ninterface NotificationProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport function NotificationProvider({ children }: NotificationProviderProps) {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  const addNotification = useCallback((notification: Omit<Notification, 'id'>) => {\r\n    const id = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    const newNotification: Notification = {\r\n      id,\r\n      autoClose: notification.type !== 'error', // Auto close everything except errors\r\n      duration: notification.type === 'error' ? 0 : 5000, // 5 seconds for non-errors, 0 (no auto-close) for errors\r\n      ...notification,\r\n    };\r\n    \r\n    setNotifications((prev: Notification[]) => [...prev, newNotification]);\r\n    \r\n    // Auto close notification if specified\r\n    if (newNotification.autoClose && newNotification.duration) {\r\n      setTimeout(() => {\r\n        removeNotification(id);\r\n      }, newNotification.duration);\r\n    }\r\n    \r\n    return id;\r\n  }, []);\r\n\r\n  const updateNotification = useCallback((id: string, updates: Partial<Notification>) => {\r\n    setNotifications((prev: Notification[]) =>\r\n      prev.map((notification: Notification) =>\r\n        notification.id === id\r\n          ? { ...notification, ...updates }\r\n          : notification\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const removeNotification = useCallback((id: string) => {\r\n    setNotifications((prev: Notification[]) => prev.filter((notification: Notification) => notification.id !== id));\r\n  }, []);\r\n\r\n  const clearNotifications = useCallback(() => {\r\n    setNotifications([]);\r\n  }, []);\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        addNotification,\r\n        updateNotification,\r\n        removeNotification,\r\n        clearNotifications,\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n\r\nexport default NotificationProvider; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\contexts\\StorageContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isFirebaseConfigAvailable' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isFirebaseInitialized' is defined but never used.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":58},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { isFirebaseConfigAvailable, isFirebaseInitialized } from '../lib/firebase';\r\nimport { useNotifications } from './NotificationContext';\r\n\r\n// Storage mode key for localStorage\r\nconst STORAGE_MODE_KEY = 'storageMode';\r\n\r\n// Define the storage modes\r\nexport type StorageMode = 'cloud' | 'local';\r\n\r\n// Define the context shape\r\ninterface StorageContextType {\r\n  storageMode: StorageMode;\r\n  setStorageMode: (mode: StorageMode) => Promise<boolean>;\r\n  isCloudAvailable: boolean;\r\n  isInitializing: boolean;\r\n  error: string | null;\r\n}\r\n\r\n// Create the context with a default value\r\nconst StorageContext = createContext<StorageContextType>({\r\n  storageMode: 'local',\r\n  setStorageMode: async () => false,\r\n  isCloudAvailable: false,\r\n  isInitializing: false,\r\n  error: null\r\n});\r\n\r\n// Hook to use the storage context\r\nexport const useStorage = () => useContext(StorageContext);\r\n\r\n// Provider component\r\ninterface StorageProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const StorageProvider: React.FC<StorageProviderProps> = ({ children }) => {\r\n  const [storageMode, setStorageModeState] = useState<StorageMode>('local');\r\n  const [isCloudAvailable, setIsCloudAvailable] = useState<boolean>(false);\r\n  const [isInitializing, setIsInitializing] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { addNotification } = useNotifications();\r\n\r\n  // Initialize storage settings\r\n  useEffect(() => {\r\n    const initializeStorage = async () => {\r\n      setIsInitializing(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Force local storage mode and don't try to check Firebase\r\n        setIsCloudAvailable(false);\r\n        setStorageModeState('local');\r\n        localStorage.setItem(STORAGE_MODE_KEY, 'local');\r\n      } catch (err) {\r\n        console.error('Error initializing storage:', err);\r\n        setError('Failed to initialize storage. Using local storage.');\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Failed to initialize storage. Using local storage.'\r\n        });\r\n        setStorageModeState('local');\r\n        localStorage.setItem(STORAGE_MODE_KEY, 'local');\r\n      } finally {\r\n        setIsInitializing(false);\r\n      }\r\n    };\r\n    \r\n    initializeStorage();\r\n  }, [addNotification]);\r\n  \r\n  // Function to set storage mode\r\n  const setStorageMode = async (mode: StorageMode): Promise<boolean> => {\r\n    // Only allow local storage mode\r\n    if (mode !== 'local') {\r\n      setError('Only local storage mode is supported in this version.');\r\n      addNotification({\r\n        type: 'warning',\r\n        message: 'Only local storage mode is supported in this version.'\r\n      });\r\n      return false;\r\n    }\r\n    \r\n    // Update the storage mode\r\n    setStorageModeState('local');\r\n    localStorage.setItem(STORAGE_MODE_KEY, 'local');\r\n    return true;\r\n  };\r\n  \r\n  const value = {\r\n    storageMode,\r\n    setStorageMode,\r\n    isCloudAvailable,\r\n    isInitializing,\r\n    error\r\n  };\r\n  \r\n  return (\r\n    <StorageContext.Provider value={value}>\r\n      {children}\r\n    </StorageContext.Provider>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\hooks\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\hooks\\useFirebaseErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\hooks\\useHybridStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":4,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDb' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[547,550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[547,550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[605,608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[605,608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[627,630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[627,630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[655,658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[655,658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[697,700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[697,700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2550,2553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2550,2553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2874,2877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2874,2877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2979,2982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2979,2982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3247,3250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3247,3250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4496,4499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4496,4499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actualWeeks' is assigned a value but never used.","line":157,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4814,4817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4814,4817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4943,4946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4943,4946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5012,5015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5012,5015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5879,5882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5879,5882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5959,5962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5959,5962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Stub implementation for hooks/useHybridStore.ts\r\n// This file provides a hybrid storage mechanism that works with local storage only\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { getDb } from '../lib/firebase';\r\n\r\n// The primary localStorage key used by the main app\r\nconst FORTRESS_PRODUCTS_KEY = 'fortress-products';\r\n\r\n// Define Product type for the dashboard\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  price?: number;\r\n  salesVolume?: number;\r\n  marketShare?: number;\r\n  growthRate?: number;\r\n  info?: any;\r\n  revenue?: any;\r\n  cost?: any;\r\n  revenueMetrics?: any;\r\n  costMetrics?: any;\r\n  weeklyProjections?: any[];\r\n  projections?: any;\r\n  actuals?: any[];\r\n}\r\n\r\n// Create a hook that provides the interface expected by ExecutiveDashboard\r\nexport function useHybridStore() {\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\r\n  \r\n  // Initialize with real data from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      // Try to load from main app localStorage key\r\n      const savedProducts = localStorage.getItem(FORTRESS_PRODUCTS_KEY);\r\n      \r\n      if (savedProducts) {\r\n        // Parse the saved products\r\n        const parsedProducts = JSON.parse(savedProducts);\r\n        console.log('Loaded products from localStorage:', parsedProducts);\r\n        setProducts(parsedProducts);\r\n      } else {\r\n        // Use demo data matching the values in the Financial Projections tab\r\n        const demoProducts = [\r\n  {\r\n    id: '1',\r\n    name: 'Premium Subscription',\r\n    price: 299,\r\n    salesVolume: 120,\r\n    marketShare: 35,\r\n            growthRate: 12,\r\n            projections: {\r\n              revenue: 39825,\r\n              cost: 18447,\r\n              profit: 21378\r\n            }\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Basic Subscription',\r\n    price: 99,\r\n    salesVolume: 250,\r\n    marketShare: 45,\r\n    growthRate: 8\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Enterprise Solution',\r\n    price: 1299,\r\n    salesVolume: 15,\r\n    marketShare: 20,\r\n    growthRate: 15\r\n  }\r\n];\r\n        setProducts(demoProducts);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading products:', error);\r\n    } finally {\r\n      setIsInitialized(true);\r\n    }\r\n  }, []);\r\n\r\n  // Helper functions expected by ExecutiveDashboard\r\n  const getTotalRevenue = () => {\r\n    if (products.length === 0) return 0;\r\n    \r\n    let totalRevenue = 0;\r\n    \r\n    // Calculate using both actuals and projections\r\n    products.forEach((product: any) => {\r\n      const actuals = product.actuals || [];\r\n      const weeklyProjections = product.weeklyProjections || [];\r\n      \r\n      if (weeklyProjections.length > 0) {\r\n        let actualRevenue = 0;\r\n        let projectedRevenue = 0;\r\n        \r\n        // Get actual weeks\r\n        const actualWeeks = actuals.map((a: any) => a.week);\r\n        \r\n        // First sum up all actual revenue\r\n        actuals.forEach((actual: any) => {\r\n          if (actual && typeof actual.revenue === 'number') {\r\n            actualRevenue += actual.revenue;\r\n          }\r\n        });\r\n        \r\n        // Then add projected revenue for weeks without actuals\r\n        weeklyProjections.forEach((projection: any) => {\r\n          if (projection && \r\n              typeof projection.totalRevenue === 'number' && \r\n              typeof projection.week === 'number' &&\r\n              !actualWeeks.includes(projection.week)) {\r\n            projectedRevenue += projection.totalRevenue;\r\n          }\r\n        });\r\n        \r\n        totalRevenue = actualRevenue + projectedRevenue;\r\n        console.log(`Product ${product.name || product.info?.name} revenue breakdown:`, {\r\n          actualRevenue,\r\n          projectedRevenue,\r\n          totalRevenue\r\n        });\r\n      } else if (product.projections?.revenue) {\r\n        // Fallback to projections if available\r\n        totalRevenue += product.projections.revenue;\r\n      } else if (product.price && product.salesVolume) {\r\n        // Last fallback to simple calculation\r\n        totalRevenue += product.price * product.salesVolume;\r\n      }\r\n    });\r\n    \r\n    console.log(\"Total revenue calculated:\", totalRevenue);\r\n    \r\n    // If we couldn't extract any revenue, return 0\r\n    return totalRevenue;\r\n  };\r\n\r\n  const getTotalCost = () => {\r\n    if (products.length === 0) return 0;\r\n    \r\n    let totalCost = 0;\r\n    \r\n    // Calculate costs using both actuals and projections\r\n    products.forEach((product: any) => {\r\n      const actuals = product.actuals || [];\r\n      const weeklyProjections = product.weeklyProjections || [];\r\n      \r\n      if (weeklyProjections.length > 0) {\r\n        let actualCost = 0;\r\n        let projectedCost = 0;\r\n        \r\n        // Get actual weeks\r\n        const actualWeeks = actuals.map((a: any) => a.week);\r\n        \r\n        // First handle week 1 specially\r\n        const week1Projection = weeklyProjections.find((p: any) => p.week === 1);\r\n        const week1Actual = actuals.find((a: any) => a.week === 1);\r\n        \r\n        if (week1Actual && week1Projection) {\r\n          // For week 1 with actual data, include setup and marketing costs\r\n          const setupCosts = week1Projection.setupCosts || 0;\r\n          const marketingCosts = week1Projection.marketingCosts || 0;\r\n          \r\n          actualCost += week1Actual.expenses + setupCosts + marketingCosts;\r\n          console.log(`Week 1 actual costs with setup & marketing: ${week1Actual.expenses} + ${setupCosts} + ${marketingCosts} = ${week1Actual.expenses + setupCosts + marketingCosts}`);\r\n        } else if (week1Projection) {\r\n          // If no actuals for week 1, use the projection\r\n          projectedCost += week1Projection.totalCosts || 0;\r\n        }\r\n        \r\n        // Then handle other weeks\r\n        for (let i = 2; i <= 12; i++) {\r\n          const actual = actuals.find((a: any) => a.week === i);\r\n          const projection = weeklyProjections.find((p: any) => p.week === i);\r\n          \r\n          if (actual) {\r\n            // Use actual expenses for this week\r\n            actualCost += actual.expenses || 0;\r\n          } else if (projection) {\r\n            // Use projected costs otherwise\r\n            projectedCost += projection.totalCosts || 0;\r\n          }\r\n        }\r\n        \r\n        totalCost = actualCost + projectedCost;\r\n        console.log(`Product ${product.name || product.info?.name} cost breakdown:`, {\r\n          actualCost,\r\n          projectedCost,\r\n          totalCost\r\n        });\r\n      } else if (product.projections?.cost) {\r\n        // Fallback to projections if available\r\n        totalCost += product.projections.cost;\r\n      } else {\r\n        // Use 45% of revenue as fallback\r\n        const productRevenue = \r\n          product.revenue?.totalRevenue || \r\n          product.revenueMetrics?.projectedRevenue || \r\n          (product.price && product.salesVolume ? product.price * product.salesVolume : 0);\r\n        \r\n        totalCost += productRevenue * 0.45;\r\n      }\r\n    });\r\n    \r\n    console.log(\"Total cost calculated:\", totalCost);\r\n    \r\n    // If we couldn't extract any cost, return 0\r\n    return totalCost;\r\n  };\r\n\r\n  const getTotalProfit = () => {\r\n    const revenue = getTotalRevenue();\r\n    const cost = getTotalCost();\r\n    \r\n    const profit = revenue - cost;\r\n    console.log(\"Total profit calculated:\", profit);\r\n    \r\n    return profit;\r\n  };\r\n  \r\n  return {\r\n    products,\r\n    isInitialized,\r\n    getTotalRevenue,\r\n    getTotalCost,\r\n    getTotalProfit\r\n  };\r\n}\r\n\r\nexport default useHybridStore; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\hooks\\useLocalStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\hooks\\useStorageSync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\calculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'existingIds' is assigned a value but never used.","line":267,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":267,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9287,9290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9287,9290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9671,9674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9671,9674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9894,9897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9894,9897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10445,10448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10445,10448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10812,10815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10812,10815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11234,11237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11234,11237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12053,12056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12053,12056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Product, GrowthMetrics, RevenueMetrics, CostMetrics, CustomerMetrics } from '../types';\r\nimport * as firestoreDb from './firestoreDb';\r\n\r\n// Simple error handling function\r\nexport function handleDatabaseError(error: unknown): never {\r\n  if (error instanceof Error) {\r\n    throw error;\r\n  }\r\n  throw new Error('An unexpected database error occurred');\r\n}\r\n\r\n// LocalStorage Keys\r\nconst PRODUCTS_KEY = 'fortress-products';\r\nconst MARKETING_KPIS_KEY = 'marketing-kpis';\r\n\r\n// Helper function to load data from localStorage\r\nfunction getLocalData<T>(key: string, defaultValue: T): T {\r\n  try {\r\n    const data = localStorage.getItem(key);\r\n    return data ? JSON.parse(data) : defaultValue;\r\n  } catch (error) {\r\n    console.error(`Error loading data from localStorage (${key}):`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\n// Helper function to save data to localStorage\r\nfunction saveLocalData<T>(key: string, data: T): void {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n  } catch (error) {\r\n    console.error(`Error saving data to localStorage (${key}):`, error);\r\n    throw new Error('Failed to save data locally. Check browser storage settings.');\r\n  }\r\n}\r\n\r\n// Determine if we should use Firestore\r\n// We'll use Firestore if the app is running in a browser and the Firebase config is available\r\nconst shouldUseFirestore = (): boolean => {\r\n  try {\r\n    return typeof window !== 'undefined' && \r\n           typeof localStorage !== 'undefined' && \r\n           Boolean(import.meta.env.VITE_FIREBASE_API_KEY);\r\n  } catch (error) {\r\n    console.error('Error determining if Firestore should be used:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get all products\r\nexport async function getProducts(): Promise<Product[]> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        return await firestoreDb.getProducts();\r\n      } catch (firestoreError) {\r\n        console.error('Firestore getProducts failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    return getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Create a new product\r\nexport async function createProduct(product: Omit<Product, 'id'>): Promise<Product> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        return await firestoreDb.createProduct(product);\r\n      } catch (firestoreError) {\r\n        console.error('Firestore createProduct failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const products = getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n    const newProduct = {\r\n      ...product,\r\n      info: {\r\n        ...product.info,\r\n        id: crypto.randomUUID()\r\n      }\r\n    } as Product;\r\n    \r\n    products.push(newProduct);\r\n    saveLocalData(PRODUCTS_KEY, products);\r\n    \r\n    return newProduct;\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update a product\r\nexport async function updateProduct(\r\n  id: string,\r\n  updates: Partial<Product>\r\n): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.updateProduct(id, updates);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore updateProduct failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const products = getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n    const updatedProducts = products.map(p => \r\n      p.info.id === id ? { ...p, ...updates } : p\r\n    );\r\n    saveLocalData(PRODUCTS_KEY, updatedProducts);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a product\r\nexport async function deleteProduct(id: string): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.deleteProduct(id);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore deleteProduct failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const products = getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n    const filteredProducts = products.filter(p => p.info.id !== id);\r\n    saveLocalData(PRODUCTS_KEY, filteredProducts);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update metrics for a product\r\nexport async function updateMetrics(\r\n  productId: string,\r\n  updates: {\r\n    growthMetrics?: Partial<GrowthMetrics>;\r\n    revenueMetrics?: Partial<RevenueMetrics>;\r\n    costMetrics?: Partial<CostMetrics>;\r\n    customerMetrics?: Partial<CustomerMetrics>;\r\n  }\r\n): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.updateMetrics(productId, updates);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore updateMetrics failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const products = getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n    \r\n    const updatedProducts = products.map(product => {\r\n      if (product.info.id === productId) {\r\n        return {\r\n          ...product,\r\n          growthMetrics: updates.growthMetrics \r\n            ? { ...product.growthMetrics, ...updates.growthMetrics }\r\n            : product.growthMetrics,\r\n          revenueMetrics: updates.revenueMetrics \r\n            ? { ...product.revenueMetrics, ...updates.revenueMetrics }\r\n            : product.revenueMetrics,\r\n          costMetrics: updates.costMetrics \r\n            ? { ...product.costMetrics, ...updates.costMetrics }\r\n            : product.costMetrics,\r\n          customerMetrics: updates.customerMetrics \r\n            ? { ...product.customerMetrics, ...updates.customerMetrics }\r\n            : product.customerMetrics,\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    \r\n    saveLocalData(PRODUCTS_KEY, updatedProducts);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update weekly projections\r\nexport async function updateProjections(\r\n  productId: string, \r\n  weeklyProjections: unknown[]\r\n): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.updateProjections(productId, weeklyProjections);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore updateProjections failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const products = getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n    \r\n    const updatedProducts = products.map(product => {\r\n      if (product.info.id === productId) {\r\n        return {\r\n          ...product,\r\n          weeklyProjections: weeklyProjections.map(projection => ({\r\n            ...projection,\r\n            id: projection.id || crypto.randomUUID()\r\n          }))\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    \r\n    saveLocalData(PRODUCTS_KEY, updatedProducts);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update actual metrics\r\nexport async function updateActuals(\r\n  productId: string,\r\n  actualMetrics: unknown[]\r\n): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.updateActuals(productId, actualMetrics);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore updateActuals failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const products = getLocalData<Product[]>(PRODUCTS_KEY, []);\r\n    \r\n    const updatedProducts = products.map(product => {\r\n      if (product.info.id === productId) {\r\n        // Map through existing metrics and update ones that already exist\r\n        // Add new ones that don't exist yet\r\n        const existingIds = new Set(product.actualMetrics.map(m => m.id));\r\n        const updatedMetrics = actualMetrics.map(metric => ({\r\n          ...metric,\r\n          id: metric.id || crypto.randomUUID()\r\n        }));\r\n        \r\n        // Create a map of metrics by ID for easy lookup\r\n        const metricsById = new Map();\r\n        updatedMetrics.forEach(metric => {\r\n          metricsById.set(metric.id, metric);\r\n        });\r\n        \r\n        // Combine existing metrics (if not being updated) with updated ones\r\n        const combinedMetrics = product.actualMetrics\r\n          .filter(metric => !metricsById.has(metric.id))\r\n          .concat(Array.from(metricsById.values()));\r\n        \r\n        return {\r\n          ...product,\r\n          actualMetrics: combinedMetrics\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    \r\n    saveLocalData(PRODUCTS_KEY, updatedProducts);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// MARKETING KPI OPERATIONS\r\n\r\n// Get all marketing KPIs for a product\r\nexport async function getMarketingKPIs(productId: string): Promise<any[]> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        return await firestoreDb.getMarketingKPIs(productId);\r\n      } catch (firestoreError) {\r\n        console.error('Firestore getMarketingKPIs failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    return getLocalData<any[]>(`${MARKETING_KPIS_KEY}-${productId}`, []);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a new marketing KPI\r\nexport async function addMarketingKPI(productId: string, kpi: any): Promise<string> {\r\n  try {\r\n    // Create KPI with ID if not present\r\n    const kpiWithId = {\r\n      ...kpi,\r\n      id: kpi.id || crypto.randomUUID()\r\n    };\r\n    \r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        return await firestoreDb.addMarketingKPI(productId, kpiWithId);\r\n      } catch (firestoreError) {\r\n        console.error('Firestore addMarketingKPI failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const kpis = getLocalData<any[]>(`${MARKETING_KPIS_KEY}-${productId}`, []);\r\n    kpis.push(kpiWithId);\r\n    saveLocalData(`${MARKETING_KPIS_KEY}-${productId}`, kpis);\r\n    \r\n    return kpiWithId.id;\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update a marketing KPI\r\nexport async function updateMarketingKPI(productId: string, kpiId: string, updates: any): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.updateMarketingKPI(kpiId, updates);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore updateMarketingKPI failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const kpis = getLocalData<any[]>(`${MARKETING_KPIS_KEY}-${productId}`, []);\r\n    const updatedKpis = kpis.map(kpi => \r\n      kpi.id === kpiId ? { ...kpi, ...updates } : kpi\r\n    );\r\n    saveLocalData(`${MARKETING_KPIS_KEY}-${productId}`, updatedKpis);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a marketing KPI\r\nexport async function deleteMarketingKPI(productId: string, kpiId: string): Promise<void> {\r\n  try {\r\n    // Try to use Firestore first\r\n    if (shouldUseFirestore()) {\r\n      try {\r\n        await firestoreDb.deleteMarketingKPI(kpiId);\r\n        return;\r\n      } catch (firestoreError) {\r\n        console.error('Firestore deleteMarketingKPI failed, falling back to localStorage:', firestoreError);\r\n      }\r\n    }\r\n    \r\n    // Fallback to localStorage\r\n    const kpis = getLocalData<any[]>(`${MARKETING_KPIS_KEY}-${productId}`, []);\r\n    const filteredKpis = kpis.filter(kpi => kpi.id !== kpiId);\r\n    saveLocalData(`${MARKETING_KPIS_KEY}-${productId}`, filteredKpis);\r\n  } catch (error) {\r\n    handleDatabaseError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cloud Integration Complete!\r\n * \r\n * This module now supports cloud-based data storage via Firebase Firestore.\r\n * The implementation maintains backward compatibility with localStorage\r\n * for offline usage and as a fallback mechanism.\r\n * \r\n * Key improvements:\r\n * - Data is now synchronized across devices for all users\r\n * - Better scalability for larger datasets\r\n * - More reliable data persistence\r\n * - Automatic conflict resolution\r\n * \r\n * The module will automatically use Firestore when:\r\n * 1. The application is running in a browser environment\r\n * 2. Firebase environment variables are properly configured\r\n * \r\n * If either condition is not met, it gracefully falls back to localStorage.\r\n */","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Firestore' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4649,4652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4649,4652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5866,5869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5866,5869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6119,6122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6119,6122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7727,7730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7727,7730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8087,8090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8087,8090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8477,8480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8477,8480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11992,11995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11992,11995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FirebaseError } from 'firebase/app';\r\nimport { useNotifications } from '../contexts/NotificationContext';\r\nimport { Firestore } from 'firebase/firestore';\r\n\r\n/**\r\n * Error handling utility for Firebase and other errors\r\n */\r\n\r\n// Map Firebase error codes to user-friendly messages\r\nconst firebaseErrorMessages: Record<string, string> = {\r\n  // Auth errors\r\n  'auth/user-disabled': 'This account has been disabled. Please contact support.',\r\n  'auth/user-not-found': 'Account not found. Please check your credentials or sign up.',\r\n  'auth/wrong-password': 'Incorrect password. Please try again or reset your password.',\r\n  'auth/email-already-in-use': 'This email is already in use. Please use a different email or sign in.',\r\n  'auth/invalid-email': 'Invalid email address. Please check your email and try again.',\r\n  'auth/weak-password': 'Password is too weak. Please use a stronger password.',\r\n  'auth/requires-recent-login': 'This action requires you to sign in again for security reasons.',\r\n  'auth/account-exists-with-different-credential': 'An account already exists with the same email but different sign-in credentials.',\r\n  \r\n  // Firestore errors\r\n  'permission-denied': 'You do not have permission to perform this operation.',\r\n  'unavailable': 'The service is currently unavailable. Please try again later.',\r\n  'not-found': 'The requested document was not found.',\r\n  'already-exists': 'The document already exists.',\r\n  'resource-exhausted': 'You have exceeded your quota. Please try again later.',\r\n  'failed-precondition': 'The operation was rejected because the system is not in a state required for the operation.',\r\n  'aborted': 'The operation was aborted, typically due to a concurrency issue.',\r\n  'cancelled': 'The operation was cancelled.',\r\n  \r\n  // Generic fallbacks by error category\r\n  'auth/': 'Authentication error. Please try again or contact support.',\r\n  'firestore/': 'Database error. Please try again or contact support.',\r\n  'storage/': 'Storage error. Please try again or contact support.',\r\n  'functions/': 'Server function error. Please try again or contact support.',\r\n};\r\n\r\n// Parse Firebase errors and return user-friendly message\r\nexport function getFirebaseErrorMessage(error: FirebaseError): string {\r\n  // Check for exact error code match\r\n  if (error.code && firebaseErrorMessages[error.code]) {\r\n    return firebaseErrorMessages[error.code];\r\n  }\r\n  \r\n  // Check for error category match\r\n  for (const errorPrefix in firebaseErrorMessages) {\r\n    if (error.code && error.code.startsWith(errorPrefix) && \r\n        errorPrefix.endsWith('/')) {\r\n      return firebaseErrorMessages[errorPrefix];\r\n    }\r\n  }\r\n  \r\n  // Fallback error message\r\n  return error.message || 'An unexpected error occurred. Please try again.';\r\n}\r\n\r\n// Get error message from any type of error\r\nexport function getErrorMessage(error: unknown): string {\r\n  // Handle Firebase errors\r\n  if (error && typeof error === 'object' && 'code' in error) {\r\n    return getFirebaseErrorMessage(error as FirebaseError);\r\n  }\r\n  \r\n  // Handle standard Error objects\r\n  if (error instanceof Error) {\r\n    return error.message;\r\n  }\r\n  \r\n  // Handle string errors\r\n  if (typeof error === 'string') {\r\n    return error;\r\n  }\r\n  \r\n  // Fallback\r\n  return 'An unexpected error occurred. Please try again.';\r\n}\r\n\r\n// Network error messages based on status code\r\nexport function getNetworkErrorMessage(status: number): string {\r\n  switch (status) {\r\n    case 400:\r\n      return 'Bad request. Please check your input and try again.';\r\n    case 401:\r\n      return 'You are not authorized. Please sign in again.';\r\n    case 403:\r\n      return 'You do not have permission to access this resource.';\r\n    case 404:\r\n      return 'The requested resource was not found.';\r\n    case 408:\r\n      return 'Request timeout. Please check your connection and try again.';\r\n    case 409:\r\n      return 'Conflict with the current state of the resource.';\r\n    case 429:\r\n      return 'Too many requests. Please try again later.';\r\n    case 500:\r\n      return 'Server error. Please try again later or contact support.';\r\n    case 502:\r\n      return 'Bad gateway. Please try again later.';\r\n    case 503:\r\n      return 'Service unavailable. Please try again later.';\r\n    case 504:\r\n      return 'Gateway timeout. Please try again later.';\r\n    default:\r\n      return status >= 500\r\n        ? 'Server error. Please try again later or contact support.'\r\n        : 'An error occurred. Please try again.';\r\n  }\r\n}\r\n\r\n// Create a safe async function wrapper that catches errors\r\nexport function createSafeAsyncFunction<T extends (...args: unknown[]) => Promise<any>>(\r\n  fn: T,\r\n  errorHandler?: (error: unknown) => void\r\n): (...args: Parameters<T>) => Promise<ReturnType<T> | null> {\r\n  return async (...args: Parameters<T>): Promise<ReturnType<T> | null> => {\r\n    try {\r\n      return await fn(...args);\r\n    } catch (error) {\r\n      if (errorHandler) {\r\n        errorHandler(error);\r\n      } else {\r\n        console.error('Error in async operation:', error);\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\n// Custom error types\r\nexport class NetworkError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'NetworkError';\r\n  }\r\n}\r\n\r\nexport class AppFirebaseError extends Error {\r\n  code: string;\r\n  \r\n  constructor(message: string, code: string) {\r\n    super(message);\r\n    this.name = 'AppFirebaseError';\r\n    this.code = code;\r\n  }\r\n}\r\n\r\nexport class ValidationError extends Error {\r\n  field?: string;\r\n  \r\n  constructor(message: string, field?: string) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n    this.field = field;\r\n  }\r\n}\r\n\r\n// Offline operation types\r\nexport interface OfflineOperation {\r\n  id: string;\r\n  type: 'create' | 'update' | 'delete';\r\n  collection: string;\r\n  docId: string;\r\n  data?: Record<string, any>;\r\n  timestamp: number;\r\n  retryCount: number;\r\n}\r\n\r\n// Function to queue operations for offline processing\r\nexport function queueOfflineOperation(\r\n  type: OfflineOperation['type'],\r\n  collection: string,\r\n  docId: string,\r\n  data?: Record<string, any>\r\n): string {\r\n  const operation: OfflineOperation = {\r\n    id: `offline-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\r\n    type,\r\n    collection,\r\n    docId,\r\n    data,\r\n    timestamp: Date.now(),\r\n    retryCount: 0\r\n  };\r\n  \r\n  // Get existing operations\r\n  const existingOperations = getOfflineOperations();\r\n  \r\n  // Add new operation\r\n  const updatedOperations = [...existingOperations, operation];\r\n  \r\n  // Save to localStorage\r\n  localStorage.setItem('offlineOperations', JSON.stringify(updatedOperations));\r\n  \r\n  return operation.id;\r\n}\r\n\r\n// Function to get all pending offline operations\r\nexport function getOfflineOperations(): OfflineOperation[] {\r\n  try {\r\n    const operations = localStorage.getItem('offlineOperations');\r\n    return operations ? JSON.parse(operations) : [];\r\n  } catch (error) {\r\n    console.error('Error retrieving offline operations:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Function to remove an operation from the queue\r\nexport function removeOfflineOperation(id: string): boolean {\r\n  const operations = getOfflineOperations();\r\n  const updatedOperations = operations.filter(op => op.id !== id);\r\n  \r\n  if (updatedOperations.length < operations.length) {\r\n    localStorage.setItem('offlineOperations', JSON.stringify(updatedOperations));\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n// Function to clear all offline operations\r\nexport function clearOfflineOperations(): void {\r\n  localStorage.removeItem('offlineOperations');\r\n}\r\n\r\n// Helper function to determine if an error is a Firebase Auth error\r\nexport function isFirebaseAuthError(error: any): error is FirebaseError {\r\n  return error && \r\n         typeof error === 'object' && \r\n         error.name === 'FirebaseError' && \r\n         error.code && \r\n         typeof error.code === 'string' && \r\n         error.code.startsWith('auth/');\r\n}\r\n\r\n// Helper function to determine if an error is a Firestore error\r\nexport function isFirestoreError(error: any): error is FirebaseError {\r\n  return error && \r\n         typeof error === 'object' && \r\n         error.name === 'FirebaseError' && \r\n         error.code && \r\n         typeof error.code === 'string' && \r\n         (error.code.startsWith('firestore/') || error.code.includes('permission-denied'));\r\n}\r\n\r\n// Helper function to handle errors consistently\r\nexport function handleError(error: any, fallbackMessage: string = 'An error occurred') {\r\n  console.error(error);\r\n  \r\n  if (error instanceof NetworkError) {\r\n    return {\r\n      message: error.message || 'Network connection error',\r\n      type: 'error' as const,\r\n      retry: true\r\n    };\r\n  }\r\n  \r\n  if (isFirebaseAuthError(error)) {\r\n    return {\r\n      message: getFirebaseAuthErrorMessage(error.code),\r\n      type: 'error' as const,\r\n      retry: false\r\n    };\r\n  }\r\n  \r\n  if (isFirestoreError(error)) {\r\n    return {\r\n      message: getFirestoreErrorMessage(error.code),\r\n      type: 'error' as const,\r\n      retry: error.code === 'firestore/unavailable' || error.code === 'firestore/network-request-failed'\r\n    };\r\n  }\r\n  \r\n  if (error instanceof ValidationError) {\r\n    return {\r\n      message: error.message,\r\n      type: 'warning' as const,\r\n      field: error.field,\r\n      retry: false\r\n    };\r\n  }\r\n  \r\n  if (error instanceof AppFirebaseError) {\r\n    return {\r\n      message: error.message,\r\n      type: 'error' as const,\r\n      retry: false\r\n    };\r\n  }\r\n  \r\n  return {\r\n    message: error.message || fallbackMessage,\r\n    type: 'error' as const,\r\n    retry: false\r\n  };\r\n}\r\n\r\n// User-friendly Firebase Auth error messages\r\nfunction getFirebaseAuthErrorMessage(code: string): string {\r\n  switch (code) {\r\n    case 'auth/email-already-in-use':\r\n      return 'This email is already registered.';\r\n    case 'auth/invalid-email':\r\n      return 'Please enter a valid email address.';\r\n    case 'auth/user-disabled':\r\n      return 'This account has been disabled.';\r\n    case 'auth/user-not-found':\r\n      return 'No account found with this email.';\r\n    case 'auth/wrong-password':\r\n      return 'Incorrect password.';\r\n    case 'auth/weak-password':\r\n      return 'Password should be at least 6 characters.';\r\n    case 'auth/requires-recent-login':\r\n      return 'Please log in again to complete this action.';\r\n    case 'auth/too-many-requests':\r\n      return 'Too many attempts. Please try again later.';\r\n    default:\r\n      return 'Authentication error. Please try again.';\r\n  }\r\n}\r\n\r\n// User-friendly Firestore error messages\r\nfunction getFirestoreErrorMessage(code: string): string {\r\n  switch (code) {\r\n    case 'firestore/cancelled':\r\n      return 'The operation was cancelled.';\r\n    case 'firestore/invalid-argument':\r\n      return 'Invalid argument provided.';\r\n    case 'firestore/deadline-exceeded':\r\n      return 'Operation timed out.';\r\n    case 'firestore/not-found':\r\n      return 'The requested document was not found.';\r\n    case 'firestore/permission-denied':\r\n      return 'You don\\'t have permission to perform this action.';\r\n    case 'firestore/unauthenticated':\r\n      return 'You must be logged in to perform this action.';\r\n    case 'firestore/unavailable':\r\n      return 'The service is currently unavailable. Please try again later.';\r\n    case 'firestore/network-request-failed':\r\n      return 'Network error. Please check your connection.';\r\n    default:\r\n      return 'Database error. Please try again.';\r\n  }\r\n}\r\n\r\n// Hook for error handling with notifications\r\nexport function useErrorHandler() {\r\n  const { addNotification } = useNotifications();\r\n  \r\n  return (error: unknown, fallbackMessage: string = 'An error occurred') => {\r\n    const { message, type } = handleError(error, fallbackMessage);\r\n    \r\n    addNotification({\r\n      type: type,\r\n      message: message\r\n    });\r\n    \r\n    return message;\r\n  };\r\n}\r\n\r\n// Check if the error is due to being offline\r\nexport function isOfflineError(error: any): boolean {\r\n  if (error instanceof NetworkError) return true;\r\n  \r\n  if (isFirestoreError(error)) {\r\n    return error.code === 'firestore/unavailable' || \r\n           error.code === 'firestore/network-request-failed';\r\n  }\r\n  \r\n  return typeof error === 'object' && \r\n         (error.message?.includes('network') || \r\n          error.message?.includes('offline') || \r\n          error.message?.includes('internet') ||\r\n          error.message?.includes('connection'));\r\n}\r\n\r\n// Function to safely execute a Firebase operation with offline fallback\r\nexport async function safeFirebaseOperation<T>(\r\n  operation: () => Promise<T>,\r\n  offlineCallback: () => void,\r\n  fallbackValue?: T\r\n): Promise<T> {\r\n  try {\r\n    return await operation();\r\n  } catch (error) {\r\n    if (isOfflineError(error)) {\r\n      offlineCallback();\r\n      if (fallbackValue !== undefined) {\r\n        return fallbackValue;\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\exportUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPercent' is defined but never used.","line":6,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MarketingChannelPerformance' is defined but never used.","line":9,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1806,1809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1806,1809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3010,3013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3010,3013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is assigned a value but never used.","line":511,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":511,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":730,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":730,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30323,30326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30323,30326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Export Utilities\r\n * Functions for exporting data in various formats (CSV, PDF, Excel)\r\n */\r\n\r\nimport { formatCurrency, formatNumber, formatPercent } from './utils';\r\nimport { generateDashboardPDF } from './generatePDF';\r\nimport { generateMarketingPDF } from './generateMarketingPDF';\r\nimport type { Product, WeeklyProjection, ActualMetrics, MarketingChannelPerformance } from '../types';\r\n\r\ninterface ExportOptions {\r\n  fileName?: string;\r\n  includeTimestamp?: boolean;\r\n}\r\n\r\n/**\r\n * Export data as CSV file\r\n */\r\nexport function exportToCsv(\r\n  data: Record<string, any>[], \r\n  columns: { key: string, label: string, format?: (value: unknown) => string }[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  if (!data || !data.length) {\r\n    console.warn('No data to export');\r\n    return;\r\n  }\r\n\r\n  // Create header row\r\n  const headerRow = columns.map(col => `\"${col.label}\"`).join(',');\r\n  \r\n  // Create data rows\r\n  const dataRows = data.map(row => {\r\n    return columns.map(col => {\r\n      const value = row[col.key];\r\n      const formattedValue = col.format ? col.format(value) : value;\r\n      // Escape quotes and wrap in quotes\r\n      return `\"${String(formattedValue).replace(/\"/g, '\"\"')}\"`;\r\n    }).join(',');\r\n  }).join('\\n');\r\n  \r\n  // Combine header and rows\r\n  const csvContent = `${headerRow}\\n${dataRows}`;\r\n  \r\n  // Generate filename\r\n  const timestamp = options.includeTimestamp ? `_${new Date().toISOString().slice(0, 10)}` : '';\r\n  const fileName = `${options.fileName || 'export'}${timestamp}.csv`;\r\n  \r\n  // Create download link\r\n  downloadFile(csvContent, fileName, 'text/csv;charset=utf-8;');\r\n}\r\n\r\n/**\r\n * Export data for Excel\r\n * Creates a CSV with UTF-8 BOM to ensure Excel handles special characters correctly\r\n */\r\nexport function exportForExcel(\r\n  data: Record<string, any>[], \r\n  columns: { key: string, label: string, format?: (value: unknown) => string }[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  if (!data || !data.length) {\r\n    console.warn('No data to export');\r\n    return;\r\n  }\r\n  \r\n  // Add BOM for Excel\r\n  const BOM = '\\uFEFF';\r\n  \r\n  // Create header row\r\n  const headerRow = columns.map(col => `\"${col.label}\"`).join(',');\r\n  \r\n  // Create data rows\r\n  const dataRows = data.map(row => {\r\n    return columns.map(col => {\r\n      const value = row[col.key];\r\n      const formattedValue = col.format ? col.format(value) : value;\r\n      // Escape quotes and wrap in quotes\r\n      return `\"${String(formattedValue).replace(/\"/g, '\"\"')}\"`;\r\n    }).join(',');\r\n  }).join('\\n');\r\n  \r\n  // Combine with BOM, header, and rows\r\n  const csvContent = `${BOM}${headerRow}\\n${dataRows}`;\r\n  \r\n  // Generate filename\r\n  const timestamp = options.includeTimestamp ? `_${new Date().toISOString().slice(0, 10)}` : '';\r\n  const fileName = `${options.fileName || 'export'}${timestamp}.xlsx`;\r\n  \r\n  // Create download link\r\n  downloadFile(csvContent, fileName, 'application/vnd.ms-excel');\r\n}\r\n\r\n/**\r\n * Export data as JSON file\r\n */\r\nexport function exportToJSON(\r\n  data: any,\r\n  options: ExportOptions = {}\r\n): void {\r\n  if (!data) {\r\n    console.warn('No data to export');\r\n    return;\r\n  }\r\n  \r\n  // Convert to JSON string with pretty formatting\r\n  const jsonContent = JSON.stringify(data, null, 2);\r\n  \r\n  // Generate filename\r\n  const timestamp = options.includeTimestamp ? `_${new Date().toISOString().slice(0, 10)}` : '';\r\n  const fileName = `${options.fileName || 'export'}${timestamp}.json`;\r\n  \r\n  // Create download link\r\n  downloadFile(jsonContent, fileName, 'application/json');\r\n}\r\n\r\n/**\r\n * Export comprehensive financial data for Excel analysis\r\n * Creates a multi-sheet Excel compatible format\r\n */\r\nexport function exportFinancialData(\r\n  product: Product,\r\n  options: ExportOptions = {}\r\n): void {\r\n  if (!product) {\r\n    console.warn('No product data to export');\r\n    return;\r\n  }\r\n  \r\n  const { info, weeklyProjections, actualMetrics = [] } = product;\r\n  const timestamp = options.includeTimestamp ? `_${new Date().toISOString().slice(0, 10)}` : '';\r\n  const baseFileName = `${info.name}_Financial_Data${timestamp}`;\r\n\r\n  // Export weekly projections\r\n  exportWeeklyProjections(weeklyProjections, {\r\n    fileName: `${baseFileName}_Weekly_Projections`,\r\n    includeTimestamp: false\r\n  });\r\n  \r\n  // Export actual metrics\r\n  if (actualMetrics.length > 0) {\r\n    exportActualMetrics(actualMetrics, {\r\n      fileName: `${baseFileName}_Actual_Metrics`,\r\n      includeTimestamp: false\r\n    });\r\n  }\r\n  \r\n  // Export revenue breakdown\r\n  exportRevenueBreakdown(weeklyProjections, actualMetrics, {\r\n    fileName: `${baseFileName}_Revenue_Breakdown`,\r\n    includeTimestamp: false\r\n  });\r\n  \r\n  // Export cost analysis\r\n  exportCostAnalysis(weeklyProjections, actualMetrics, {\r\n    fileName: `${baseFileName}_Cost_Analysis`,\r\n    includeTimestamp: false\r\n  });\r\n  \r\n  // Export variance analysis (projected vs. actual)\r\n  exportVarianceAnalysis(weeklyProjections, actualMetrics, {\r\n    fileName: `${baseFileName}_Variance_Analysis`,\r\n    includeTimestamp: false\r\n  });\r\n}\r\n\r\n/**\r\n * Export weekly projections data for Excel\r\n */\r\nexport function exportWeeklyProjections(\r\n  weeklyProjections: WeeklyProjection[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  const columns = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'numberOfEvents', label: 'Events' },\r\n    { key: 'averageEventAttendance', label: 'Avg Attendance', format: formatNumber },\r\n    { key: 'footTraffic', label: 'Total Attendance', format: formatNumber },\r\n    { key: 'ticketRevenue', label: 'Ticket Revenue', format: formatCurrency },\r\n    { key: 'fbRevenue', label: 'F&B Revenue', format: formatCurrency },\r\n    { key: 'merchandiseRevenue', label: 'Merchandise Revenue', format: formatCurrency },\r\n    { key: 'digitalRevenue', label: 'Digital Revenue', format: formatCurrency },\r\n    { key: 'totalRevenue', label: 'Total Revenue', format: formatCurrency },\r\n    { key: 'marketingCosts', label: 'Marketing Costs', format: formatCurrency },\r\n    { key: 'staffingCosts', label: 'Staffing Costs', format: formatCurrency },\r\n    { key: 'eventCosts', label: 'Event Costs', format: formatCurrency },\r\n    { key: 'setupCosts', label: 'Setup Costs', format: formatCurrency },\r\n    { key: 'totalCosts', label: 'Total Costs', format: formatCurrency },\r\n    { key: 'weeklyProfit', label: 'Weekly Profit', format: formatCurrency },\r\n    { key: 'cumulativeProfit', label: 'Cumulative Profit', format: formatCurrency },\r\n    { key: 'notes', label: 'Notes' }\r\n  ];\r\n  \r\n  exportForExcel(weeklyProjections, columns, options);\r\n}\r\n\r\n/**\r\n * Export actual metrics data for Excel\r\n */\r\nexport function exportActualMetrics(\r\n  actualMetrics: ActualMetrics[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  const columns = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'date', label: 'Date' },\r\n    { key: 'numberOfEvents', label: 'Events' },\r\n    { key: 'averageEventAttendance', label: 'Avg Attendance', format: formatNumber },\r\n    { key: 'footTraffic', label: 'Total Attendance', format: formatNumber },\r\n    { key: 'ticketRevenue', label: 'Ticket Revenue', format: formatCurrency },\r\n    { key: 'fbRevenue', label: 'F&B Revenue', format: formatCurrency },\r\n    { key: 'merchandiseRevenue', label: 'Merchandise Revenue', format: formatCurrency },\r\n    { key: 'digitalRevenue', label: 'Digital Revenue', format: formatCurrency },\r\n    { key: 'totalRevenue', label: 'Total Revenue', format: formatCurrency },\r\n    { key: 'marketingCost', label: 'Marketing Costs', format: formatCurrency },\r\n    { key: 'staffCost', label: 'Staffing Costs', format: formatCurrency },\r\n    { key: 'eventsCosts', label: 'Event Costs', format: formatCurrency },\r\n    { key: 'setupCosts', label: 'Setup Costs', format: formatCurrency },\r\n    { key: 'technologyCost', label: 'Technology Costs', format: formatCurrency },\r\n    { key: 'officeCost', label: 'Office Costs', format: formatCurrency },\r\n    { key: 'otherCosts', label: 'Other Costs', format: formatCurrency },\r\n    { key: 'totalCosts', label: 'Total Costs', format: formatCurrency },\r\n    { key: 'weeklyProfit', label: 'Weekly Profit', format: formatCurrency },\r\n    { key: 'cumulativeProfit', label: 'Cumulative Profit', format: formatCurrency },\r\n    { key: 'notes', label: 'Notes' }\r\n  ];\r\n  \r\n  exportForExcel(actualMetrics, columns, options);\r\n}\r\n\r\n/**\r\n * Export revenue breakdown data for Excel\r\n */\r\nexport function exportRevenueBreakdown(\r\n  weeklyProjections: WeeklyProjection[],\r\n  actualMetrics: ActualMetrics[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  // Create combined dataset with revenue components\r\n  const revenueData = weeklyProjections.map(week => {\r\n    // Find corresponding actual data for this week if it exists\r\n    const actual = actualMetrics.find(a => a.week === week.week);\r\n    \r\n    return {\r\n      week: week.week,\r\n      projected_ticket: week.ticketRevenue,\r\n      actual_ticket: actual?.ticketRevenue || 0,\r\n      variance_ticket: (actual?.ticketRevenue || 0) - week.ticketRevenue,\r\n      \r\n      projected_fb: week.fbRevenue,\r\n      actual_fb: actual?.fbRevenue || 0,\r\n      variance_fb: (actual?.fbRevenue || 0) - week.fbRevenue,\r\n      \r\n      projected_merchandise: week.merchandiseRevenue,\r\n      actual_merchandise: actual?.merchandiseRevenue || 0,\r\n      variance_merchandise: (actual?.merchandiseRevenue || 0) - week.merchandiseRevenue,\r\n      \r\n      projected_digital: week.digitalRevenue,\r\n      actual_digital: actual?.digitalRevenue || 0,\r\n      variance_digital: (actual?.digitalRevenue || 0) - week.digitalRevenue,\r\n      \r\n      projected_total: week.totalRevenue,\r\n      actual_total: actual?.totalRevenue || 0,\r\n      variance_total: (actual?.totalRevenue || 0) - week.totalRevenue,\r\n      \r\n      variance_percentage: week.totalRevenue > 0 \r\n        ? (((actual?.totalRevenue || 0) - week.totalRevenue) / week.totalRevenue) * 100 \r\n        : 0\r\n    };\r\n  });\r\n  \r\n  const columns = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'projected_ticket', label: 'Projected Ticket Revenue', format: formatCurrency },\r\n    { key: 'actual_ticket', label: 'Actual Ticket Revenue', format: formatCurrency },\r\n    { key: 'variance_ticket', label: 'Variance (Ticket)', format: formatCurrency },\r\n    \r\n    { key: 'projected_fb', label: 'Projected F&B Revenue', format: formatCurrency },\r\n    { key: 'actual_fb', label: 'Actual F&B Revenue', format: formatCurrency },\r\n    { key: 'variance_fb', label: 'Variance (F&B)', format: formatCurrency },\r\n    \r\n    { key: 'projected_merchandise', label: 'Projected Merchandise Revenue', format: formatCurrency },\r\n    { key: 'actual_merchandise', label: 'Actual Merchandise Revenue', format: formatCurrency },\r\n    { key: 'variance_merchandise', label: 'Variance (Merchandise)', format: formatCurrency },\r\n    \r\n    { key: 'projected_digital', label: 'Projected Digital Revenue', format: formatCurrency },\r\n    { key: 'actual_digital', label: 'Actual Digital Revenue', format: formatCurrency },\r\n    { key: 'variance_digital', label: 'Variance (Digital)', format: formatCurrency },\r\n    \r\n    { key: 'projected_total', label: 'Projected Total Revenue', format: formatCurrency },\r\n    { key: 'actual_total', label: 'Actual Total Revenue', format: formatCurrency },\r\n    { key: 'variance_total', label: 'Variance (Total)', format: formatCurrency },\r\n    { key: 'variance_percentage', label: 'Variance %', format: (v: number) => v.toFixed(2) + '%' }\r\n  ];\r\n  \r\n  exportForExcel(revenueData, columns, options);\r\n}\r\n\r\n/**\r\n * Export cost analysis data for Excel\r\n */\r\nexport function exportCostAnalysis(\r\n  weeklyProjections: WeeklyProjection[],\r\n  actualMetrics: ActualMetrics[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  // Create combined dataset with cost components\r\n  const costData = weeklyProjections.map(week => {\r\n    // Find corresponding actual data for this week if it exists\r\n    const actual = actualMetrics.find(a => a.week === week.week);\r\n    \r\n    return {\r\n      week: week.week,\r\n      projected_marketing: week.marketingCosts,\r\n      actual_marketing: actual?.marketingCost || 0,\r\n      variance_marketing: (actual?.marketingCost || 0) - week.marketingCosts,\r\n      \r\n      projected_staffing: week.staffingCosts,\r\n      actual_staffing: actual?.staffCost || 0,\r\n      variance_staffing: (actual?.staffCost || 0) - week.staffingCosts,\r\n      \r\n      projected_event: week.eventCosts,\r\n      actual_event: actual?.eventsCosts || 0,\r\n      variance_event: (actual?.eventsCosts || 0) - week.eventCosts,\r\n      \r\n      projected_setup: week.setupCosts,\r\n      actual_setup: actual?.setupCosts || 0,\r\n      variance_setup: (actual?.setupCosts || 0) - week.setupCosts,\r\n      \r\n      actual_technology: actual?.technologyCost || 0,\r\n      actual_office: actual?.officeCost || 0,\r\n      actual_other: actual?.otherCosts || 0,\r\n      \r\n      projected_total: week.totalCosts,\r\n      actual_total: actual?.totalCosts || 0,\r\n      variance_total: (actual?.totalCosts || 0) - week.totalCosts,\r\n      \r\n      variance_percentage: week.totalCosts > 0 \r\n        ? (((actual?.totalCosts || 0) - week.totalCosts) / week.totalCosts) * 100 \r\n        : 0\r\n    };\r\n  });\r\n  \r\n  const columns = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'projected_marketing', label: 'Projected Marketing Costs', format: formatCurrency },\r\n    { key: 'actual_marketing', label: 'Actual Marketing Costs', format: formatCurrency },\r\n    { key: 'variance_marketing', label: 'Variance (Marketing)', format: formatCurrency },\r\n    \r\n    { key: 'projected_staffing', label: 'Projected Staffing Costs', format: formatCurrency },\r\n    { key: 'actual_staffing', label: 'Actual Staffing Costs', format: formatCurrency },\r\n    { key: 'variance_staffing', label: 'Variance (Staffing)', format: formatCurrency },\r\n    \r\n    { key: 'projected_event', label: 'Projected Event Costs', format: formatCurrency },\r\n    { key: 'actual_event', label: 'Actual Event Costs', format: formatCurrency },\r\n    { key: 'variance_event', label: 'Variance (Event)', format: formatCurrency },\r\n    \r\n    { key: 'projected_setup', label: 'Projected Setup Costs', format: formatCurrency },\r\n    { key: 'actual_setup', label: 'Actual Setup Costs', format: formatCurrency },\r\n    { key: 'variance_setup', label: 'Variance (Setup)', format: formatCurrency },\r\n    \r\n    { key: 'actual_technology', label: 'Actual Technology Costs', format: formatCurrency },\r\n    { key: 'actual_office', label: 'Actual Office Costs', format: formatCurrency },\r\n    { key: 'actual_other', label: 'Actual Other Costs', format: formatCurrency },\r\n    \r\n    { key: 'projected_total', label: 'Projected Total Costs', format: formatCurrency },\r\n    { key: 'actual_total', label: 'Actual Total Costs', format: formatCurrency },\r\n    { key: 'variance_total', label: 'Variance (Total)', format: formatCurrency },\r\n    { key: 'variance_percentage', label: 'Variance %', format: (v: number) => v.toFixed(2) + '%' }\r\n  ];\r\n  \r\n  exportForExcel(costData, columns, options);\r\n}\r\n\r\n/**\r\n * Export variance analysis data for Excel \r\n */\r\nexport function exportVarianceAnalysis(\r\n  weeklyProjections: WeeklyProjection[],\r\n  actualMetrics: ActualMetrics[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  // Create combined dataset with performance and variance metrics\r\n  const varianceData = weeklyProjections.map(week => {\r\n    // Find corresponding actual data for this week if it exists\r\n    const actual = actualMetrics.find(a => a.week === week.week);\r\n    \r\n    return {\r\n      week: week.week,\r\n      projected_revenue: week.totalRevenue,\r\n      actual_revenue: actual?.totalRevenue || 0,\r\n      revenue_variance: (actual?.totalRevenue || 0) - week.totalRevenue,\r\n      revenue_variance_pct: week.totalRevenue > 0 \r\n        ? (((actual?.totalRevenue || 0) - week.totalRevenue) / week.totalRevenue) * 100 \r\n        : 0,\r\n      \r\n      projected_costs: week.totalCosts,\r\n      actual_costs: actual?.totalCosts || 0,\r\n      costs_variance: (actual?.totalCosts || 0) - week.totalCosts,\r\n      costs_variance_pct: week.totalCosts > 0 \r\n        ? (((actual?.totalCosts || 0) - week.totalCosts) / week.totalCosts) * 100 \r\n        : 0,\r\n      \r\n      projected_profit: week.weeklyProfit,\r\n      actual_profit: actual?.weeklyProfit || 0,\r\n      profit_variance: (actual?.weeklyProfit || 0) - week.weeklyProfit,\r\n      profit_variance_pct: week.weeklyProfit !== 0\r\n        ? (((actual?.weeklyProfit || 0) - week.weeklyProfit) / Math.abs(week.weeklyProfit)) * 100 \r\n        : 0,\r\n      \r\n      projected_attendance: week.footTraffic,\r\n      actual_attendance: actual?.footTraffic || 0,\r\n      attendance_variance: (actual?.footTraffic || 0) - week.footTraffic,\r\n      attendance_variance_pct: week.footTraffic > 0 \r\n        ? (((actual?.footTraffic || 0) - week.footTraffic) / week.footTraffic) * 100 \r\n        : 0\r\n    };\r\n  });\r\n  \r\n  const columns = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'projected_revenue', label: 'Projected Revenue', format: formatCurrency },\r\n    { key: 'actual_revenue', label: 'Actual Revenue', format: formatCurrency },\r\n    { key: 'revenue_variance', label: 'Variance ($)', format: formatCurrency },\r\n    { key: 'revenue_variance_pct', label: 'Variance (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    \r\n    { key: 'projected_costs', label: 'Projected Costs', format: formatCurrency },\r\n    { key: 'actual_costs', label: 'Actual Costs', format: formatCurrency },\r\n    { key: 'costs_variance', label: 'Variance ($)', format: formatCurrency },\r\n    { key: 'costs_variance_pct', label: 'Variance (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    \r\n    { key: 'projected_profit', label: 'Projected Profit', format: formatCurrency },\r\n    { key: 'actual_profit', label: 'Actual Profit', format: formatCurrency },\r\n    { key: 'profit_variance', label: 'Variance ($)', format: formatCurrency },\r\n    { key: 'profit_variance_pct', label: 'Variance (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    \r\n    { key: 'projected_attendance', label: 'Projected Attendance', format: formatNumber },\r\n    { key: 'actual_attendance', label: 'Actual Attendance', format: formatNumber },\r\n    { key: 'attendance_variance', label: 'Variance (#)', format: formatNumber },\r\n    { key: 'attendance_variance_pct', label: 'Variance (%)', format: (v: number) => v.toFixed(2) + '%' }\r\n  ];\r\n  \r\n  exportForExcel(varianceData, columns, options);\r\n}\r\n\r\n/**\r\n * Export marketing channel performance data\r\n */\r\nexport function exportMarketingChannelData(\r\n  actualMetrics: ActualMetrics[],\r\n  options: ExportOptions = {}\r\n): void {\r\n  // Flatten channel performance data from all weeks\r\n  const allChannelData: unknown[] = [];\r\n  \r\n  actualMetrics.forEach(week => {\r\n    if (week.channelPerformance && week.channelPerformance.length > 0) {\r\n      week.channelPerformance.forEach(channel => {\r\n        allChannelData.push({\r\n          week: week.week,\r\n          date: week.date,\r\n          channelId: channel.channelId,\r\n          spend: channel.spend || 0,\r\n          revenue: channel.revenue || 0,\r\n          impressions: channel.impressions || 0,\r\n          clicks: channel.clicks || 0,\r\n          conversions: channel.conversions || 0,\r\n          ctr: channel.impressions ? (channel.clicks! / channel.impressions) * 100 : 0,\r\n          conversionRate: channel.clicks ? (channel.conversions! / channel.clicks) * 100 : 0,\r\n          cpc: channel.clicks ? channel.spend! / channel.clicks : 0,\r\n          cpa: channel.conversions ? channel.spend! / channel.conversions : 0,\r\n          roi: channel.spend ? ((channel.revenue! - channel.spend) / channel.spend) * 100 : 0\r\n        });\r\n      });\r\n    }\r\n  });\r\n  \r\n  if (allChannelData.length === 0) {\r\n    console.warn('No marketing channel data to export');\r\n    return;\r\n  }\r\n  \r\n  const columns = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'date', label: 'Date' },\r\n    { key: 'channelId', label: 'Channel' },\r\n    { key: 'spend', label: 'Spend', format: formatCurrency },\r\n    { key: 'revenue', label: 'Revenue', format: formatCurrency },\r\n    { key: 'impressions', label: 'Impressions', format: formatNumber },\r\n    { key: 'clicks', label: 'Clicks', format: formatNumber },\r\n    { key: 'conversions', label: 'Conversions', format: formatNumber },\r\n    { key: 'ctr', label: 'CTR (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    { key: 'conversionRate', label: 'Conversion Rate (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    { key: 'cpc', label: 'Cost per Click', format: formatCurrency },\r\n    { key: 'cpa', label: 'Cost per Acquisition', format: formatCurrency },\r\n    { key: 'roi', label: 'ROI (%)', format: (v: number) => v.toFixed(2) + '%' }\r\n  ];\r\n  \r\n  exportForExcel(allChannelData, columns, options);\r\n}\r\n\r\n/**\r\n * Export product data as PDF report\r\n * reportType determines which PDF generator to use\r\n */\r\nexport type ReportType = 'financial' | 'marketing' | 'executive';\r\n\r\nexport async function exportToPDF(\r\n  product: Product,\r\n  reportType: ReportType = 'financial',\r\n  options: ExportOptions = {}\r\n): Promise<Blob> {\r\n  if (!product) {\r\n    console.warn('No product data to export');\r\n    throw new Error('No product data to export');\r\n  }\r\n  \r\n  // Generate the PDF blob based on report type\r\n  let pdfBlob: Blob;\r\n  \r\n  switch (reportType) {\r\n    case 'marketing':\r\n      pdfBlob = await generateMarketingPDF(product);\r\n      break;\r\n    case 'executive':\r\n      // Future implementation - for now fallback to financial\r\n      pdfBlob = await generateDashboardPDF(product);\r\n      break;\r\n    case 'financial':\r\n    default:\r\n      pdfBlob = await generateDashboardPDF(product);\r\n      break;\r\n  }\r\n  \r\n  return pdfBlob;\r\n}\r\n\r\n/**\r\n * Export marketing performance data as CSV\r\n */\r\nexport function exportMarketingPerformance(channelData: unknown[], timeframe: string): void {\r\n  const columns = [\r\n    { key: 'name', label: 'Channel' },\r\n    { key: 'budget', label: 'Budget', format: formatCurrency },\r\n    { key: 'totalSpend', label: 'Total Spend', format: formatCurrency },\r\n    { key: 'totalRevenue', label: 'Total Revenue', format: formatCurrency },\r\n    { key: 'expectedROI', label: 'Expected ROI (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    { key: 'actualROI', label: 'Actual ROI (%)', format: (v: number) => v.toFixed(2) + '%' },\r\n    { key: 'impressions', label: 'Impressions', format: formatNumber },\r\n    { key: 'clicks', label: 'Clicks', format: formatNumber },\r\n    { key: 'conversions', label: 'Conversions', format: formatNumber },\r\n    { \r\n      key: 'conversionRate', \r\n      label: 'Conversion Rate',\r\n      format: (row: unknown) => ((row.clicks && row.impressions) ? ((row.clicks / row.impressions) * 100).toFixed(2) + '%' : '0.00%')\r\n    },\r\n    {\r\n      key: 'cpa',\r\n      label: 'Cost per Acquisition',\r\n      format: (row: unknown) => (row.conversions ? formatCurrency(row.totalSpend / row.conversions) : '-')\r\n    }\r\n  ];\r\n  \r\n  exportToCsv(channelData, columns, {\r\n    fileName: `Marketing_Performance_${timeframe.replace(/\\s+/g, '_')}`,\r\n    includeTimestamp: true\r\n  });\r\n}\r\n\r\n/**\r\n * Export budget optimization recommendations\r\n */\r\nexport function exportBudgetRecommendations(recommendations: unknown[], goal: string): void {\r\n  const columns = [\r\n    { key: 'name', label: 'Channel' },\r\n    { key: 'currentBudget', label: 'Current Budget', format: formatCurrency },\r\n    { key: 'recommendedBudget', label: 'Recommended Budget', format: formatCurrency },\r\n    { key: 'change', label: 'Change', format: formatCurrency },\r\n    { key: 'percentChange', label: 'Change %', format: (v: number) => v.toFixed(2) + '%' },\r\n    { key: 'performanceMetric', label: 'Performance Metric', format: (v: unknown) => {\r\n      if (goal === 'roi') return v.toFixed(2) + '%';\r\n      if (goal === 'revenue') return formatCurrency(v);\r\n      return formatCurrency(v); // CPA or other\r\n    }},\r\n    { key: 'reason', label: 'Recommendation Reason' }\r\n  ];\r\n  \r\n  exportToCsv(recommendations, columns, {\r\n    fileName: `Budget_Optimization_${goal.toUpperCase()}`,\r\n    includeTimestamp: true\r\n  });\r\n}\r\n\r\n/**\r\n * Helper to download a file to the user's device\r\n */\r\nexport function downloadFile(content: string | Blob, fileName: string, mimeType?: string): void {\r\n  let blob: Blob;\r\n  \r\n  // Convert string content to blob if needed\r\n  if (typeof content === 'string') {\r\n    blob = new Blob([content], { type: mimeType });\r\n  } else {\r\n    blob = content;\r\n  }\r\n  \r\n  // Create download link\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = fileName;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  \r\n  // Clean up\r\n  setTimeout(() => {\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }, 100);\r\n}\r\n\r\n// Add the new exportScenarioComparison function\r\nexport const exportScenarioComparison = (\r\n  product: Product, \r\n  baselineData: WeeklyProjection[], \r\n  scenarioData: WeeklyProjection[],\r\n  scenarioName: string\r\n) => {\r\n  // Define the columns for export\r\n  const formatCurrency = (value: unknown) => `$${Number(value).toLocaleString()}`;\r\n  const formatPercentage = (value: unknown) => `${Number(value).toFixed(2)}%`;\r\n  const formatNumber = (value: unknown) => Number(value).toLocaleString();\r\n  \r\n  const headers = [\r\n    { key: 'week', label: 'Week' },\r\n    { key: 'baseline_revenue', label: 'Baseline Revenue', format: formatCurrency },\r\n    { key: 'scenario_revenue', label: 'Scenario Revenue', format: formatCurrency },\r\n    { key: 'revenue_diff', label: 'Revenue Difference', format: formatCurrency },\r\n    { key: 'revenue_diff_pct', label: 'Revenue Diff %', format: formatPercentage },\r\n    { key: 'baseline_cost', label: 'Baseline Cost', format: formatCurrency },\r\n    { key: 'scenario_cost', label: 'Scenario Cost', format: formatCurrency },\r\n    { key: 'cost_diff', label: 'Cost Difference', format: formatCurrency },\r\n    { key: 'cost_diff_pct', label: 'Cost Diff %', format: formatPercentage },\r\n    { key: 'baseline_profit', label: 'Baseline Profit', format: formatCurrency },\r\n    { key: 'scenario_profit', label: 'Scenario Profit', format: formatCurrency },\r\n    { key: 'profit_diff', label: 'Profit Difference', format: formatCurrency },\r\n    { key: 'profit_diff_pct', label: 'Profit Diff %', format: formatPercentage },\r\n    { key: 'baseline_attendance', label: 'Baseline Attendance', format: formatNumber },\r\n    { key: 'scenario_attendance', label: 'Scenario Attendance', format: formatNumber },\r\n    { key: 'attendance_diff_pct', label: 'Attendance Diff %', format: formatPercentage }\r\n  ];\r\n\r\n  // Generate weekly data for export\r\n  const dataset = baselineData.map((baseline, index) => {\r\n    const scenario = scenarioData[index];\r\n    \r\n    // Calculate revenues\r\n    const baselineRevenue = baseline.ticketRevenue + baseline.fbRevenue + \r\n                           baseline.merchandiseRevenue + baseline.digitalRevenue;\r\n    \r\n    const scenarioRevenue = scenario.ticketRevenue + scenario.fbRevenue + \r\n                          scenario.merchandiseRevenue + scenario.digitalRevenue;\r\n    \r\n    // Calculate costs\r\n    const baselineCost = baseline.marketingCosts + baseline.staffingCosts + \r\n                        baseline.eventCosts + baseline.setupCosts;\r\n                        \r\n    const scenarioCost = scenario.marketingCosts + scenario.staffingCosts + \r\n                       scenario.eventCosts + scenario.setupCosts;\r\n    \r\n    // Calculate profits\r\n    const baselineProfit = baselineRevenue - baselineCost;\r\n    const scenarioProfit = scenarioRevenue - scenarioCost;\r\n    \r\n    // Calculate differences\r\n    const revenueDiff = scenarioRevenue - baselineRevenue;\r\n    const revenueDiffPct = baselineRevenue !== 0 ? (revenueDiff / baselineRevenue) * 100 : 0;\r\n    \r\n    const costDiff = scenarioCost - baselineCost;\r\n    const costDiffPct = baselineCost !== 0 ? (costDiff / baselineCost) * 100 : 0;\r\n    \r\n    const profitDiff = scenarioProfit - baselineProfit;\r\n    const profitDiffPct = baselineProfit !== 0 ? (profitDiff / baselineProfit) * 100 : 0;\r\n    \r\n    const attendanceDiffPct = baseline.footTraffic !== 0 \r\n      ? ((scenario.footTraffic - baseline.footTraffic) / baseline.footTraffic) * 100 \r\n      : 0;\r\n    \r\n    return {\r\n      week: baseline.week,\r\n      baseline_revenue: baselineRevenue,\r\n      scenario_revenue: scenarioRevenue,\r\n      revenue_diff: revenueDiff,\r\n      revenue_diff_pct: revenueDiffPct,\r\n      baseline_cost: baselineCost,\r\n      scenario_cost: scenarioCost,\r\n      cost_diff: costDiff,\r\n      cost_diff_pct: costDiffPct,\r\n      baseline_profit: baselineProfit,\r\n      scenario_profit: scenarioProfit,\r\n      profit_diff: profitDiff,\r\n      profit_diff_pct: profitDiffPct,\r\n      baseline_attendance: baseline.footTraffic,\r\n      scenario_attendance: scenario.footTraffic,\r\n      attendance_diff_pct: attendanceDiffPct\r\n    };\r\n  });\r\n\r\n  // Add summary row\r\n  const baselineTotalRevenue = dataset.reduce((sum, row) => sum + row.baseline_revenue, 0);\r\n  const scenarioTotalRevenue = dataset.reduce((sum, row) => sum + row.scenario_revenue, 0);\r\n  const baselineTotalCost = dataset.reduce((sum, row) => sum + row.baseline_cost, 0);\r\n  const scenarioTotalCost = dataset.reduce((sum, row) => sum + row.scenario_cost, 0);\r\n  const baselineTotalProfit = dataset.reduce((sum, row) => sum + row.baseline_profit, 0);\r\n  const scenarioTotalProfit = dataset.reduce((sum, row) => sum + row.scenario_profit, 0);\r\n  const baselineTotalAttendance = dataset.reduce((sum, row) => sum + row.baseline_attendance, 0);\r\n  const scenarioTotalAttendance = dataset.reduce((sum, row) => sum + row.scenario_attendance, 0);\r\n  \r\n  const totalRevenueDiff = scenarioTotalRevenue - baselineTotalRevenue;\r\n  const totalRevenueDiffPct = baselineTotalRevenue !== 0 ? (totalRevenueDiff / baselineTotalRevenue) * 100 : 0;\r\n  const totalCostDiff = scenarioTotalCost - baselineTotalCost;\r\n  const totalCostDiffPct = baselineTotalCost !== 0 ? (totalCostDiff / baselineTotalCost) * 100 : 0;\r\n  const totalProfitDiff = scenarioTotalProfit - baselineTotalProfit;\r\n  const totalProfitDiffPct = baselineTotalProfit !== 0 ? (totalProfitDiff / baselineTotalProfit) * 100 : 0;\r\n  const totalAttendanceDiffPct = baselineTotalAttendance !== 0 \r\n    ? ((scenarioTotalAttendance - baselineTotalAttendance) / baselineTotalAttendance) * 100 \r\n    : 0;\r\n    \r\n  dataset.push({\r\n    week: 'TOTAL' as any,\r\n    baseline_revenue: baselineTotalRevenue,\r\n    scenario_revenue: scenarioTotalRevenue,\r\n    revenue_diff: totalRevenueDiff,\r\n    revenue_diff_pct: totalRevenueDiffPct,\r\n    baseline_cost: baselineTotalCost,\r\n    scenario_cost: scenarioTotalCost,\r\n    cost_diff: totalCostDiff,\r\n    cost_diff_pct: totalCostDiffPct,\r\n    baseline_profit: baselineTotalProfit,\r\n    scenario_profit: scenarioTotalProfit,\r\n    profit_diff: totalProfitDiff,\r\n    profit_diff_pct: totalProfitDiffPct,\r\n    baseline_attendance: baselineTotalAttendance,\r\n    scenario_attendance: scenarioTotalAttendance,\r\n    attendance_diff_pct: totalAttendanceDiffPct\r\n  });\r\n\r\n  // Export the data as Excel\r\n  return exportForExcel(\r\n    dataset,\r\n    headers,\r\n    { \r\n      fileName: `${product.info.name}_${scenarioName}_Comparison`,\r\n      includeTimestamp: true\r\n    }\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\firebase-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\firebase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[253,256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[253,256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[284,287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[284,287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[712,715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[712,715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":23,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":25,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[888,891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[888,891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":26,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":33,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1181,1184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1181,1184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":34,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1228,1231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1228,1231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Simplified Firebase stub for local-only usage\r\n// This provides mock implementations that don't depend on actual Firebase\r\n\r\n// Create mock implementations of Firebase interfaces\r\nexport interface FallbackFirestore {\r\n  collection: (path: string) => any;\r\n  doc: (path: string) => any;\r\n  type: 'firestore';\r\n}\r\n\r\nexport interface FallbackAuth {\r\n  currentUser: null;\r\n  onAuthStateChanged: (callback: (user: null) => void) => void;\r\n  signInAnonymously: () => Promise<{user: {uid: string}}>;\r\n  signOut: () => Promise<void>;\r\n  type: 'auth';\r\n}\r\n\r\n// Create a simple local-only implementation of Firestore\r\nconst createFallbackFirestore = (): FallbackFirestore => ({\r\n  collection: () => ({\r\n    add: (data: any) => Promise.resolve({ id: 'local-' + Date.now() }),\r\n    doc: (id: string) => ({\r\n      get: () => Promise.resolve({ exists: false, data: () => ({}) }),\r\n      set: (data: any) => Promise.resolve(),\r\n      update: (data: any) => Promise.resolve(),\r\n      delete: () => Promise.resolve()\r\n    }),\r\n    get: () => Promise.resolve({ docs: [] })\r\n  }),\r\n  doc: (path: string) => ({\r\n    get: () => Promise.resolve({ exists: false, data: () => ({}) }),\r\n    set: (data: any) => Promise.resolve(),\r\n    update: (data: any) => Promise.resolve(),\r\n    delete: () => Promise.resolve()\r\n  }),\r\n  type: 'firestore'\r\n});\r\n\r\n// Create a simple local-only implementation of Auth\r\nconst createFallbackAuth = (): FallbackAuth => ({\r\n  currentUser: null,\r\n  onAuthStateChanged: (callback) => {\r\n    callback(null);\r\n    return () => {};\r\n  },\r\n  signInAnonymously: () => Promise.resolve({ user: { uid: 'anonymous-' + Date.now() } }),\r\n  signOut: () => Promise.resolve(),\r\n  type: 'auth'\r\n});\r\n\r\n// Create and export the fallback instances\r\nexport const db = createFallbackFirestore();\r\nexport const auth = createFallbackAuth();\r\nexport const analytics = null;\r\n\r\n// Stubbed functions to maintain API compatibility\r\nexport const isFirebaseInitialized = () => false;\r\nexport const isFirebaseConfigAvailable = () => false;\r\nexport const initializeFirebase = async () => false;\r\nexport const resetFirebase = () => {};\r\nexport const getDb = () => db;\r\nexport const getFirebaseAuth = () => auth; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\firebaseConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\firestoreDb.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'METRICS_COLLECTION' is assigned a value but never used.","line":27,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PROJECTIONS_COLLECTION' is assigned a value but never used.","line":28,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ACTUALS_COLLECTION' is assigned a value but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3723,3726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3723,3726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5344,5347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5344,5347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8955,8958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8955,8958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9560,9563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9560,9563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10243,10246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10243,10246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \r\n  collection, \r\n  doc, \r\n  getDoc, \r\n  getDocs, \r\n  setDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  DocumentData,\r\n  Firestore\r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\nimport type { \r\n  Product, \r\n  GrowthMetrics, \r\n  RevenueMetrics, \r\n  CostMetrics, \r\n  CustomerMetrics \r\n} from '../types';\r\n\r\n// Firestore Collection Names\r\nconst PRODUCTS_COLLECTION = 'products';\r\nconst METRICS_COLLECTION = 'metrics';\r\nconst PROJECTIONS_COLLECTION = 'projections';\r\nconst ACTUALS_COLLECTION = 'actuals';\r\nconst MARKETING_KPIS_COLLECTION = 'marketingKpis';\r\n\r\n// Error Handling\r\nexport function handleFirestoreError(error: unknown): never {\r\n  console.error('Firestore operation failed:', error);\r\n  if (error instanceof Error) {\r\n    throw error;\r\n  }\r\n  throw new Error('An unexpected Firestore error occurred');\r\n}\r\n\r\n// Helper to convert Firestore timestamps to Dates in objects\r\nconst convertTimestamps = (obj: DocumentData): unknown => {\r\n  const result: unknown = { ...obj };\r\n  Object.keys(result).forEach(key => {\r\n    // Convert timestamps to Date objects\r\n    if (result[key] instanceof Timestamp) {\r\n      result[key] = result[key].toDate();\r\n    }\r\n    // Recursively convert timestamps in nested objects\r\n    else if (typeof result[key] === 'object' && result[key] !== null) {\r\n      result[key] = convertTimestamps(result[key]);\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\n// PRODUCT OPERATIONS\r\n\r\n// Get all products\r\nexport async function getProducts(): Promise<Product[]> {\r\n  try {\r\n    const productsRef = collection(db as Firestore, PRODUCTS_COLLECTION);\r\n    const snapshot = await getDocs(productsRef);\r\n    \r\n    const products: Product[] = [];\r\n    snapshot.forEach(doc => {\r\n      const productData = convertTimestamps(doc.data());\r\n      // Make sure product has proper structure\r\n      if (!productData.info) {\r\n        productData.info = { id: doc.id, name: '', description: '', type: 'Experiential Events' };\r\n      }\r\n      if (!productData.info.id) {\r\n        productData.info.id = doc.id;\r\n      }\r\n      products.push(productData as Product);\r\n    });\r\n    \r\n    return products;\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error; // Unreachable due to handleFirestoreError, but keeps TypeScript happy\r\n  }\r\n}\r\n\r\n// Create a new product\r\nexport async function createProduct(product: Omit<Product, 'id'>): Promise<Product> {\r\n  try {\r\n    // Generate a unique ID\r\n    const productId = crypto.randomUUID();\r\n    \r\n    // Create the product object with the generated ID\r\n    const newProduct = {\r\n      ...product,\r\n      info: {\r\n        ...product.info,\r\n        id: productId,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n    } as Product;\r\n    \r\n    // Set the document with the generated ID\r\n    await setDoc(doc(db as Firestore, PRODUCTS_COLLECTION, productId), {\r\n      ...newProduct,\r\n      // Add server timestamp for cloud-based tracking\r\n      _createdAt: serverTimestamp(),\r\n      _updatedAt: serverTimestamp()\r\n    });\r\n    \r\n    return newProduct;\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update a product\r\nexport async function updateProduct(\r\n  id: string,\r\n  updates: Partial<Product>\r\n): Promise<void> {\r\n  try {\r\n    // Reference to the product document\r\n    const productRef = doc(db as Firestore, PRODUCTS_COLLECTION, id);\r\n    \r\n    // Get the current product\r\n    const productDoc = await getDoc(productRef);\r\n    if (!productDoc.exists()) {\r\n      throw new Error(`Product with ID ${id} not found`);\r\n    }\r\n    \r\n    // Add updatedAt timestamp to the info object\r\n    const updatedProduct: Record<string, any> = {\r\n      ...updates,\r\n      info: updates.info ? {\r\n        ...updates.info,\r\n        updatedAt: new Date()\r\n      } : undefined,\r\n      _updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    // Remove undefined fields\r\n    Object.keys(updatedProduct).forEach(key => \r\n      updatedProduct[key] === undefined && delete updatedProduct[key]\r\n    );\r\n    \r\n    // Update the document\r\n    await updateDoc(productRef, updatedProduct);\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a product\r\nexport async function deleteProduct(id: string): Promise<void> {\r\n  try {\r\n    await deleteDoc(doc(db as Firestore, PRODUCTS_COLLECTION, id));\r\n    \r\n    // Later we could also clean up related subcollections here\r\n    // For now, we'll leave that as a future improvement\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update metrics for a product\r\nexport async function updateMetrics(\r\n  productId: string,\r\n  updates: {\r\n    growthMetrics?: Partial<GrowthMetrics>;\r\n    revenueMetrics?: Partial<RevenueMetrics>;\r\n    costMetrics?: Partial<CostMetrics>;\r\n    customerMetrics?: Partial<CustomerMetrics>;\r\n  }\r\n): Promise<void> {\r\n  try {\r\n    const productRef = doc(db as Firestore, PRODUCTS_COLLECTION, productId);\r\n    \r\n    // Get the current product\r\n    const productDoc = await getDoc(productRef);\r\n    if (!productDoc.exists()) {\r\n      throw new Error(`Product with ID ${productId} not found`);\r\n    }\r\n    \r\n    const product = productDoc.data() as Product;\r\n    \r\n    // Create the update object\r\n    const updateData: Record<string, any> = {\r\n      _updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    // Only include fields that are being updated\r\n    if (updates.growthMetrics) {\r\n      updateData.growthMetrics = {\r\n        ...product.growthMetrics,\r\n        ...updates.growthMetrics\r\n      };\r\n    }\r\n    \r\n    if (updates.revenueMetrics) {\r\n      updateData.revenueMetrics = {\r\n        ...product.revenueMetrics,\r\n        ...updates.revenueMetrics\r\n      };\r\n    }\r\n    \r\n    if (updates.costMetrics) {\r\n      updateData.costMetrics = {\r\n        ...product.costMetrics,\r\n        ...updates.costMetrics\r\n      };\r\n    }\r\n    \r\n    if (updates.customerMetrics) {\r\n      updateData.customerMetrics = {\r\n        ...product.customerMetrics,\r\n        ...updates.customerMetrics\r\n      };\r\n    }\r\n    \r\n    // Update the document\r\n    await updateDoc(productRef, updateData);\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update weekly projections\r\nexport async function updateProjections(\r\n  productId: string, \r\n  weeklyProjections: unknown[]\r\n): Promise<void> {\r\n  try {\r\n    const productRef = doc(db as Firestore, PRODUCTS_COLLECTION, productId);\r\n    \r\n    // Get the current product\r\n    const productDoc = await getDoc(productRef);\r\n    if (!productDoc.exists()) {\r\n      throw new Error(`Product with ID ${productId} not found`);\r\n    }\r\n    \r\n    // Ensure each projection has an ID\r\n    const updatedProjections = weeklyProjections.map(projection => ({\r\n      ...projection,\r\n      id: projection.id || crypto.randomUUID()\r\n    }));\r\n    \r\n    // Update the document\r\n    await updateDoc(productRef, {\r\n      weeklyProjections: updatedProjections,\r\n      _updatedAt: serverTimestamp()\r\n    });\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update actual metrics\r\nexport async function updateActuals(\r\n  productId: string,\r\n  actualMetrics: unknown[]\r\n): Promise<void> {\r\n  try {\r\n    const productRef = doc(db as Firestore, PRODUCTS_COLLECTION, productId);\r\n    \r\n    // Get the current product\r\n    const productDoc = await getDoc(productRef);\r\n    if (!productDoc.exists()) {\r\n      throw new Error(`Product with ID ${productId} not found`);\r\n    }\r\n    \r\n    const product = productDoc.data() as Product;\r\n    \r\n    // Ensure each metric has an ID\r\n    const updatedMetrics = actualMetrics.map(metric => ({\r\n      ...metric,\r\n      id: metric.id || crypto.randomUUID()\r\n    }));\r\n    \r\n    // Create a map of metrics by ID for easy lookup\r\n    const metricsById = new Map();\r\n    updatedMetrics.forEach(metric => {\r\n      metricsById.set(metric.id, metric);\r\n    });\r\n    \r\n    // Combine existing metrics (if not being updated) with updated ones\r\n    const existingMetrics = product.actualMetrics || [];\r\n    const combinedMetrics = existingMetrics\r\n      .filter(metric => !metricsById.has(metric.id))\r\n      .concat(Array.from(metricsById.values()));\r\n    \r\n    // Update the document\r\n    await updateDoc(productRef, {\r\n      actualMetrics: combinedMetrics,\r\n      _updatedAt: serverTimestamp()\r\n    });\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// For future enhancement: implement subcollections\r\n// Instead of storing all data in a single document, we could use subcollections:\r\n// - /products/{productId}/projections/{projectionId}\r\n// - /products/{productId}/actuals/{actualId}\r\n// This would be better for scalability with large numbers of projections or actuals \r\n\r\n// MARKETING KPI OPERATIONS\r\n\r\n// Get marketing KPIs for a product\r\nexport async function getMarketingKPIs(productId: string): Promise<any[]> {\r\n  try {\r\n    const kpisRef = collection(db as Firestore, MARKETING_KPIS_COLLECTION);\r\n    const q = query(kpisRef, where(\"productId\", \"==\", productId));\r\n    const snapshot = await getDocs(q);\r\n    \r\n    const kpis: unknown[] = [];\r\n    snapshot.forEach(doc => {\r\n      const kpiData = convertTimestamps(doc.data());\r\n      kpis.push({\r\n        ...kpiData,\r\n        id: doc.id\r\n      });\r\n    });\r\n    \r\n    return kpis;\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a new marketing KPI\r\nexport async function addMarketingKPI(productId: string, kpi: any): Promise<string> {\r\n  try {\r\n    // Generate a unique ID if not provided\r\n    const kpiId = kpi.id || crypto.randomUUID();\r\n    \r\n    // Create the KPI with productId\r\n    const kpiWithProductId = {\r\n      ...kpi,\r\n      productId,\r\n      id: kpiId,\r\n      createdAt: serverTimestamp(),\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    // Set the document with the generated ID\r\n    await setDoc(doc(db as Firestore, MARKETING_KPIS_COLLECTION, kpiId), kpiWithProductId);\r\n    \r\n    return kpiId;\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update a marketing KPI\r\nexport async function updateMarketingKPI(kpiId: string, updates: any): Promise<void> {\r\n  try {\r\n    const kpiRef = doc(db as Firestore, MARKETING_KPIS_COLLECTION, kpiId);\r\n    \r\n    // Add updated timestamp\r\n    const updatedKpi = {\r\n      ...updates,\r\n      updatedAt: serverTimestamp()\r\n    };\r\n    \r\n    // Update the document\r\n    await updateDoc(kpiRef, updatedKpi);\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete a marketing KPI\r\nexport async function deleteMarketingKPI(kpiId: string): Promise<void> {\r\n  try {\r\n    await deleteDoc(doc(db as Firestore, MARKETING_KPIS_COLLECTION, kpiId));\r\n  } catch (error) {\r\n    handleFirestoreError(error);\r\n    throw error;\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\generateMarketingPDF.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":1,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActualMetrics' is defined but never used.","line":3,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":88},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":242,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":242,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Document, Page, Text, View, StyleSheet, pdf, Image } from '@react-pdf/renderer';\r\nimport { format } from 'date-fns';\r\nimport type { Product, MarketingChannelPerformance, MarketingChannelItem, ActualMetrics } from '../types';\r\nimport { formatCurrency, formatNumber, formatPercent } from './utils';\r\n\r\n// Create styles with enhanced visual design\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    padding: 30,\r\n    fontFamily: 'Helvetica',\r\n  },\r\n  header: {\r\n    marginBottom: 20,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#e5e7eb',\r\n    paddingBottom: 10,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    marginBottom: 10,\r\n    color: '#111827',\r\n  },\r\n  subtitle: {\r\n    fontSize: 14,\r\n    color: '#6b7280',\r\n    marginBottom: 5,\r\n  },\r\n  section: {\r\n    marginBottom: 24,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    padding: 6,\r\n    backgroundColor: '#f9fafb',\r\n    borderRadius: 4,\r\n    color: '#1f2937',\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n    marginBottom: 8,\r\n  },\r\n  col: {\r\n    flex: 1,\r\n    padding: 5,\r\n  },\r\n  colHalf: {\r\n    flex: 0.5,\r\n    padding: 5,\r\n  },\r\n  colDouble: {\r\n    flex: 2,\r\n    padding: 5,\r\n  },\r\n  label: {\r\n    fontSize: 10,\r\n    color: '#6b7280',\r\n    marginBottom: 2,\r\n  },\r\n  value: {\r\n    fontSize: 12,\r\n    marginBottom: 5,\r\n    color: '#111827',\r\n  },\r\n  highlight: {\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n    color: '#2563eb',\r\n  },\r\n  positive: {\r\n    color: '#10b981',\r\n  },\r\n  negative: {\r\n    color: '#ef4444',\r\n  },\r\n  table: {\r\n    marginTop: 10,\r\n  },\r\n  tableHeader: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#f3f4f6',\r\n    padding: 6,\r\n    borderRadius: 4,\r\n    marginBottom: 8,\r\n  },\r\n  tableRow: {\r\n    flexDirection: 'row',\r\n    padding: 4,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#f3f4f6',\r\n    marginBottom: 2,\r\n  },\r\n  tableRowHighlight: {\r\n    flexDirection: 'row',\r\n    padding: 4,\r\n    backgroundColor: '#f0f9ff', \r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#f3f4f6',\r\n  },\r\n  tableCell: {\r\n    flex: 1,\r\n    fontSize: 10,\r\n    padding: 2,\r\n    color: '#374151',\r\n  },\r\n  tableCellHeader: {\r\n    flex: 1,\r\n    fontSize: 10,\r\n    fontWeight: 'bold',\r\n    padding: 2,\r\n    color: '#111827',\r\n  },\r\n  footer: {\r\n    position: 'absolute',\r\n    bottom: 30,\r\n    left: 30,\r\n    right: 30,\r\n    borderTopWidth: 1,\r\n    borderTopColor: '#e5e7eb',\r\n    paddingTop: 10,\r\n    textAlign: 'center',\r\n    fontSize: 10,\r\n    color: '#6b7280',\r\n  },\r\n  companyName: {\r\n    color: '#4338ca',\r\n    fontWeight: 'bold',\r\n  },\r\n  pageNumber: {\r\n    position: 'absolute',\r\n    bottom: 30,\r\n    right: 30,\r\n    fontSize: 10,\r\n    color: '#9ca3af',\r\n  },\r\n  chartContainer: {\r\n    height: 160,\r\n    marginVertical: 10,\r\n    paddingHorizontal: 5,\r\n    flexDirection: 'row',\r\n  },\r\n  chartLegend: {\r\n    flex: 1,\r\n    padding: 5,\r\n  },\r\n  chartLegendItem: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 4,\r\n  },\r\n  chartLegendColor: {\r\n    width: 12,\r\n    height: 12,\r\n    marginRight: 5,\r\n  },\r\n  chartLegendText: {\r\n    fontSize: 9,\r\n    color: '#374151',\r\n  },\r\n  kpiCard: {\r\n    borderWidth: 1, \r\n    borderColor: '#e5e7eb',\r\n    borderRadius: 4,\r\n    padding: 8,\r\n    margin: 4,\r\n    flex: 1,\r\n  },\r\n  kpiTitle: {\r\n    fontSize: 10,\r\n    color: '#6b7280',\r\n    marginBottom: 2,\r\n  },\r\n  kpiValue: {\r\n    fontSize: 14,\r\n    fontWeight: 'bold',\r\n    color: '#111827',\r\n  },\r\n  kpiPercentage: {\r\n    fontSize: 10,\r\n    marginTop: 2,\r\n  },\r\n  progressBarContainer: {\r\n    height: 6,\r\n    backgroundColor: '#e5e7eb',\r\n    borderRadius: 3,\r\n    marginTop: 4,\r\n  },\r\n  progressBar: {\r\n    height: 6,\r\n    borderRadius: 3,\r\n  },\r\n  disclaimer: {\r\n    fontSize: 8,\r\n    color: '#9ca3af',\r\n    marginTop: 4,\r\n  },\r\n  callout: {\r\n    backgroundColor: '#f0f9ff',\r\n    borderLeftWidth: 4,\r\n    borderLeftColor: '#3b82f6',\r\n    padding: 10,\r\n    marginBottom: 10,\r\n    borderRadius: 2,\r\n  },\r\n  calloutText: {\r\n    fontSize: 11,\r\n    color: '#1e40af',\r\n  },\r\n});\r\n\r\n// Helper function to calculate channel metrics\r\nconst calculateChannelMetrics = (channels: MarketingChannelItem[] = [], channelPerformance: MarketingChannelPerformance[] = []) => {\r\n  // Map performance data to channels\r\n  const enrichedChannels = channels.map(channel => {\r\n    const performance = channelPerformance.find(p => p.channelId === channel.id);\r\n    const roi = performance && performance.spend && performance.revenue \r\n      ? (performance.revenue - performance.spend) / performance.spend \r\n      : 0;\r\n    \r\n    const conversionRate = performance && performance.clicks && performance.conversions \r\n      ? performance.conversions / performance.clicks \r\n      : 0;\r\n    \r\n    const ctr = performance && performance.impressions && performance.clicks \r\n      ? performance.clicks / performance.impressions \r\n      : 0;\r\n    \r\n    return {\r\n      ...channel,\r\n      performance: performance || null,\r\n      roi,\r\n      conversionRate,\r\n      ctr\r\n    };\r\n  });\r\n  \r\n  return enrichedChannels;\r\n};\r\n\r\n// Main PDF Component\r\nconst MarketingReportPDF = ({ product }: { product: Product }) => {\r\n  const {\r\n    info,\r\n    weeklyProjections,\r\n    actualMetrics = [],\r\n    costMetrics,\r\n  } = product;\r\n\r\n  // Extract marketing channels and metrics\r\n  const marketingChannels = costMetrics?.marketing?.channels || [];\r\n  \r\n  // Get the most recent actual metrics with channel performance data\r\n  const recentActuals = [...actualMetrics]\r\n    .sort((a, b) => (b.week || 0) - (a.week || 0))\r\n    .filter(metric => metric.channelPerformance && metric.channelPerformance.length > 0)\r\n    .slice(0, 4);\r\n  \r\n  // Calculate channel metrics if we have performance data\r\n  const channelMetrics = recentActuals.length > 0 \r\n    ? calculateChannelMetrics(marketingChannels, recentActuals[0].channelPerformance || [])\r\n    : [];\r\n  \r\n  // Calculate overall marketing metrics\r\n  const totalMarketingBudget = marketingChannels.reduce((sum, ch) => sum + (ch.budget || 0), 0);\r\n  const totalMarketingRevenue = recentActuals.length > 0 \r\n    ? recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.revenue || 0), 0) || 0\r\n    : 0;\r\n  const totalMarketingSpend = recentActuals.length > 0 \r\n    ? recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.spend || 0), 0) || 0\r\n    : 0;\r\n  const overallROI = totalMarketingSpend > 0 \r\n    ? (totalMarketingRevenue - totalMarketingSpend) / totalMarketingSpend \r\n    : 0;\r\n  \r\n  // Helper function to get style based on performance\r\n  const getPerformanceStyle = (value: number, thresholds = { good: 0.1, neutral: 0 }) => {\r\n    if (value >= thresholds.good) return styles.positive;\r\n    if (value >= thresholds.neutral) return {};\r\n    return styles.negative;\r\n  };\r\n\r\n  // Get current date for the report\r\n  const reportDate = format(new Date(), 'PPP');\r\n\r\n  return (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page}>\r\n        {/* Header */}\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>{info.name} - Marketing Performance Report</Text>\r\n          <Text style={styles.subtitle}>Generated on {reportDate}</Text>\r\n          <Text style={styles.subtitle}>Product Type: {info.type}</Text>\r\n        </View>\r\n\r\n        {/* Executive Summary */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Executive Summary</Text>\r\n          \r\n          <View style={styles.callout}>\r\n            <Text style={styles.calloutText}>\r\n              This report provides a comprehensive analysis of our marketing activities, \r\n              performance metrics, and ROI across all channels. Use this data to optimize \r\n              budget allocation and improve campaign effectiveness.\r\n            </Text>\r\n          </View>\r\n          \r\n          <View style={styles.row}>\r\n            <View style={styles.kpiCard}>\r\n              <Text style={styles.kpiTitle}>Marketing Budget</Text>\r\n              <Text style={styles.kpiValue}>{formatCurrency(totalMarketingBudget)}</Text>\r\n              <Text style={styles.kpiPercentage}>\r\n                {totalMarketingBudget > 0 && totalMarketingSpend > 0 && \r\n                  `${formatPercent(totalMarketingSpend / totalMarketingBudget)} utilized`}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.kpiCard}>\r\n              <Text style={styles.kpiTitle}>Marketing Revenue</Text>\r\n              <Text style={styles.kpiValue}>{formatCurrency(totalMarketingRevenue)}</Text>\r\n              {weeklyProjections.length > 0 && (\r\n                <Text style={getPerformanceStyle(totalMarketingRevenue - totalMarketingBudget, { good: 0, neutral: -1000 })}>\r\n                  {totalMarketingRevenue >= totalMarketingBudget ? 'On Target' : 'Below Target'}\r\n                </Text>\r\n              )}\r\n            </View>\r\n            \r\n            <View style={styles.kpiCard}>\r\n              <Text style={styles.kpiTitle}>Overall ROI</Text>\r\n              <Text style={[styles.kpiValue, getPerformanceStyle(overallROI)]}>\r\n                {formatPercent(overallROI)}\r\n              </Text>\r\n              <View style={styles.progressBarContainer}>\r\n                <View \r\n                  style={[\r\n                    styles.progressBar, \r\n                    { width: `${Math.min(overallROI * 100, 100)}%`, backgroundColor: overallROI > 0 ? '#10b981' : '#ef4444' }\r\n                  ]} \r\n                />\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Channel Performance */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Channel Performance</Text>\r\n          \r\n          {channelMetrics.length > 0 ? (\r\n            <View style={styles.table}>\r\n              <View style={styles.tableHeader}>\r\n                <Text style={[styles.tableCellHeader, { flex: 1.5 }]}>Channel</Text>\r\n                <Text style={styles.tableCellHeader}>Budget</Text>\r\n                <Text style={styles.tableCellHeader}>Spend</Text>\r\n                <Text style={styles.tableCellHeader}>Revenue</Text>\r\n                <Text style={styles.tableCellHeader}>ROI</Text>\r\n                <Text style={styles.tableCellHeader}>Conv. Rate</Text>\r\n              </View>\r\n              \r\n              {channelMetrics.map((channel, index) => (\r\n                <View key={channel.id} style={index % 2 === 0 ? styles.tableRow : styles.tableRowHighlight}>\r\n                  <Text style={[styles.tableCell, { flex: 1.5 }]}>{channel.name || `Channel ${index + 1}`}</Text>\r\n                  <Text style={styles.tableCell}>{formatCurrency(channel.budget || 0)}</Text>\r\n                  <Text style={styles.tableCell}>{formatCurrency(channel.performance?.spend || 0)}</Text>\r\n                  <Text style={styles.tableCell}>{formatCurrency(channel.performance?.revenue || 0)}</Text>\r\n                  <Text style={[styles.tableCell, getPerformanceStyle(channel.roi)]}>\r\n                    {formatPercent(channel.roi)}\r\n                  </Text>\r\n                  <Text style={styles.tableCell}>{formatPercent(channel.conversionRate)}</Text>\r\n                </View>\r\n              ))}\r\n              \r\n              {/* Totals row */}\r\n              <View style={[styles.tableRow, { borderTopWidth: 1, borderTopColor: '#e5e7eb', marginTop: 4 }]}>\r\n                <Text style={[styles.tableCell, { flex: 1.5, fontWeight: 'bold' }]}>Total</Text>\r\n                <Text style={[styles.tableCell, { fontWeight: 'bold' }]}>\r\n                  {formatCurrency(totalMarketingBudget)}\r\n                </Text>\r\n                <Text style={[styles.tableCell, { fontWeight: 'bold' }]}>\r\n                  {formatCurrency(totalMarketingSpend)}\r\n                </Text>\r\n                <Text style={[styles.tableCell, { fontWeight: 'bold' }]}>\r\n                  {formatCurrency(totalMarketingRevenue)}\r\n                </Text>\r\n                <Text style={[styles.tableCell, getPerformanceStyle(overallROI), { fontWeight: 'bold' }]}>\r\n                  {formatPercent(overallROI)}\r\n                </Text>\r\n                <Text style={styles.tableCell}></Text>\r\n              </View>\r\n            </View>\r\n          ) : (\r\n            <Text style={styles.subtitle}>No channel performance data available.</Text>\r\n          )}\r\n        </View>\r\n\r\n        {/* Key Performance Metrics */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Key Performance Metrics</Text>\r\n          \r\n          <View style={styles.row}>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Total Impressions</Text>\r\n              <Text style={styles.value}>\r\n                {formatNumber(recentActuals.length > 0 \r\n                  ? recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.impressions || 0), 0) || 0\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Total Clicks</Text>\r\n              <Text style={styles.value}>\r\n                {formatNumber(recentActuals.length > 0 \r\n                  ? recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) || 0\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Total Conversions</Text>\r\n              <Text style={styles.value}>\r\n                {formatNumber(recentActuals.length > 0 \r\n                  ? recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) || 0\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Average CTR</Text>\r\n              <Text style={styles.value}>\r\n                {formatPercent(recentActuals.length > 0 && \r\n                  recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.impressions || 0), 0) > 0\r\n                  ? (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) || 0) / \r\n                    (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.impressions || 0), 0) || 1)\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n          \r\n          <View style={styles.row}>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Avg. Cost Per Click</Text>\r\n              <Text style={styles.value}>\r\n                {formatCurrency(recentActuals.length > 0 && \r\n                  recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) > 0\r\n                  ? (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.spend || 0), 0) || 0) / \r\n                    (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) || 1)\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Avg. Cost Per Acquisition</Text>\r\n              <Text style={styles.value}>\r\n                {formatCurrency(recentActuals.length > 0 && \r\n                  recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) > 0\r\n                  ? (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.spend || 0), 0) || 0) / \r\n                    (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) || 1)\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Avg. Revenue Per Conversion</Text>\r\n              <Text style={styles.value}>\r\n                {formatCurrency(recentActuals.length > 0 && \r\n                  recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) > 0\r\n                  ? (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.revenue || 0), 0) || 0) / \r\n                    (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) || 1)\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Conversion Rate</Text>\r\n              <Text style={styles.value}>\r\n                {formatPercent(recentActuals.length > 0 && \r\n                  recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) > 0\r\n                  ? (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) || 0) / \r\n                    (recentActuals[0].channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) || 1)\r\n                  : 0)}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Budget Recommendations */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Budget Optimization Recommendations</Text>\r\n          \r\n          {channelMetrics.length > 0 ? (\r\n            <>\r\n              <Text style={styles.subtitle}>Based on current performance data, we recommend the following budget adjustments:</Text>\r\n              \r\n              <View style={styles.table}>\r\n                <View style={styles.tableHeader}>\r\n                  <Text style={[styles.tableCellHeader, { flex: 1.5 }]}>Channel</Text>\r\n                  <Text style={styles.tableCellHeader}>Current Budget</Text>\r\n                  <Text style={styles.tableCellHeader}>Current ROI</Text>\r\n                  <Text style={styles.tableCellHeader}>Recommended Budget</Text>\r\n                  <Text style={styles.tableCellHeader}>Action</Text>\r\n                </View>\r\n                \r\n                {channelMetrics\r\n                  .sort((a, b) => (b.roi || 0) - (a.roi || 0))\r\n                  .map((channel, index) => {\r\n                    // Simplified budget recommendation logic based on ROI\r\n                    const budgetChange = channel.roi > 0.2 ? 1.2 : \r\n                                       channel.roi > 0 ? 1 : \r\n                                       channel.roi > -0.2 ? 0.8 : 0.5;\r\n                    \r\n                    const recommendedBudget = (channel.budget || 0) * budgetChange;\r\n                    \r\n                    return (\r\n                      <View key={channel.id} style={index % 2 === 0 ? styles.tableRow : styles.tableRowHighlight}>\r\n                        <Text style={[styles.tableCell, { flex: 1.5 }]}>{channel.name || `Channel ${index + 1}`}</Text>\r\n                        <Text style={styles.tableCell}>{formatCurrency(channel.budget || 0)}</Text>\r\n                        <Text style={[styles.tableCell, getPerformanceStyle(channel.roi)]}>\r\n                          {formatPercent(channel.roi)}\r\n                        </Text>\r\n                        <Text style={styles.tableCell}>{formatCurrency(recommendedBudget)}</Text>\r\n                        <Text style={[\r\n                          styles.tableCell, \r\n                          budgetChange > 1 ? styles.positive : \r\n                          budgetChange < 1 ? styles.negative : {}\r\n                        ]}>\r\n                          {budgetChange > 1 ? 'Increase' : \r\n                           budgetChange < 1 ? 'Decrease' : 'Maintain'}\r\n                        </Text>\r\n                      </View>\r\n                    );\r\n                  })}\r\n              </View>\r\n              \r\n              <Text style={styles.disclaimer}>\r\n                Recommendations are based on current performance metrics. Consider other business factors when making final budget decisions.\r\n              </Text>\r\n            </>\r\n          ) : (\r\n            <Text style={styles.subtitle}>Insufficient data to provide budget recommendations.</Text>\r\n          )}\r\n        </View>\r\n\r\n        {/* Weekly Performance Trend (stub - would need chart library integration) */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Performance Over Time</Text>\r\n          \r\n          {recentActuals.length > 0 ? (\r\n            <View style={styles.table}>\r\n              <View style={styles.tableHeader}>\r\n                <Text style={styles.tableCellHeader}>Week</Text>\r\n                <Text style={styles.tableCellHeader}>Marketing Spend</Text>\r\n                <Text style={styles.tableCellHeader}>Marketing Revenue</Text>\r\n                <Text style={styles.tableCellHeader}>ROI</Text>\r\n                <Text style={styles.tableCellHeader}>Conversion Rate</Text>\r\n              </View>\r\n              \r\n              {recentActuals.map((week, index) => {\r\n                const weekSpend = week.channelPerformance?.reduce((sum, p) => sum + (p.spend || 0), 0) || 0;\r\n                const weekRevenue = week.channelPerformance?.reduce((sum, p) => sum + (p.revenue || 0), 0) || 0;\r\n                const weekROI = weekSpend > 0 ? (weekRevenue - weekSpend) / weekSpend : 0;\r\n                \r\n                // Calculate conversion rate if we have the data\r\n                const weekClicks = week.channelPerformance?.reduce((sum, p) => sum + (p.clicks || 0), 0) || 0;\r\n                const weekConversions = week.channelPerformance?.reduce((sum, p) => sum + (p.conversions || 0), 0) || 0;\r\n                const conversionRate = weekClicks > 0 ? weekConversions / weekClicks : 0;\r\n                \r\n                return (\r\n                  <View key={week.week} style={index % 2 === 0 ? styles.tableRow : styles.tableRowHighlight}>\r\n                    <Text style={styles.tableCell}>Week {week.week}</Text>\r\n                    <Text style={styles.tableCell}>{formatCurrency(weekSpend)}</Text>\r\n                    <Text style={styles.tableCell}>{formatCurrency(weekRevenue)}</Text>\r\n                    <Text style={[styles.tableCell, getPerformanceStyle(weekROI)]}>\r\n                      {formatPercent(weekROI)}\r\n                    </Text>\r\n                    <Text style={styles.tableCell}>{formatPercent(conversionRate)}</Text>\r\n                  </View>\r\n                );\r\n              })}\r\n            </View>\r\n          ) : (\r\n            <Text style={styles.subtitle}>No weekly performance data available.</Text>\r\n          )}\r\n        </View>\r\n\r\n        {/* Footer */}\r\n        <Text style={styles.footer}>\r\n          Confidential • For internal use only • Generated on {reportDate} by <Text style={styles.companyName}>Fortress Financial Model</Text>\r\n        </Text>\r\n        \r\n        <Text style={styles.pageNumber}>Page 1</Text>\r\n      </Page>\r\n      \r\n      {/* Second page for additional insights */}\r\n      <Page size=\"A4\" style={styles.page}>\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>{info.name} - Marketing Insights</Text>\r\n          <Text style={styles.subtitle}>Generated on {reportDate}</Text>\r\n        </View>\r\n\r\n        {/* Channel Effectiveness Analysis */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Channel Effectiveness Analysis</Text>\r\n          \r\n          {channelMetrics.length > 0 ? (\r\n            <>\r\n              <Text style={styles.subtitle}>\r\n                This analysis compares key performance indicators across all marketing channels to identify the most effective ones.\r\n              </Text>\r\n              \r\n              <View style={styles.table}>\r\n                <View style={styles.tableHeader}>\r\n                  <Text style={[styles.tableCellHeader, { flex: 1.5 }]}>Channel</Text>\r\n                  <Text style={styles.tableCellHeader}>Impressions</Text>\r\n                  <Text style={styles.tableCellHeader}>CTR</Text>\r\n                  <Text style={styles.tableCellHeader}>CPC</Text>\r\n                  <Text style={styles.tableCellHeader}>Conv. Rate</Text>\r\n                  <Text style={styles.tableCellHeader}>CPA</Text>\r\n                </View>\r\n                \r\n                {channelMetrics\r\n                  .filter(channel => channel.performance)\r\n                  .map((channel, index) => {\r\n                    const performance = channel.performance;\r\n                    if (!performance) return null;\r\n                    \r\n                    const impressions = performance.impressions || 0;\r\n                    const clicks = performance.clicks || 0;\r\n                    const conversions = performance.conversions || 0;\r\n                    const spend = performance.spend || 0;\r\n                    \r\n                    const ctr = impressions > 0 ? clicks / impressions : 0;\r\n                    const cpc = clicks > 0 ? spend / clicks : 0;\r\n                    const convRate = clicks > 0 ? conversions / clicks : 0;\r\n                    const cpa = conversions > 0 ? spend / conversions : 0;\r\n                    \r\n                    return (\r\n                      <View key={channel.id} style={index % 2 === 0 ? styles.tableRow : styles.tableRowHighlight}>\r\n                        <Text style={[styles.tableCell, { flex: 1.5 }]}>{channel.name || `Channel ${index + 1}`}</Text>\r\n                        <Text style={styles.tableCell}>{formatNumber(impressions)}</Text>\r\n                        <Text style={styles.tableCell}>{formatPercent(ctr)}</Text>\r\n                        <Text style={styles.tableCell}>{formatCurrency(cpc)}</Text>\r\n                        <Text style={styles.tableCell}>{formatPercent(convRate)}</Text>\r\n                        <Text style={styles.tableCell}>{formatCurrency(cpa)}</Text>\r\n                      </View>\r\n                    );\r\n                  })}\r\n              </View>\r\n            </>\r\n          ) : (\r\n            <Text style={styles.subtitle}>No channel performance data available.</Text>\r\n          )}\r\n        </View>\r\n\r\n        {/* Revenue Contribution */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Revenue Contribution by Channel</Text>\r\n          \r\n          {channelMetrics.length > 0 ? (\r\n            <>\r\n              <View style={styles.table}>\r\n                <View style={styles.tableHeader}>\r\n                  <Text style={[styles.tableCellHeader, { flex: 1.5 }]}>Channel</Text>\r\n                  <Text style={styles.tableCellHeader}>Revenue</Text>\r\n                  <Text style={styles.tableCellHeader}>% of Total</Text>\r\n                  <Text style={[styles.tableCellHeader, { flex: 3 }]}>Distribution</Text>\r\n                </View>\r\n                \r\n                {channelMetrics\r\n                  .filter(channel => channel.performance && (channel.performance.revenue || 0) > 0)\r\n                  .sort((a, b) => ((b.performance?.revenue || 0) - (a.performance?.revenue || 0)))\r\n                  .map((channel, index) => {\r\n                    const revenue = channel.performance?.revenue || 0;\r\n                    const percentage = totalMarketingRevenue > 0 ? revenue / totalMarketingRevenue : 0;\r\n                    \r\n                    return (\r\n                      <View key={channel.id} style={index % 2 === 0 ? styles.tableRow : styles.tableRowHighlight}>\r\n                        <Text style={[styles.tableCell, { flex: 1.5 }]}>{channel.name || `Channel ${index + 1}`}</Text>\r\n                        <Text style={styles.tableCell}>{formatCurrency(revenue)}</Text>\r\n                        <Text style={styles.tableCell}>{formatPercent(percentage)}</Text>\r\n                        <View style={[styles.tableCell, { flex: 3 }]}>\r\n                          <View style={{ flexDirection: 'row', height: 12, alignItems: 'center' }}>\r\n                            <View \r\n                              style={{ \r\n                                height: 8, \r\n                                width: `${percentage * 100}%`, \r\n                                backgroundColor: COLORS[Object.keys(COLORS)[index % Object.keys(COLORS).length]],\r\n                                borderRadius: 4\r\n                              }} \r\n                            />\r\n                          </View>\r\n                        </View>\r\n                      </View>\r\n                    );\r\n                  })}\r\n              </View>\r\n            </>\r\n          ) : (\r\n            <Text style={styles.subtitle}>No revenue contribution data available.</Text>\r\n          )}\r\n        </View>\r\n\r\n        {/* Recommendations and Action Items */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Recommendations and Action Items</Text>\r\n          \r\n          <View style={styles.callout}>\r\n            <Text style={styles.calloutText}>\r\n              Based on the performance data and analysis in this report, consider the following strategic recommendations.\r\n            </Text>\r\n          </View>\r\n          \r\n          {channelMetrics.length > 0 ? (\r\n            <View>\r\n              {/* High performing channels */}\r\n              {channelMetrics.filter(c => c.roi > 0.2).length > 0 && (\r\n                <View style={styles.row}>\r\n                  <Text style={[styles.label, { flex: 1, fontWeight: 'bold' }]}>High-Performing Channels:</Text>\r\n                  <Text style={[styles.value, { flex: 4 }]}>\r\n                    {channelMetrics.filter(c => c.roi > 0.2).map(c => c.name).join(', ')}\r\n                    {` - Consider increasing budget allocation to these channels to maximize ROI.`}\r\n                  </Text>\r\n                </View>\r\n              )}\r\n              \r\n              {/* Underperforming channels */}\r\n              {channelMetrics.filter(c => c.roi < 0).length > 0 && (\r\n                <View style={styles.row}>\r\n                  <Text style={[styles.label, { flex: 1, fontWeight: 'bold' }]}>Underperforming Channels:</Text>\r\n                  <Text style={[styles.value, { flex: 4 }]}>\r\n                    {channelMetrics.filter(c => c.roi < 0).map(c => c.name).join(', ')}\r\n                    {` - Review and optimize campaigns or consider reallocating budget to better-performing channels.`}\r\n                  </Text>\r\n                </View>\r\n              )}\r\n              \r\n              {/* General recommendations */}\r\n              <View style={[styles.row, { marginTop: 10 }]}>\r\n                <Text style={[styles.label, { flex: 1, fontWeight: 'bold' }]}>General Actions:</Text>\r\n                <View style={{ flex: 4 }}>\r\n                  <Text style={styles.value}>1. Schedule a marketing review meeting to discuss findings.</Text>\r\n                  <Text style={styles.value}>2. Update campaign targeting based on performance data.</Text>\r\n                  <Text style={styles.value}>3. Implement A/B testing for underperforming channels.</Text>\r\n                  <Text style={styles.value}>4. Review marketing budget allocation for next quarter.</Text>\r\n                  <Text style={styles.value}>5. Set new KPIs based on current performance benchmarks.</Text>\r\n                </View>\r\n              </View>\r\n            </View>\r\n          ) : (\r\n            <Text style={styles.subtitle}>\r\n              Insufficient data to provide specific recommendations. Consider implementing more robust \r\n              tracking of marketing metrics across channels.\r\n            </Text>\r\n          )}\r\n        </View>\r\n        \r\n        {/* Methodology */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Methodology and Definitions</Text>\r\n          \r\n          <View style={styles.table}>\r\n            <View style={styles.tableRow}>\r\n              <Text style={[styles.tableCell, { flex: 1, fontWeight: 'bold' }]}>ROI</Text>\r\n              <Text style={[styles.tableCell, { flex: 4 }]}>\r\n                Return on Investment = (Revenue - Spend) / Spend\r\n              </Text>\r\n            </View>\r\n            <View style={styles.tableRow}>\r\n              <Text style={[styles.tableCell, { flex: 1, fontWeight: 'bold' }]}>CTR</Text>\r\n              <Text style={[styles.tableCell, { flex: 4 }]}>\r\n                Click-Through Rate = Clicks / Impressions\r\n              </Text>\r\n            </View>\r\n            <View style={styles.tableRow}>\r\n              <Text style={[styles.tableCell, { flex: 1, fontWeight: 'bold' }]}>CPC</Text>\r\n              <Text style={[styles.tableCell, { flex: 4 }]}>\r\n                Cost Per Click = Spend / Clicks\r\n              </Text>\r\n            </View>\r\n            <View style={styles.tableRow}>\r\n              <Text style={[styles.tableCell, { flex: 1, fontWeight: 'bold' }]}>Conv. Rate</Text>\r\n              <Text style={[styles.tableCell, { flex: 4 }]}>\r\n                Conversion Rate = Conversions / Clicks\r\n              </Text>\r\n            </View>\r\n            <View style={styles.tableRow}>\r\n              <Text style={[styles.tableCell, { flex: 1, fontWeight: 'bold' }]}>CPA</Text>\r\n              <Text style={[styles.tableCell, { flex: 4 }]}>\r\n                Cost Per Acquisition = Spend / Conversions\r\n              </Text>\r\n            </View>\r\n          </View>\r\n          \r\n          <Text style={styles.disclaimer}>\r\n            This report uses data from the Fortress Financial Model and may include metrics from \r\n            integrated marketing platforms. Performance metrics are calculated based on available data \r\n            and may not reflect all marketing activities. For questions regarding methodology, please \r\n            contact the marketing analytics team.\r\n          </Text>\r\n        </View>\r\n\r\n        {/* Footer */}\r\n        <Text style={styles.footer}>\r\n          Confidential • For internal use only • Generated on {reportDate} by <Text style={styles.companyName}>Fortress Financial Model</Text>\r\n        </Text>\r\n        \r\n        <Text style={styles.pageNumber}>Page 2</Text>\r\n      </Page>\r\n    </Document>\r\n  );\r\n};\r\n\r\n// Function to generate the marketing PDF\r\nexport async function generateMarketingPDF(product: Product): Promise<Blob> {\r\n  return await pdf(<MarketingReportPDF product={product} />).toBlob();\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\generatePDF.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":80,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'revenueMetrics' is assigned a value but never used.","line":86,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'costMetrics' is assigned a value but never used.","line":87,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Document, Page, Text, View, StyleSheet, pdf } from '@react-pdf/renderer';\r\nimport { format } from 'date-fns';\r\nimport type { Product } from '../types';\r\nimport { formatCurrency, formatNumber, formatPercent } from './utils';\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    padding: 30,\r\n    fontFamily: 'Helvetica',\r\n  },\r\n  header: {\r\n    marginBottom: 20,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    marginBottom: 10,\r\n  },\r\n  subtitle: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginBottom: 5,\r\n  },\r\n  section: {\r\n    marginBottom: 20,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    padding: 5,\r\n    backgroundColor: '#f3f4f6',\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n    marginBottom: 5,\r\n  },\r\n  col: {\r\n    flex: 1,\r\n  },\r\n  label: {\r\n    fontSize: 10,\r\n    color: '#666',\r\n  },\r\n  value: {\r\n    fontSize: 12,\r\n    marginBottom: 5,\r\n  },\r\n  table: {\r\n    marginTop: 10,\r\n  },\r\n  tableHeader: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#f3f4f6',\r\n    padding: 5,\r\n    marginBottom: 5,\r\n  },\r\n  tableRow: {\r\n    flexDirection: 'row',\r\n    padding: 5,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#eee',\r\n  },\r\n  tableCell: {\r\n    flex: 1,\r\n    fontSize: 10,\r\n  },\r\n  footer: {\r\n    position: 'absolute',\r\n    bottom: 30,\r\n    left: 30,\r\n    right: 30,\r\n    textAlign: 'center',\r\n    fontSize: 10,\r\n    color: '#666',\r\n  },\r\n});\r\n\r\n// Create Document Component\r\nconst DashboardPDF = ({ product }: { product: Product }) => {\r\n  const {\r\n    info,\r\n    weeklyProjections,\r\n    actualMetrics = [],\r\n    growthMetrics,\r\n    revenueMetrics,\r\n    costMetrics,\r\n  } = product;\r\n\r\n  // Calculate key metrics\r\n  const totalRevenue = weeklyProjections.reduce((sum, week) => sum + week.totalRevenue, 0);\r\n  const totalCosts = weeklyProjections.reduce((sum, week) => sum + week.totalCosts, 0);\r\n  const totalProfit = totalRevenue - totalCosts;\r\n  const profitMargin = totalRevenue > 0 ? totalProfit / totalRevenue : 0;\r\n  const breakEvenWeek = weeklyProjections.findIndex(w => w.cumulativeProfit > 0) + 1;\r\n\r\n  return (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page}>\r\n        {/* Header */}\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>{info.name} - Financial Dashboard</Text>\r\n          <Text style={styles.subtitle}>Generated on {format(new Date(), 'PPP')}</Text>\r\n          <Text style={styles.subtitle}>Product Type: {info.type}</Text>\r\n        </View>\r\n\r\n        {/* Executive Summary */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Executive Summary</Text>\r\n          <View style={styles.row}>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Total Revenue</Text>\r\n              <Text style={styles.value}>{formatCurrency(totalRevenue)}</Text>\r\n            </View>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Total Costs</Text>\r\n              <Text style={styles.value}>{formatCurrency(totalCosts)}</Text>\r\n            </View>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Profit Margin</Text>\r\n              <Text style={styles.value}>{formatPercent(profitMargin)}</Text>\r\n            </View>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Break-even Week</Text>\r\n              <Text style={styles.value}>Week {breakEvenWeek}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Growth Metrics */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Growth Metrics</Text>\r\n          <View style={styles.row}>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Weekly Visitors</Text>\r\n              <Text style={styles.value}>{formatNumber(growthMetrics?.weeklyVisitors || 0)}</Text>\r\n            </View>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Growth Rate</Text>\r\n              <Text style={styles.value}>{formatPercent((growthMetrics?.weeklyGrowthRate || 0) / 100)}</Text>\r\n            </View>\r\n            <View style={styles.col}>\r\n              <Text style={styles.label}>Return Visit Rate</Text>\r\n              <Text style={styles.value}>{formatPercent(growthMetrics?.returnVisitRate || 0)}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Weekly Projections */}\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>Weekly Projections</Text>\r\n          <View style={styles.table}>\r\n            <View style={styles.tableHeader}>\r\n              <Text style={styles.tableCell}>Week</Text>\r\n              <Text style={styles.tableCell}>Revenue</Text>\r\n              <Text style={styles.tableCell}>Costs</Text>\r\n              <Text style={styles.tableCell}>Profit</Text>\r\n              <Text style={styles.tableCell}>Cumulative</Text>\r\n            </View>\r\n            {weeklyProjections.slice(0, 8).map((week) => (\r\n              <View key={week.week} style={styles.tableRow}>\r\n                <Text style={styles.tableCell}>Week {week.week}</Text>\r\n                <Text style={styles.tableCell}>{formatCurrency(week.totalRevenue)}</Text>\r\n                <Text style={styles.tableCell}>{formatCurrency(week.totalCosts)}</Text>\r\n                <Text style={styles.tableCell}>{formatCurrency(week.weeklyProfit)}</Text>\r\n                <Text style={styles.tableCell}>{formatCurrency(week.cumulativeProfit)}</Text>\r\n              </View>\r\n            ))}\r\n          </View>\r\n        </View>\r\n\r\n        {/* Actual Performance */}\r\n        {actualMetrics.length > 0 && (\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Actual Performance</Text>\r\n            <View style={styles.table}>\r\n              <View style={styles.tableHeader}>\r\n                <Text style={styles.tableCell}>Week</Text>\r\n                <Text style={styles.tableCell}>Revenue</Text>\r\n                <Text style={styles.tableCell}>Costs</Text>\r\n                <Text style={styles.tableCell}>Profit</Text>\r\n                <Text style={styles.tableCell}>vs Forecast</Text>\r\n              </View>\r\n              {actualMetrics.slice(0, 8).map((metric) => {\r\n                const forecast = weeklyProjections.find(p => p.week === metric.week);\r\n                const variance = forecast \r\n                  ? ((metric.weeklyProfit - forecast.weeklyProfit) / Math.abs(forecast.weeklyProfit)) * 100 \r\n                  : 0;\r\n                \r\n                return (\r\n                  <View key={metric.week} style={styles.tableRow}>\r\n                    <Text style={styles.tableCell}>Week {metric.week}</Text>\r\n                    <Text style={styles.tableCell}>{formatCurrency(metric.totalRevenue)}</Text>\r\n                    <Text style={styles.tableCell}>{formatCurrency(metric.totalCosts)}</Text>\r\n                    <Text style={styles.tableCell}>{formatCurrency(metric.weeklyProfit)}</Text>\r\n                    <Text style={styles.tableCell}>{variance.toFixed(1)}%</Text>\r\n                  </View>\r\n                );\r\n              })}\r\n            </View>\r\n          </View>\r\n        )}\r\n\r\n        {/* Footer */}\r\n        <Text style={styles.footer}>\r\n          Generated by Fortress Financial Model • {format(new Date(), 'PPP')}\r\n        </Text>\r\n      </Page>\r\n    </Document>\r\n  );\r\n};\r\n\r\nexport async function generateDashboardPDF(product: Product): Promise<Blob> {\r\n  return await pdf(<DashboardPDF product={product} />).toBlob();\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\localStorageService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WeeklyActuals' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MarketingChannelItem' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[715,718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[715,718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\r\nimport type { \r\n  Product, \r\n  ScenarioModel,\r\n  WeeklyActuals,\r\n  MarketingChannelItem\r\n} from '../types';\r\n\r\n// Storage keys\r\nexport const PRODUCTS_KEY = 'fortress-products';\r\nexport const SCENARIOS_KEY = 'fortress-scenarios';\r\nexport const ACTUALS_KEY = 'fortress-actuals';\r\nexport const MARKETING_CHANNELS_KEY = 'fortress-marketing-channels';\r\nexport const CURRENT_PRODUCT_KEY = 'currentProductId';\r\nexport const RECENTLY_VIEWED_KEY = 'recentlyViewed';\r\nexport const USER_SETTINGS_KEY = 'userSettings';\r\n\r\n// Event system for data changes\r\ntype StorageEventType = 'products' | 'scenarios' | 'actuals' | 'marketingChannels' | 'settings';\r\ntype StorageEventCallback = (data: any) => void;\r\nconst eventListeners: Record<StorageEventType, StorageEventCallback[]> = {\r\n  products: [],\r\n  scenarios: [],\r\n  actuals: [],\r\n  marketingChannels: [],\r\n  settings: []\r\n};\r\n\r\n// Helper function to emit events\r\nconst emitEvent = (eventType: StorageEventType, data: any) => {\r\n  eventListeners[eventType].forEach(listener => listener(data));\r\n};\r\n\r\n// Add event listener\r\nexport const addStorageEventListener = (eventType: StorageEventType, callback: StorageEventCallback) => {\r\n  eventListeners[eventType].push(callback);\r\n  return () => {\r\n    const index = eventListeners[eventType].indexOf(callback);\r\n    if (index > -1) {\r\n      eventListeners[eventType].splice(index, 1);\r\n    }\r\n  };\r\n};\r\n\r\n// Product functions\r\nexport const getProducts = (): Product[] => {\r\n  try {\r\n    const data = localStorage.getItem(PRODUCTS_KEY);\r\n    if (!data) return [];\r\n    \r\n    const products = JSON.parse(data);\r\n    if (!Array.isArray(products)) {\r\n      console.warn('Products data is not an array, returning empty array');\r\n      return [];\r\n    }\r\n    \r\n    // Ensure all products have the required fields\r\n    return products.map((product: Product) => {\r\n      if (!product.actuals) product.actuals = [];\r\n      return product;\r\n    });\r\n  } catch (error) {\r\n    console.error('Error loading products:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const saveProduct = (product: Product): void => {\r\n  try {\r\n    const products = getProducts();\r\n    const index = products.findIndex(p => p.info.id === product.info.id);\r\n    \r\n    if (index >= 0) {\r\n      // Update existing product\r\n      products[index] = product;\r\n    } else {\r\n      // Add new product\r\n      products.push(product);\r\n    }\r\n    \r\n    localStorage.setItem(PRODUCTS_KEY, JSON.stringify(products));\r\n    emitEvent('products', products);\r\n  } catch (error) {\r\n    console.error('Error saving product:', error);\r\n  }\r\n};\r\n\r\nexport const deleteProduct = (productId: string): void => {\r\n  try {\r\n    const products = getProducts();\r\n    const updatedProducts = products.filter(p => p.info.id !== productId);\r\n    localStorage.setItem(PRODUCTS_KEY, JSON.stringify(updatedProducts));\r\n    emitEvent('products', updatedProducts);\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n  }\r\n};\r\n\r\n// Scenario functions\r\nexport const getScenarios = (): ScenarioModel[] => {\r\n  try {\r\n    const data = localStorage.getItem(SCENARIOS_KEY);\r\n    if (!data) return [];\r\n    \r\n    const scenarios = JSON.parse(data);\r\n    if (!Array.isArray(scenarios)) {\r\n      console.warn('Scenarios data is not an array, returning empty array');\r\n      return [];\r\n    }\r\n    \r\n    return scenarios;\r\n  } catch (error) {\r\n    console.error('Error loading scenarios:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const saveScenario = (scenario: ScenarioModel): void => {\r\n  try {\r\n    const scenarios = getScenarios();\r\n    const index = scenarios.findIndex(s => s.id === scenario.id);\r\n    \r\n    if (index >= 0) {\r\n      // Update existing scenario\r\n      scenarios[index] = scenario;\r\n    } else {\r\n      // Add new scenario\r\n      scenarios.push(scenario);\r\n    }\r\n    \r\n    localStorage.setItem(SCENARIOS_KEY, JSON.stringify(scenarios));\r\n    emitEvent('scenarios', scenarios);\r\n  } catch (error) {\r\n    console.error('Error saving scenario:', error);\r\n  }\r\n};\r\n\r\nexport const deleteScenario = (scenarioId: string): void => {\r\n  try {\r\n    const scenarios = getScenarios();\r\n    const updatedScenarios = scenarios.filter(s => s.id !== scenarioId);\r\n    localStorage.setItem(SCENARIOS_KEY, JSON.stringify(updatedScenarios));\r\n    emitEvent('scenarios', updatedScenarios);\r\n  } catch (error) {\r\n    console.error('Error deleting scenario:', error);\r\n  }\r\n};\r\n\r\n// User settings\r\nexport interface UserSettings {\r\n  theme: 'light' | 'dark' | 'system';\r\n  currency: string;\r\n  dateFormat: string;\r\n  notifications: boolean;\r\n}\r\n\r\nexport const DEFAULT_USER_SETTINGS: UserSettings = {\r\n  theme: 'system',\r\n  currency: 'USD',\r\n  dateFormat: 'MM/DD/YYYY',\r\n  notifications: true\r\n};\r\n\r\nexport const getUserSettings = (): UserSettings => {\r\n  try {\r\n    const data = localStorage.getItem(USER_SETTINGS_KEY);\r\n    if (!data) return DEFAULT_USER_SETTINGS;\r\n    \r\n    return { ...DEFAULT_USER_SETTINGS, ...JSON.parse(data) };\r\n  } catch (error) {\r\n    console.error('Error loading user settings:', error);\r\n    return DEFAULT_USER_SETTINGS;\r\n  }\r\n};\r\n\r\nexport const saveUserSettings = (settings: Partial<UserSettings>): void => {\r\n  try {\r\n    const currentSettings = getUserSettings();\r\n    const updatedSettings = { ...currentSettings, ...settings };\r\n    localStorage.setItem(USER_SETTINGS_KEY, JSON.stringify(updatedSettings));\r\n    emitEvent('settings', updatedSettings);\r\n  } catch (error) {\r\n    console.error('Error saving user settings:', error);\r\n  }\r\n};\r\n\r\n// Current product ID\r\nexport const getCurrentProductId = (): string | null => {\r\n  return localStorage.getItem(CURRENT_PRODUCT_KEY);\r\n};\r\n\r\nexport const setCurrentProductId = (productId: string | null): void => {\r\n  if (productId) {\r\n    localStorage.setItem(CURRENT_PRODUCT_KEY, productId);\r\n  } else {\r\n    localStorage.removeItem(CURRENT_PRODUCT_KEY);\r\n  }\r\n};\r\n\r\n// Recently viewed\r\nexport const getRecentlyViewed = (): string[] => {\r\n  try {\r\n    const data = localStorage.getItem(RECENTLY_VIEWED_KEY);\r\n    if (!data) return [];\r\n    \r\n    const recentlyViewed = JSON.parse(data);\r\n    if (!Array.isArray(recentlyViewed)) {\r\n      return [];\r\n    }\r\n    \r\n    return recentlyViewed;\r\n  } catch (error) {\r\n    console.error('Error loading recently viewed:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addToRecentlyViewed = (productId: string): void => {\r\n  try {\r\n    const recentlyViewed = getRecentlyViewed();\r\n    // Remove the product if it exists already to avoid duplicates\r\n    const filtered = recentlyViewed.filter(id => id !== productId);\r\n    // Add to the beginning of the array\r\n    filtered.unshift(productId);\r\n    // Limit to 10 items\r\n    const limited = filtered.slice(0, 10);\r\n    localStorage.setItem(RECENTLY_VIEWED_KEY, JSON.stringify(limited));\r\n  } catch (error) {\r\n    console.error('Error updating recently viewed:', error);\r\n  }\r\n};\r\n\r\n// Authentication simulation\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  displayName: string | null;\r\n  isAnonymous: boolean;\r\n  emailVerified: boolean;\r\n}\r\n\r\nlet currentUser: User | null = null;\r\n\r\nexport const getCurrentUser = (): User | null => {\r\n  return currentUser;\r\n};\r\n\r\nexport const signInAnonymously = (): User => {\r\n  const user: User = {\r\n    id: uuidv4(),\r\n    email: `anonymous-${uuidv4().substring(0, 8)}@example.com`,\r\n    displayName: 'Guest User',\r\n    isAnonymous: true,\r\n    emailVerified: false\r\n  };\r\n  currentUser = user;\r\n  return user;\r\n};\r\n\r\nexport const signOut = (): void => {\r\n  currentUser = null;\r\n};\r\n\r\n// Generate unique IDs (to replace Firebase IDs)\r\nexport const generateId = (): string => {\r\n  return uuidv4();\r\n};\r\n\r\n// Data export & import functionality\r\nexport const exportAllData = (): string => {\r\n  const data = {\r\n    products: getProducts(),\r\n    scenarios: getScenarios(),\r\n    settings: getUserSettings()\r\n  };\r\n  \r\n  return JSON.stringify(data);\r\n};\r\n\r\nexport interface ImportData {\r\n  products?: Product[];\r\n  scenarios?: ScenarioModel[];\r\n  settings?: Partial<UserSettings>;\r\n}\r\n\r\nexport const importData = (jsonData: string): boolean => {\r\n  try {\r\n    const data: ImportData = JSON.parse(jsonData);\r\n    \r\n    if (data.products && Array.isArray(data.products)) {\r\n      localStorage.setItem(PRODUCTS_KEY, JSON.stringify(data.products));\r\n      emitEvent('products', data.products);\r\n    }\r\n    \r\n    if (data.scenarios && Array.isArray(data.scenarios)) {\r\n      localStorage.setItem(SCENARIOS_KEY, JSON.stringify(data.scenarios));\r\n      emitEvent('scenarios', data.scenarios);\r\n    }\r\n    \r\n    if (data.settings) {\r\n      saveUserSettings(data.settings);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error importing data:', error);\r\n    return false;\r\n  }\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\marketingApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":55,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2811,2814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2811,2814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Marketing API Integration Module\r\n * Provides functions to connect with external marketing platforms and import data\r\n */\r\n\r\nimport { MarketingChannelPerformance } from '../types';\r\n\r\n// API Configuration Types\r\nexport interface ApiConfig {\r\n  platformName: string;\r\n  apiKey: string;\r\n  endpoint: string;\r\n  isActive: boolean;\r\n}\r\n\r\n// Supported Marketing Platforms\r\nexport type MarketingPlatform = 'facebook' | 'google' | 'twitter' | 'linkedin' | 'tiktok' | 'custom';\r\n\r\n// API Response Types\r\nexport interface ApiResponse {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: string;\r\n}\r\n\r\n// Store API configurations\r\nlet apiConfigurations: Record<MarketingPlatform, ApiConfig | null> = {\r\n  facebook: null,\r\n  google: null,\r\n  twitter: null,\r\n  linkedin: null,\r\n  tiktok: null,\r\n  custom: null\r\n};\r\n\r\n/**\r\n * Configure API connection for a specific marketing platform\r\n */\r\nexport function configureMarketingApi(platform: MarketingPlatform, config: ApiConfig): void {\r\n  apiConfigurations[platform] = config;\r\n}\r\n\r\n/**\r\n * Get API configuration for a platform\r\n */\r\nexport function getApiConfig(platform: MarketingPlatform): ApiConfig | null {\r\n  return apiConfigurations[platform];\r\n}\r\n\r\n/**\r\n * List all configured APIs\r\n */\r\nexport function listConfiguredApis(): Array<{ platform: MarketingPlatform, config: ApiConfig }> {\r\n  return Object.entries(apiConfigurations)\r\n    .filter(([_, config]) => config !== null)\r\n    .map(([platform, config]) => ({\r\n      platform: platform as MarketingPlatform,\r\n      config: config as ApiConfig\r\n    }));\r\n}\r\n\r\n/**\r\n * Fetch marketing data from a configured platform\r\n */\r\nexport async function fetchMarketingData(\r\n  platform: MarketingPlatform, \r\n  startDate: string, \r\n  endDate: string\r\n): Promise<ApiResponse> {\r\n  const config = apiConfigurations[platform];\r\n  \r\n  if (!config || !config.isActive) {\r\n    return {\r\n      success: false,\r\n      error: `API for ${platform} is not configured or inactive`\r\n    };\r\n  }\r\n  \r\n  try {\r\n    // In a real implementation, this would make an actual API call\r\n    // For this demo, we're simulating a response\r\n    \r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Return simulated data based on the platform\r\n    const mockData = generateMockDataForPlatform(platform, startDate, endDate);\r\n    \r\n    return {\r\n      success: true,\r\n      data: mockData\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: `Failed to fetch data from ${platform}: ${error instanceof Error ? error.message : String(error)}`\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Transform API data into the application's MarketingChannelPerformance format\r\n */\r\nexport function transformApiDataToChannelPerformance(\r\n  platform: MarketingPlatform,\r\n  channelId: string,\r\n  apiData: any\r\n): MarketingChannelPerformance {\r\n  // In a real implementation, this would transform the API's specific format\r\n  // to our application's data structure\r\n  \r\n  return {\r\n    channelId,\r\n    spend: apiData.spend || 0,\r\n    revenue: apiData.revenue || 0,\r\n    impressions: apiData.impressions || 0,\r\n    clicks: apiData.clicks || 0,\r\n    conversions: apiData.conversions || 0\r\n  };\r\n}\r\n\r\n/**\r\n * Save API configuration to localStorage\r\n */\r\nexport function saveApiConfigurations(): void {\r\n  try {\r\n    localStorage.setItem('marketing-api-configs', JSON.stringify(apiConfigurations));\r\n  } catch (error) {\r\n    console.error('Failed to save API configurations:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Load API configuration from localStorage\r\n */\r\nexport function loadApiConfigurations(): void {\r\n  try {\r\n    const saved = localStorage.getItem('marketing-api-configs');\r\n    if (saved) {\r\n      apiConfigurations = JSON.parse(saved);\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to load API configurations:', error);\r\n  }\r\n}\r\n\r\n// Initialize by loading saved configurations\r\nloadApiConfigurations();\r\n\r\n// Helper function to generate mock data for demo purposes\r\nfunction generateMockDataForPlatform(platform: MarketingPlatform, startDate: string, endDate: string) {\r\n  // Generate random performance metrics based on the platform\r\n  const baseImpressions = Math.floor(Math.random() * 100000) + 10000;\r\n  const baseCTR = (Math.random() * 5) + 0.5; // 0.5% to 5.5%\r\n  const baseConversionRate = (Math.random() * 10) + 1; // 1% to 11%\r\n  const baseSpend = Math.floor(Math.random() * 5000) + 500;\r\n  \r\n  // Calculate derived metrics\r\n  const clicks = Math.round(baseImpressions * (baseCTR / 100));\r\n  const conversions = Math.round(clicks * (baseConversionRate / 100));\r\n  const costPerConversion = conversions > 0 ? baseSpend / conversions : 0;\r\n  const revenue = conversions * ((Math.random() * 50) + 20); // $20-$70 per conversion\r\n  \r\n  // Platform-specific adjustments\r\n  let platformMultiplier = 1.0;\r\n  switch (platform) {\r\n    case 'facebook':\r\n      platformMultiplier = 1.2; // Facebook tends to have higher impressions\r\n      break;\r\n    case 'google':\r\n      platformMultiplier = 1.5; // Google tends to have higher conversion rates\r\n      break;\r\n    case 'twitter':\r\n      platformMultiplier = 0.8; // Twitter might have lower conversion rates\r\n      break;\r\n    case 'linkedin':\r\n      platformMultiplier = 2.0; // LinkedIn might have higher revenue per conversion\r\n      break;\r\n    case 'tiktok':\r\n      platformMultiplier = 1.8; // TikTok might have higher impressions but lower conversions\r\n      break;\r\n    default:\r\n      platformMultiplier = 1.0;\r\n  }\r\n  \r\n  return {\r\n    platform,\r\n    period: {\r\n      startDate,\r\n      endDate\r\n    },\r\n    metrics: {\r\n      impressions: Math.round(baseImpressions * platformMultiplier),\r\n      clicks: Math.round(clicks * platformMultiplier),\r\n      conversions: Math.round(conversions * platformMultiplier),\r\n      spend: baseSpend,\r\n      revenue: revenue * platformMultiplier,\r\n      ctr: baseCTR,\r\n      conversionRate: baseConversionRate,\r\n      costPerConversion,\r\n      roi: ((revenue - baseSpend) / baseSpend) * 100\r\n    },\r\n    campaigns: [\r\n      {\r\n        name: `${platform.charAt(0).toUpperCase() + platform.slice(1)} Campaign 1`,\r\n        spend: baseSpend * 0.6,\r\n        impressions: baseImpressions * 0.6\r\n      },\r\n      {\r\n        name: `${platform.charAt(0).toUpperCase() + platform.slice(1)} Campaign 2`,\r\n        spend: baseSpend * 0.4,\r\n        impressions: baseImpressions * 0.4\r\n      }\r\n    ]\r\n  };\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\migrateLocalData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDoc' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MARKETING_API_CONFIGS_KEY' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":252,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7775,7778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7775,7778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'migratedKpis' is assigned a value but never used.","line":303,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  setDoc,\r\n  Firestore,\r\n  serverTimestamp\r\n} from 'firebase/firestore';\r\nimport { db } from './firebaseConfig';\r\nimport type { Product, Scenario } from '../types';\r\n\r\n// Constants\r\nconst PRODUCTS_KEY = 'products';\r\nconst SCENARIOS_KEY = 'scenarios';\r\nconst MARKETING_API_CONFIGS_KEY = 'marketingApiConfigs';\r\nconst MARKETING_KPIS_PREFIX = 'marketing-kpis-';\r\nconst MIGRATION_COMPLETED_KEY = 'firestoreMigrationCompleted';\r\n\r\n// Collection names in Firestore\r\nconst PRODUCTS_COLLECTION = 'products';\r\nconst SCENARIOS_COLLECTION = 'scenarios';\r\nconst MARKETING_KPIS_COLLECTION = 'marketingKpis';\r\n\r\n// Type for tracking migration status\r\nexport interface MigrationStatus {\r\n  inProgress: boolean;\r\n  completed: boolean;\r\n  productsTotal: number;\r\n  productsMigrated: number;\r\n  scenariosTotal: number;\r\n  scenariosMigrated: number;\r\n  kpisTotal: number;\r\n  kpisMigrated: number;\r\n  errors: string[];\r\n}\r\n\r\nconst initialStatus: MigrationStatus = {\r\n  inProgress: false,\r\n  completed: false,\r\n  productsTotal: 0,\r\n  productsMigrated: 0,\r\n  scenariosTotal: 0,\r\n  scenariosMigrated: 0,\r\n  kpisTotal: 0,\r\n  kpisMigrated: 0,\r\n  errors: []\r\n};\r\n\r\n/**\r\n * Check if there is data in localStorage that needs to be migrated\r\n * and if Firestore is empty\r\n */\r\nexport const checkMigrationNeeded = async (): Promise<boolean> => {\r\n  try {\r\n    // Check if migration was already completed\r\n    const migrationCompleted = localStorage.getItem(MIGRATION_COMPLETED_KEY);\r\n    if (migrationCompleted === 'true') {\r\n      return false;\r\n    }\r\n\r\n    // Check if there's data in localStorage\r\n    const productsJson = localStorage.getItem(PRODUCTS_KEY);\r\n    const scenariosJson = localStorage.getItem(SCENARIOS_KEY);\r\n\r\n    const hasLocalData = !!(productsJson || scenariosJson);\r\n    if (!hasLocalData) {\r\n      return false;\r\n    }\r\n\r\n    // Check if Firestore already has data\r\n    if (!db) {\r\n      console.warn('Firebase DB is not initialized');\r\n      return false;\r\n    }\r\n    \r\n    const productsCollection = collection(db as Firestore, PRODUCTS_COLLECTION);\r\n    const productsSnapshot = await getDocs(productsCollection);\r\n    \r\n    // If Firestore already has data, no need to migrate\r\n    if (!productsSnapshot.empty) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error checking migration status:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Migrate products from localStorage to Firestore\r\n */\r\nconst migrateProducts = async (\r\n  updateStatus: (update: Partial<MigrationStatus> | ((prev: MigrationStatus) => Partial<MigrationStatus>)) => void\r\n): Promise<void> => {\r\n  const productsJson = localStorage.getItem(PRODUCTS_KEY);\r\n  if (!productsJson) {\r\n    return;\r\n  }\r\n  \r\n  if (!db) {\r\n    console.warn('Firebase DB is not initialized');\r\n    updateStatus((prev: MigrationStatus) => ({ \r\n      errors: [...prev.errors, 'Firebase DB is not initialized'] \r\n    }));\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const products = JSON.parse(productsJson) as Record<string, Product>;\r\n    const productIds = Object.keys(products);\r\n    updateStatus({ productsTotal: productIds.length });\r\n\r\n    for (const productId of productIds) {\r\n      try {\r\n        const product = products[productId];\r\n        \r\n        // Ensure the product has an ID\r\n        if (!product.info?.id) {\r\n          throw new Error(`Product has no ID: ${JSON.stringify(product)}`);\r\n        }\r\n\r\n        const productRef = doc(db as Firestore, PRODUCTS_COLLECTION, product.info.id);\r\n        \r\n        // Add timestamps for creation and updates\r\n        const productWithTimestamps = {\r\n          ...product,\r\n          createdAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp()\r\n        };\r\n\r\n        await setDoc(productRef, productWithTimestamps);\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          productsMigrated: prev.productsMigrated + 1 \r\n        }));\r\n      } catch (error) {\r\n        const errorMessage = `Failed to migrate product ${productId}: ${error instanceof Error ? error.message : String(error)}`;\r\n        console.error(errorMessage);\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          errors: [...prev.errors, errorMessage] \r\n        }));\r\n      }\r\n    }\r\n  } catch (error) {\r\n    const errorMessage = `Failed to parse products from localStorage: ${error instanceof Error ? error.message : String(error)}`;\r\n    console.error(errorMessage);\r\n    updateStatus((prev: MigrationStatus) => ({ \r\n      errors: [...prev.errors, errorMessage] \r\n    }));\r\n  }\r\n};\r\n\r\n/**\r\n * Migrate scenarios from localStorage to Firestore\r\n */\r\nconst migrateScenarios = async (\r\n  updateStatus: (update: Partial<MigrationStatus> | ((prev: MigrationStatus) => Partial<MigrationStatus>)) => void\r\n): Promise<void> => {\r\n  const scenariosJson = localStorage.getItem(SCENARIOS_KEY);\r\n  if (!scenariosJson) {\r\n    return;\r\n  }\r\n  \r\n  if (!db) {\r\n    console.warn('Firebase DB is not initialized');\r\n    updateStatus((prev: MigrationStatus) => ({ \r\n      errors: [...prev.errors, 'Firebase DB is not initialized'] \r\n    }));\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const scenarios = JSON.parse(scenariosJson) as Record<string, Scenario>;\r\n    const scenarioIds = Object.keys(scenarios);\r\n    updateStatus({ scenariosTotal: scenarioIds.length });\r\n\r\n    for (const scenarioId of scenarioIds) {\r\n      try {\r\n        const scenario = scenarios[scenarioId];\r\n        \r\n        // Ensure the scenario has an ID\r\n        if (!scenario.id) {\r\n          throw new Error(`Scenario has no ID: ${JSON.stringify(scenario)}`);\r\n        }\r\n\r\n        const scenarioRef = doc(db as Firestore, SCENARIOS_COLLECTION, scenario.id);\r\n        \r\n        // Add timestamps for creation and updates\r\n        const scenarioWithTimestamps = {\r\n          ...scenario,\r\n          createdAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp()\r\n        };\r\n\r\n        await setDoc(scenarioRef, scenarioWithTimestamps);\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          scenariosMigrated: prev.scenariosMigrated + 1 \r\n        }));\r\n      } catch (error) {\r\n        const errorMessage = `Failed to migrate scenario ${scenarioId}: ${error instanceof Error ? error.message : String(error)}`;\r\n        console.error(errorMessage);\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          errors: [...prev.errors, errorMessage] \r\n        }));\r\n      }\r\n    }\r\n  } catch (error) {\r\n    const errorMessage = `Failed to parse scenarios from localStorage: ${error instanceof Error ? error.message : String(error)}`;\r\n    console.error(errorMessage);\r\n    updateStatus((prev: MigrationStatus) => ({ \r\n      errors: [...prev.errors, errorMessage] \r\n    }));\r\n  }\r\n};\r\n\r\n/**\r\n * Migrate marketing KPIs from localStorage to Firestore\r\n */\r\nconst migrateMarketingKPIs = async (\r\n  updateStatus: (update: Partial<MigrationStatus> | ((prev: MigrationStatus) => Partial<MigrationStatus>)) => void\r\n): Promise<void> => {\r\n  if (!db) {\r\n    console.warn('Firebase DB is not initialized');\r\n    updateStatus((prev: MigrationStatus) => ({ \r\n      errors: [...prev.errors, 'Firebase DB is not initialized for marketing KPI migration'] \r\n    }));\r\n    return;\r\n  }\r\n\r\n  // Look for marketing KPI data in localStorage\r\n  let totalKpis = 0;\r\n  let migratedKpis = 0;\r\n  \r\n  try {\r\n    // Find all marketing KPI keys\r\n    const kpiKeys: string[] = [];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith(MARKETING_KPIS_PREFIX)) {\r\n        kpiKeys.push(key);\r\n      }\r\n    }\r\n    \r\n    if (kpiKeys.length === 0) {\r\n      return; // No KPIs to migrate\r\n    }\r\n    \r\n    // Count total KPIs to migrate\r\n    let allKpis: { kpi: any, productId: string }[] = [];\r\n    \r\n    for (const key of kpiKeys) {\r\n      try {\r\n        const kpisJson = localStorage.getItem(key);\r\n        if (!kpisJson) continue;\r\n        \r\n        // Extract product ID from the key\r\n        const productId = key.replace(MARKETING_KPIS_PREFIX, '');\r\n        if (!productId) continue;\r\n        \r\n        const kpis = JSON.parse(kpisJson);\r\n        if (!Array.isArray(kpis)) continue;\r\n        \r\n        // Add productId to each KPI if not present\r\n        const kpisWithProductId = kpis.map(kpi => ({\r\n          ...kpi,\r\n          productId: kpi.productId || productId\r\n        }));\r\n        \r\n        allKpis = [...allKpis, ...kpisWithProductId.map(kpi => ({ kpi, productId }))];\r\n      } catch (error) {\r\n        const errorMessage = `Failed to parse KPIs from key ${key}: ${error instanceof Error ? error.message : String(error)}`;\r\n        console.error(errorMessage);\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          errors: [...prev.errors, errorMessage] \r\n        }));\r\n      }\r\n    }\r\n    \r\n    totalKpis = allKpis.length;\r\n    updateStatus({ kpisTotal: totalKpis });\r\n    \r\n    // Migrate each KPI\r\n    for (const { kpi, productId } of allKpis) {\r\n      try {\r\n        if (!kpi.id) {\r\n          throw new Error(`KPI has no ID: ${JSON.stringify(kpi)}`);\r\n        }\r\n        \r\n        const kpiRef = doc(db as Firestore, MARKETING_KPIS_COLLECTION, kpi.id);\r\n        \r\n        // Add timestamps and productId\r\n        const kpiWithTimestamps = {\r\n          ...kpi,\r\n          productId,\r\n          createdAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp()\r\n        };\r\n        \r\n        await setDoc(kpiRef, kpiWithTimestamps);\r\n        migratedKpis++;\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          kpisMigrated: prev.kpisMigrated + 1 \r\n        }));\r\n      } catch (error) {\r\n        const errorMessage = `Failed to migrate KPI: ${error instanceof Error ? error.message : String(error)}`;\r\n        console.error(errorMessage);\r\n        updateStatus((prev: MigrationStatus) => ({ \r\n          errors: [...prev.errors, errorMessage] \r\n        }));\r\n      }\r\n    }\r\n  } catch (error) {\r\n    const errorMessage = `Failed during marketing KPI migration: ${error instanceof Error ? error.message : String(error)}`;\r\n    console.error(errorMessage);\r\n    updateStatus((prev: MigrationStatus) => ({ \r\n      errors: [...prev.errors, errorMessage] \r\n    }));\r\n  }\r\n};\r\n\r\n/**\r\n * Migrate data from localStorage to Firestore\r\n */\r\nexport const migrateLocalDataToFirestore = async (\r\n  setStatus: React.Dispatch<React.SetStateAction<MigrationStatus | null>>\r\n): Promise<void> => {\r\n  // Initialize status\r\n  setStatus(initialStatus);\r\n  \r\n  // Update status with partial updates\r\n  const updateStatus = (update: Partial<MigrationStatus> | ((prev: MigrationStatus) => Partial<MigrationStatus>)) => {\r\n    setStatus(prevStatus => {\r\n      if (!prevStatus) return null;\r\n      \r\n      const newUpdate = typeof update === 'function' \r\n        ? update(prevStatus) \r\n        : update;\r\n        \r\n      return { ...prevStatus, ...newUpdate };\r\n    });\r\n  };\r\n\r\n  try {\r\n    // Start migration\r\n    updateStatus({ inProgress: true });\r\n    \r\n    // Migrate products\r\n    await migrateProducts(updateStatus);\r\n    \r\n    // Migrate scenarios\r\n    await migrateScenarios(updateStatus);\r\n    \r\n    // Migrate marketing KPIs\r\n    await migrateMarketingKPIs(updateStatus);\r\n    \r\n    // Mark migration as completed\r\n    localStorage.setItem(MIGRATION_COMPLETED_KEY, 'true');\r\n    \r\n    // Update status\r\n    updateStatus({ inProgress: false, completed: true });\r\n  } catch (error) {\r\n    // Handle unexpected errors\r\n    const errorMessage = `Migration failed: ${error instanceof Error ? error.message : String(error)}`;\r\n    console.error(errorMessage);\r\n    \r\n    // Get the current status to append the error\r\n    setStatus(currentStatus => {\r\n      if (!currentStatus) return null;\r\n      \r\n      return {\r\n        ...currentStatus,\r\n        inProgress: false,\r\n        completed: true,\r\n        errors: [...currentStatus.errors, errorMessage]\r\n      };\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a migration component to display in the UI\r\n */\r\nexport const createMigrationComponent = () => {\r\n  // This would be implemented separately and imported where needed\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\lib\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'roundedValue' is assigned a value but never used.","line":40,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2314,2317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2314,2317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2325,2328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2325,2328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\n/**\r\n * Combine class names with Tailwind CSS support\r\n */\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Format currency value with proper rounding and no decimal places\r\n */\r\nexport function formatCurrency(\r\n  value: number,\r\n  currency: string = 'USD',\r\n  options: Intl.NumberFormatOptions = {}\r\n): string {\r\n  // Round to whole numbers\r\n  const roundedValue = Math.round(value);\r\n  \r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n    ...options\r\n  }).format(roundedValue);\r\n}\r\n\r\n/**\r\n * Format percentage value with proper rounding\r\n */\r\nexport function formatPercent(\r\n  value: number,\r\n  options: Intl.NumberFormatOptions = {}\r\n): string {\r\n  // Convert decimal to percentage and round to 1 decimal place\r\n  const percentValue = value * 100;\r\n  const roundedValue = Math.round(percentValue * 10) / 10;\r\n\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'percent',\r\n    minimumFractionDigits: 1,\r\n    maximumFractionDigits: 1,\r\n    ...options\r\n  }).format(value);\r\n}\r\n\r\n/**\r\n * Format number with proper rounding and grouping\r\n */\r\nexport function formatNumber(\r\n  value: number,\r\n  options: Intl.NumberFormatOptions = {}\r\n): string {\r\n  // Round to whole numbers by default\r\n  const roundedValue = Math.round(value);\r\n\r\n  return new Intl.NumberFormat('en-US', {\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n    ...options\r\n  }).format(roundedValue);\r\n}\r\n\r\n/**\r\n * Format date\r\n */\r\nexport function formatDate(\r\n  date: Date | string | number,\r\n  options: Intl.DateTimeFormatOptions = { \r\n    year: 'numeric', \r\n    month: 'short', \r\n    day: 'numeric' \r\n  }\r\n): string {\r\n  const dateObj = date instanceof Date ? date : new Date(date);\r\n  return new Intl.DateTimeFormat('en-US', options).format(dateObj);\r\n}\r\n\r\n/**\r\n * Safely parse JSON with error handling\r\n */\r\nexport function safeJsonParse<T>(json: string, fallback: T): T {\r\n  try {\r\n    return JSON.parse(json) as T;\r\n  } catch (e) {\r\n    console.error('Error parsing JSON:', e);\r\n    return fallback;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if two objects are deeply equal\r\n */\r\nexport function deepEqual(obj1: any, obj2: any): boolean {\r\n  if (obj1 === obj2) return true;\r\n  \r\n  if (typeof obj1 !== 'object' || obj1 === null || \r\n      typeof obj2 !== 'object' || obj2 === null) {\r\n    return false;\r\n  }\r\n  \r\n  const keys1 = Object.keys(obj1);\r\n  const keys2 = Object.keys(obj2);\r\n  \r\n  if (keys1.length !== keys2.length) return false;\r\n  \r\n  for (const key of keys1) {\r\n    if (!keys2.includes(key)) return false;\r\n    if (!deepEqual(obj1[key], obj2[key])) return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\n/**\r\n * Generate a unique ID\r\n */\r\nexport function uniqueId(prefix: string = ''): string {\r\n  return `${prefix}${Date.now().toString(36)}${Math.random().toString(36).substring(2, 9)}`;\r\n}\r\n\r\n/**\r\n * Capitalize the first letter of a string\r\n */\r\nexport function capitalize(str: string): string {\r\n  if (!str) return '';\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\store\\createStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateRevenueMetrics' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateGrowthMetrics' is assigned a value but never used.","line":36,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Add debugging for state changes and ensure values persist in the store\r\n// Look for any state update functions and add console logging\r\n\r\n// Find where productInfo, growthMetrics, revenueMetrics, etc. are updated\r\n// For example, look for setRevenueMetrics, setGrowthMetrics, etc.\r\n\r\n// Add a console log to track state changes\r\nconst updateRevenueMetrics = (metrics: Partial<RevenueMetrics>) => {\r\n  console.log(\"STATE UPDATE - Revenue Metrics:\", metrics);\r\n  set((state) => {\r\n    const currentProduct = state.products.find(p => p.info.id === state.currentProductId);\r\n    if (!currentProduct) return state;\r\n    \r\n    // Create a new array with the updated product\r\n    const updatedProducts = state.products.map(product => {\r\n      if (product.info.id === state.currentProductId) {\r\n        return {\r\n          ...product,\r\n          revenueMetrics: {\r\n            ...product.revenueMetrics,\r\n            ...metrics\r\n          }\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    \r\n    return {\r\n      ...state,\r\n      products: updatedProducts\r\n    };\r\n  });\r\n};\r\n\r\n// Add similar functions for other metric types\r\nconst updateGrowthMetrics = (metrics: Partial<GrowthMetrics>) => {\r\n  console.log(\"STATE UPDATE - Growth Metrics:\", metrics);\r\n  set((state) => {\r\n    const currentProduct = state.products.find(p => p.info.id === state.currentProductId);\r\n    if (!currentProduct) return state;\r\n    \r\n    // Create a new array with the updated product\r\n    const updatedProducts = state.products.map(product => {\r\n      if (product.info.id === state.currentProductId) {\r\n        return {\r\n          ...product,\r\n          growthMetrics: {\r\n            ...product.growthMetrics,\r\n            ...metrics\r\n          }\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    \r\n    return {\r\n      ...state,\r\n      products: updatedProducts\r\n    };\r\n  });\r\n};\r\n\r\n// Add these to the store object's return value ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\store\\localStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_GROWTH_METRICS' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_REVENUE_METRICS' is defined but never used.","line":13,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_COST_METRICS' is defined but never used.","line":13,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_CUSTOMER_METRICS' is defined but never used.","line":13,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":105},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_SEASONAL_ANALYSIS' is defined but never used.","line":13,"column":107,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":132}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { devtools, persist } from 'zustand/middleware';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport type { \r\n  Product, \r\n  RiskAssessment, \r\n  SeasonalAnalysis, \r\n  Scenario, \r\n  LikelihoodLevel, \r\n  ImpactLevel,\r\n  ScenarioModel \r\n} from '../types';\r\nimport { DEFAULT_GROWTH_METRICS, DEFAULT_REVENUE_METRICS, DEFAULT_COST_METRICS, DEFAULT_CUSTOMER_METRICS, DEFAULT_SEASONAL_ANALYSIS } from '../types';\r\n\r\n// Storage keys\r\nconst PRODUCTS_KEY = 'fortress-products';\r\nconst SCENARIOS_KEY = 'fortress-scenarios';\r\nconst CURRENT_PRODUCT_KEY = 'currentProductId';\r\n\r\n// Load products from localStorage\r\nconst loadProducts = (): Product[] => {\r\n  try {\r\n    const savedProducts = localStorage.getItem(PRODUCTS_KEY);\r\n    \r\n    // If the saved data is invalid JSON or null, return an empty array\r\n    if (!savedProducts) {\r\n      return [];\r\n    }\r\n    \r\n    try {\r\n      const products = JSON.parse(savedProducts);\r\n      \r\n      // Validate the parsed data is an array\r\n      if (!Array.isArray(products)) {\r\n        console.warn('Saved products is not an array, resetting to empty array');\r\n        return [];\r\n      }\r\n      \r\n      // Ensure actuals is initialized on all products\r\n      products.forEach((product: Product) => {\r\n        if (!product.actuals) {\r\n          product.actuals = [];\r\n        }\r\n      });\r\n      \r\n      return products;\r\n    } catch (jsonError) {\r\n      console.error('Error parsing products JSON:', jsonError);\r\n      // Clear corrupt data\r\n      localStorage.removeItem(PRODUCTS_KEY);\r\n      return [];\r\n    }\r\n  } catch (localError) {\r\n    console.error('Error loading products from localStorage:', localError);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Save product to localStorage\r\nconst saveProduct = (product: Product): void => {\r\n  try {\r\n    const savedProducts = localStorage.getItem(PRODUCTS_KEY);\r\n    const products = savedProducts ? JSON.parse(savedProducts) : [];\r\n    const newProducts = [...products.filter((p: Product) => p.info.id !== product.info.id), product];\r\n    localStorage.setItem(PRODUCTS_KEY, JSON.stringify(newProducts));\r\n  } catch (localError) {\r\n    console.error('Error saving product to localStorage:', localError);\r\n  }\r\n};\r\n\r\n// Load scenarios from localStorage\r\nconst loadScenarios = (): ScenarioModel[] => {\r\n  try {\r\n    const savedScenarios = localStorage.getItem(SCENARIOS_KEY);\r\n    \r\n    // If the saved data is invalid JSON or null, return an empty array\r\n    if (!savedScenarios) {\r\n      return [];\r\n    }\r\n    \r\n    try {\r\n      const scenarios = JSON.parse(savedScenarios);\r\n      \r\n      // Validate the parsed data is an array\r\n      if (!Array.isArray(scenarios)) {\r\n        console.warn('Saved scenarios is not an array, resetting to empty array');\r\n        return [];\r\n      }\r\n      \r\n      return scenarios;\r\n    } catch (jsonError) {\r\n      console.error('Error parsing scenarios JSON:', jsonError);\r\n      // Clear corrupt data\r\n      localStorage.removeItem(SCENARIOS_KEY);\r\n      return [];\r\n    }\r\n  } catch (localError) {\r\n    console.error('Error loading scenarios from localStorage:', localError);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Save scenario to localStorage\r\nconst saveScenario = (scenario: ScenarioModel): void => {\r\n  try {\r\n    const savedScenarios = localStorage.getItem(SCENARIOS_KEY);\r\n    const scenarios = savedScenarios ? JSON.parse(savedScenarios) : [];\r\n    const newScenarios = [...scenarios.filter((s: ScenarioModel) => s.id !== scenario.id), scenario];\r\n    localStorage.setItem(SCENARIOS_KEY, JSON.stringify(newScenarios));\r\n  } catch (localError) {\r\n    console.error('Error saving scenario to localStorage:', localError);\r\n  }\r\n};\r\n\r\n// Delete scenario from localStorage\r\nconst deleteScenarioFromDB = (scenarioId: string): void => {\r\n  try {\r\n    const savedScenarios = localStorage.getItem(SCENARIOS_KEY);\r\n    if (savedScenarios) {\r\n      const scenarios = JSON.parse(savedScenarios);\r\n      const filteredScenarios = scenarios.filter((s: ScenarioModel) => s.id !== scenarioId);\r\n      localStorage.setItem(SCENARIOS_KEY, JSON.stringify(filteredScenarios));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting scenario from localStorage:', error);\r\n  }\r\n};\r\n\r\n// Delete product from localStorage\r\nconst deleteProductFromDB = (productId: string): void => {\r\n  try {\r\n    const savedProducts = localStorage.getItem(PRODUCTS_KEY);\r\n    if (savedProducts) {\r\n      const products = JSON.parse(savedProducts);\r\n      const filteredProducts = products.filter((p: Product) => p.info.id !== productId);\r\n      localStorage.setItem(PRODUCTS_KEY, JSON.stringify(filteredProducts));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting product from localStorage:', error);\r\n  }\r\n};\r\n\r\ninterface StoreState {\r\n  products: Product[];\r\n  currentProductId: string | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  scenarios: ScenarioModel[];\r\n  recentlyViewed: string[];\r\n  addScenarioModel: (scenario: ScenarioModel) => void;\r\n  updateScenarioModel: (scenario: ScenarioModel) => void;\r\n  deleteScenarioModel: (scenarioId: string) => void;\r\n  getScenariosByProduct: (productId: string) => ScenarioModel[];\r\n  addProduct: (product: Product) => void;\r\n  updateProduct: ((productId: string, updates: Partial<Product>) => void) & ((product: Product) => void);\r\n  deleteProduct: (productId: string) => void;\r\n  setCurrentProduct: (productId: string | null) => void;\r\n  clearError: () => void;\r\n  addRiskAssessment: (productId: string, risk: Omit<RiskAssessment, 'id'>) => void;\r\n  updateRiskAssessment: (productId: string, riskId: string, updates: Partial<RiskAssessment>) => void;\r\n  deleteRiskAssessment: (productId: string, riskId: string) => void;\r\n  updateSeasonalAnalysis: (productId: string, seasonalAnalysis: SeasonalAnalysis[]) => void;\r\n  addScenario: (productId: string, scenario: Omit<Scenario, 'id'>) => void;\r\n  updateScenario: (productId: string, scenarioId: string, updates: Partial<Scenario>) => void;\r\n  deleteScenario: (productId: string, scenarioId: string) => void;\r\n  initializeStore: () => Promise<void>;\r\n}\r\n\r\nconst useLocalStore = create<StoreState>()(\r\n  devtools(\r\n    persist(\r\n      (set, get) => ({\r\n        products: [],\r\n        currentProductId: null,\r\n        isLoading: false,\r\n        error: null,\r\n        scenarios: [],\r\n        recentlyViewed: [],\r\n\r\n        // Initialize store with data from localStorage\r\n        initializeStore: async () => {\r\n          set({ isLoading: true, error: null });\r\n          \r\n          // Add a safety timeout to prevent infinite loading\r\n          const safetyTimer = setTimeout(() => {\r\n            console.warn('Store initialization timed out - forcing completion');\r\n            set({ \r\n              isLoading: false,\r\n              error: 'Store initialization timed out'\r\n            });\r\n          }, 5000); // 5 second timeout\r\n          \r\n          try {\r\n            // Load from localStorage\r\n            const products = loadProducts();\r\n            const scenarios = loadScenarios();\r\n            \r\n            // Clear the timeout since we loaded successfully\r\n            clearTimeout(safetyTimer);\r\n            \r\n            set({ \r\n              products,\r\n              scenarios,\r\n              isLoading: false,\r\n              // If we have a currentProductId in localStorage, use it\r\n              currentProductId: localStorage.getItem(CURRENT_PRODUCT_KEY)\r\n            });\r\n          } catch (error) {\r\n            clearTimeout(safetyTimer);\r\n            console.error('Error initializing store:', error);\r\n            set({ \r\n              isLoading: false, \r\n              error: error instanceof Error ? error.message : 'Unknown error initializing store'\r\n            });\r\n          }\r\n        },\r\n\r\n        // Add a new product model\r\n        addProduct: (product: Product) => {\r\n          const products = get().products;\r\n          const newProducts = [...products, product];\r\n          set({ products: newProducts });\r\n          saveProduct(product);\r\n        },\r\n\r\n        // Update an existing product model\r\n        updateProduct: ((productIdOrProduct: string | Product, updates?: Partial<Product>) => {\r\n          const products = get().products;\r\n          \r\n          if (typeof productIdOrProduct === 'string' && updates) {\r\n            // First argument is productId, second is updates\r\n            const productId = productIdOrProduct;\r\n            const product = products.find(p => p.info.id === productId);\r\n            \r\n            if (!product) {\r\n              console.error(`Product with ID ${productId} not found`);\r\n              return;\r\n            }\r\n            \r\n            const updatedProduct = { ...product, ...updates };\r\n            const newProducts = products.map(p => \r\n              p.info.id === productId ? updatedProduct : p\r\n            );\r\n            \r\n            set({ products: newProducts });\r\n            saveProduct(updatedProduct);\r\n          } else if (typeof productIdOrProduct === 'object') {\r\n            // First argument is the product object\r\n            const product = productIdOrProduct;\r\n            const newProducts = products.map(p => \r\n              p.info.id === product.info.id ? product : p\r\n            );\r\n            \r\n            set({ products: newProducts });\r\n            saveProduct(product);\r\n          }\r\n        }) as ((productId: string, updates: Partial<Product>) => void) & ((product: Product) => void),\r\n\r\n        // Delete a product\r\n        deleteProduct: (productId: string) => {\r\n          const products = get().products;\r\n          const newProducts = products.filter(p => p.info.id !== productId);\r\n          set({ products: newProducts });\r\n          deleteProductFromDB(productId);\r\n          \r\n          // If the deleted product is the current one, reset currentProductId\r\n          if (get().currentProductId === productId) {\r\n            set({ currentProductId: null });\r\n            localStorage.removeItem(CURRENT_PRODUCT_KEY);\r\n          }\r\n        },\r\n\r\n        // Set the current product ID\r\n        setCurrentProduct: (productId: string | null) => {\r\n          set({ currentProductId: productId });\r\n          \r\n          // Save to localStorage for persistence\r\n          if (productId) {\r\n            localStorage.setItem(CURRENT_PRODUCT_KEY, productId);\r\n          } else {\r\n            localStorage.removeItem(CURRENT_PRODUCT_KEY);\r\n          }\r\n        },\r\n\r\n        // Clear any error messages\r\n        clearError: () => {\r\n          set({ error: null });\r\n        },\r\n\r\n        // Add a new risk assessment to a product\r\n        addRiskAssessment: (productId: string, risk: Omit<RiskAssessment, 'id'>) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          const riskAssessments = product.riskAssessments || [];\r\n          \r\n          const newRisk: RiskAssessment = {\r\n            ...risk,\r\n            id: uuidv4() // Generate a unique ID for the risk\r\n          };\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            riskAssessments: [...riskAssessments, newRisk]\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Update an existing risk assessment\r\n        updateRiskAssessment: (productId: string, riskId: string, updates: Partial<RiskAssessment>) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          const riskAssessments = product.riskAssessments || [];\r\n          \r\n          const updatedRiskAssessments = riskAssessments.map(risk => \r\n            risk.id === riskId ? { ...risk, ...updates } : risk\r\n          );\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            riskAssessments: updatedRiskAssessments\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Delete a risk assessment\r\n        deleteRiskAssessment: (productId: string, riskId: string) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          const riskAssessments = product.riskAssessments || [];\r\n          \r\n          const updatedRiskAssessments = riskAssessments.filter(risk => risk.id !== riskId);\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            riskAssessments: updatedRiskAssessments\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Update seasonal analysis data\r\n        updateSeasonalAnalysis: (productId: string, seasonalAnalysis: SeasonalAnalysis[]) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            seasonalAnalysis\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Add a new scenario to a product\r\n        addScenario: (productId: string, scenario: Omit<Scenario, 'id'>) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          const scenarios = product.scenarios || [];\r\n          \r\n          const newScenario: Scenario = {\r\n            ...scenario,\r\n            id: uuidv4() // Generate a unique ID for the scenario\r\n          };\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            scenarios: [...scenarios, newScenario]\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Update an existing scenario\r\n        updateScenario: (productId: string, scenarioId: string, updates: Partial<Scenario>) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          const scenarios = product.scenarios || [];\r\n          \r\n          const updatedScenarios = scenarios.map(scenario => \r\n            scenario.id === scenarioId ? { ...scenario, ...updates } : scenario\r\n          );\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            scenarios: updatedScenarios\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Delete a scenario from a product\r\n        deleteScenario: (productId: string, scenarioId: string) => {\r\n          const products = get().products;\r\n          const productIndex = products.findIndex(p => p.info.id === productId);\r\n          \r\n          if (productIndex === -1) {\r\n            console.error(`Product with ID ${productId} not found`);\r\n            return;\r\n          }\r\n          \r\n          const product = products[productIndex];\r\n          const scenarios = product.scenarios || [];\r\n          \r\n          const updatedScenarios = scenarios.filter(scenario => scenario.id !== scenarioId);\r\n          \r\n          const updatedProduct = {\r\n            ...product,\r\n            scenarios: updatedScenarios\r\n          };\r\n          \r\n          const newProducts = [...products];\r\n          newProducts[productIndex] = updatedProduct;\r\n          \r\n          set({ products: newProducts });\r\n          saveProduct(updatedProduct);\r\n        },\r\n\r\n        // Scenario model operations (for new UI)\r\n        addScenarioModel: (scenario: ScenarioModel) => {\r\n          const scenarios = get().scenarios;\r\n          const newScenarios = [...scenarios, scenario];\r\n          set({ scenarios: newScenarios });\r\n          saveScenario(scenario);\r\n        },\r\n\r\n        updateScenarioModel: (scenario: ScenarioModel) => {\r\n          const scenarios = get().scenarios;\r\n          const newScenarios = scenarios.map(s => \r\n            s.id === scenario.id ? scenario : s\r\n          );\r\n          set({ scenarios: newScenarios });\r\n          saveScenario(scenario);\r\n        },\r\n\r\n        deleteScenarioModel: (scenarioId: string) => {\r\n          const scenarios = get().scenarios;\r\n          const newScenarios = scenarios.filter(s => s.id !== scenarioId);\r\n          set({ scenarios: newScenarios });\r\n          deleteScenarioFromDB(scenarioId);\r\n        },\r\n\r\n        getScenariosByProduct: (productId: string) => {\r\n          const scenarios = get().scenarios;\r\n          return scenarios.filter(s => s.productId === productId);\r\n        }\r\n      }),\r\n      {\r\n        name: 'fortress-financial-model-store'\r\n      }\r\n    )\r\n  )\r\n);\r\n\r\nexport default useLocalStore;\r\n\r\n// Helper function to calculate risk score\r\nexport const calculateRiskScore = (\r\n  likelihood: LikelihoodLevel, \r\n  impact: ImpactLevel\r\n): number => {\r\n  const likelihoodMap = {\r\n    'Rare': 1,\r\n    'Unlikely': 2,\r\n    'Possible': 3,\r\n    'Likely': 4,\r\n    'Almost Certain': 5\r\n  };\r\n  \r\n  const impactMap = {\r\n    'Negligible': 1,\r\n    'Minor': 2,\r\n    'Moderate': 3,\r\n    'Major': 4,\r\n    'Severe': 5\r\n  };\r\n  \r\n  return likelihoodMap[likelihood] * impactMap[impact];\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\store\\useHybridStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":1,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StorageMode' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useLocalStore' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDb' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initializeFirebase' is defined but never used.","line":4,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isFirebaseInitialized' is defined but never used.","line":4,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'collection' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'doc' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDoc' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDocs' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setDoc' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateDoc' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteDoc' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addDoc' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Firestore' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Scenario' is defined but never used.","line":16,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Product' is defined but never used.","line":16,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WeeklyActuals' is defined but never used.","line":16,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SCENARIOS_COLLECTION' is assigned a value but never used.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PRODUCTS_COLLECTION' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\r\nimport { type StorageMode } from '../contexts/StorageContext';\r\nimport { useLocalStore } from './useLocalStore';\r\nimport { getDb, initializeFirebase, isFirebaseInitialized } from '../lib/firebase';\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  setDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  addDoc,\r\n  Firestore,\r\n} from 'firebase/firestore';\r\nimport type { Scenario, Product, WeeklyActuals } from './useLocalStore';\r\nimport { create } from 'zustand';\r\n\r\n// Collection names for Firebase\r\nconst SCENARIOS_COLLECTION = 'scenarios';\r\nconst PRODUCTS_COLLECTION = 'products';\r\n\r\n/**\r\n * A hybrid store hook that can use either Firebase or local storage\r\n * based on the user's preference.\r\n * \r\n * This provides a unified interface regardless of the storage backend.\r\n */\r\nconst useHybridStore = create((set) => ({\r\n  data: {},\r\n  isLoaded: false,\r\n  \r\n  // Initialize data from localStorage\r\n  initialize: async () => {\r\n    try {\r\n      const savedData = localStorage.getItem('hybrid-store');\r\n      if (savedData) {\r\n        set({ data: JSON.parse(savedData), isLoaded: true });\r\n      } else {\r\n        set({ data: {}, isLoaded: true });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing hybrid store:', error);\r\n      set({ data: {}, isLoaded: true });\r\n    }\r\n  },\r\n  \r\n  // Save data to localStorage\r\n  saveData: (newData) => {\r\n    set((state) => {\r\n      const updatedData = { ...state.data, ...newData };\r\n      try {\r\n        localStorage.setItem('hybrid-store', JSON.stringify(updatedData));\r\n      } catch (error) {\r\n        console.error('Error saving to localStorage:', error);\r\n      }\r\n      return { data: updatedData };\r\n    });\r\n  }\r\n}));\r\n\r\nexport default useHybridStore; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\store\\useStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DocumentData' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":20,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PRODUCTS_COLLECTION' is assigned a value but never used.","line":24,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SCENARIOS_COLLECTION' is assigned a value but never used.","line":25,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentStorageMode' is assigned a value but never used.","line":32,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useFirebase' is assigned a value but never used.","line":41,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getFirestore' is assigned a value but never used.","line":46,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1668,1671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1668,1671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCollection' is assigned a value but never used.","line":53,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":53,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDocument' is assigned a value but never used.","line":58,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'collectionPath' is defined but never used.","line":58,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'docId' is defined but never used.","line":58,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1979,1982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1979,1982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14931,14934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14931,14934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":637,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":637,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":637,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":637,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport type { \r\n  Product, \r\n  RiskAssessment, \r\n  SeasonalAnalysis, \r\n  Scenario, \r\n  LikelihoodLevel, \r\n  ImpactLevel,\r\n  ScenarioModel \r\n} from '../types';\r\nimport { DEFAULT_GROWTH_METRICS, DEFAULT_REVENUE_METRICS, DEFAULT_COST_METRICS, DEFAULT_CUSTOMER_METRICS, DEFAULT_SEASONAL_ANALYSIS } from '../types';\r\nimport type { \r\n  Firestore,\r\n  CollectionReference,\r\n  DocumentReference,\r\n  DocumentData\r\n} from 'firebase/firestore';\r\nimport type { StorageMode } from '../contexts/StorageContext';\r\nimport { useCallback, useState } from 'react';\r\nimport { persist } from 'zustand/middleware';\r\n\r\n// Collection names\r\nconst PRODUCTS_COLLECTION = 'products';\r\nconst SCENARIOS_COLLECTION = 'scenarios';\r\n\r\n// Legacy localStorage keys (for data migration)\r\nconst STORAGE_KEY = 'fortress-products';\r\nconst SCENARIOS_STORAGE_KEY = 'fortress-scenarios';\r\n\r\n// Global variable to track storage mode - can be updated from outside\r\nlet currentStorageMode: StorageMode = 'local';\r\n\r\n// Function to set the current storage mode from the StorageContext\r\nexport const setStorageMode = (mode: StorageMode) => {\r\n  currentStorageMode = mode;\r\n  console.log(`Storage mode set to: ${mode}`);\r\n};\r\n\r\n// Check if we should use Firebase or localStorage\r\nconst useFirebase = (): boolean => {\r\n  return false; // Always use localStorage for now since we're not using Firebase\r\n};\r\n\r\n// Helper to ensure we're using Firestore properly\r\nconst getFirestore = (): Firestore => {\r\n  // Always return null since we're not using Firebase\r\n  console.warn('Using local storage instead of Firebase');\r\n  return null as any;\r\n};\r\n\r\n// Get a collection reference - stub implementation\r\nconst getCollection = (path: string): CollectionReference => {\r\n  return null as any;\r\n};\r\n\r\n// Get a document reference - stub implementation\r\nconst getDocument = (collectionPath: string, docId: string): DocumentReference => {\r\n  return null as any;\r\n};\r\n\r\n// Load products from storage (Firestore or localStorage)\r\nconst loadProducts = async (): Promise<Product[]> => {\r\n  // Skip Firestore logic entirely and only use localStorage\r\n  try {\r\n    const savedProducts = localStorage.getItem(STORAGE_KEY);\r\n    \r\n    // If the saved data is invalid JSON or null, return an empty array\r\n    if (!savedProducts) {\r\n      return [];\r\n    }\r\n    \r\n    try {\r\n      const products = JSON.parse(savedProducts);\r\n      \r\n      // Validate the parsed data is an array\r\n      if (!Array.isArray(products)) {\r\n        console.warn('Saved products is not an array, resetting to empty array');\r\n        return [];\r\n      }\r\n      \r\n      // Ensure actuals is initialized on all products\r\n      products.forEach((product: Product) => {\r\n        if (!product.actuals) {\r\n          product.actuals = [];\r\n        }\r\n      });\r\n      \r\n      return products;\r\n    } catch (jsonError) {\r\n      console.error('Error parsing products JSON:', jsonError);\r\n      // Clear corrupt data\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      return [];\r\n    }\r\n  } catch (localError) {\r\n    console.error('Error loading products from localStorage:', localError);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Save product to storage (Firestore or localStorage)\r\nconst saveProduct = async (product: Product): Promise<void> => {\r\n  // Only save to localStorage\r\n  try {\r\n    const savedProducts = localStorage.getItem(STORAGE_KEY);\r\n    const products = savedProducts ? JSON.parse(savedProducts) : [];\r\n    const newProducts = [...products.filter((p: Product) => p.info.id !== product.info.id), product];\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(newProducts));\r\n  } catch (localError) {\r\n    console.error('Error saving product to localStorage:', localError);\r\n  }\r\n};\r\n\r\n// Load scenarios from storage (Firestore or localStorage)\r\nconst loadScenarios = async (): Promise<ScenarioModel[]> => {\r\n  // Only use localStorage\r\n  try {\r\n    const savedScenarios = localStorage.getItem(SCENARIOS_STORAGE_KEY);\r\n    \r\n    // If the saved data is invalid JSON or null, return an empty array\r\n    if (!savedScenarios) {\r\n      return [];\r\n    }\r\n    \r\n    try {\r\n      const scenarios = JSON.parse(savedScenarios);\r\n      \r\n      // Validate the parsed data is an array\r\n      if (!Array.isArray(scenarios)) {\r\n        console.warn('Saved scenarios is not an array, resetting to empty array');\r\n        return [];\r\n      }\r\n      \r\n      return scenarios;\r\n    } catch (jsonError) {\r\n      console.error('Error parsing scenarios JSON:', jsonError);\r\n      // Clear corrupt data\r\n      localStorage.removeItem(SCENARIOS_STORAGE_KEY);\r\n      return [];\r\n    }\r\n  } catch (localError) {\r\n    console.error('Error loading scenarios from localStorage:', localError);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Save scenario to storage (Firestore or localStorage)\r\nconst saveScenario = async (scenario: ScenarioModel): Promise<void> => {\r\n  // Only save to localStorage\r\n  try {\r\n    const savedScenarios = localStorage.getItem(SCENARIOS_STORAGE_KEY);\r\n    const scenarios = savedScenarios ? JSON.parse(savedScenarios) : [];\r\n    const newScenarios = [...scenarios.filter((s: ScenarioModel) => s.id !== scenario.id), scenario];\r\n    localStorage.setItem(SCENARIOS_STORAGE_KEY, JSON.stringify(newScenarios));\r\n  } catch (localError) {\r\n    console.error('Error saving scenario to localStorage:', localError);\r\n  }\r\n};\r\n\r\n// Delete scenario from storage\r\nconst deleteScenarioFromDB = async (scenarioId: string): Promise<void> => {\r\n  // Only remove from localStorage\r\n  try {\r\n    const savedScenarios = localStorage.getItem(SCENARIOS_STORAGE_KEY);\r\n    if (savedScenarios) {\r\n      const scenarios = JSON.parse(savedScenarios);\r\n      const filteredScenarios = scenarios.filter((s: ScenarioModel) => s.id !== scenarioId);\r\n      localStorage.setItem(SCENARIOS_STORAGE_KEY, JSON.stringify(filteredScenarios));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting scenario from localStorage:', error);\r\n  }\r\n};\r\n\r\n// Delete product from storage\r\nconst deleteProductFromDB = async (productId: string): Promise<void> => {\r\n  // Only remove from localStorage\r\n  try {\r\n    const savedProducts = localStorage.getItem(STORAGE_KEY);\r\n    if (savedProducts) {\r\n      const products = JSON.parse(savedProducts);\r\n      const filteredProducts = products.filter((p: Product) => p.info.id !== productId);\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(filteredProducts));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting product from localStorage:', error);\r\n  }\r\n};\r\n\r\ninterface StoreState {\r\n  products: Product[];\r\n  currentProductId: string | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  scenarios: ScenarioModel[];\r\n  recentlyViewed: string[];\r\n  addScenarioModel: (scenario: ScenarioModel) => void;\r\n  updateScenarioModel: (scenario: ScenarioModel) => void;\r\n  deleteScenarioModel: (scenarioId: string) => void;\r\n  getScenariosByProduct: (productId: string) => ScenarioModel[];\r\n  addProduct: (product: Product) => void;\r\n  updateProduct: ((productId: string, updates: Partial<Product>) => void) & ((product: Product) => void);\r\n  deleteProduct: (productId: string) => void;\r\n  setCurrentProduct: (productId: string | null) => void;\r\n  clearError: () => void;\r\n  addRiskAssessment: (productId: string, risk: Omit<RiskAssessment, 'id'>) => void;\r\n  updateRiskAssessment: (productId: string, riskId: string, updates: Partial<RiskAssessment>) => void;\r\n  deleteRiskAssessment: (productId: string, riskId: string) => void;\r\n  updateSeasonalAnalysis: (productId: string, seasonalAnalysis: SeasonalAnalysis[]) => void;\r\n  addScenario: (productId: string, scenario: Omit<Scenario, 'id'>) => void;\r\n  updateScenario: (productId: string, scenarioId: string, updates: Partial<Scenario>) => void;\r\n  deleteScenario: (productId: string, scenarioId: string) => void;\r\n  initializeStore: () => Promise<void>;\r\n  syncStorage: (mode: StorageMode) => Promise<void>;\r\n}\r\n\r\nconst useStore = create<StoreState>()(\r\n  devtools(\r\n    persist(\r\n      (set, get) => ({\r\n        products: [],\r\n        currentProductId: null,\r\n        isLoading: false,\r\n        error: null,\r\n        scenarios: [],\r\n        recentlyViewed: [],\r\n\r\n        // Initialize store with data from storage\r\n        initializeStore: async () => {\r\n          set({ isLoading: true, error: null });\r\n          \r\n          // Add a safety timeout to prevent infinite loading\r\n          const safetyTimer = setTimeout(() => {\r\n            console.warn('Store initialization timed out - forcing completion');\r\n            set({ \r\n              isLoading: false,\r\n              error: 'Store initialization timed out'\r\n            });\r\n          }, 5000); // 5 second timeout\r\n          \r\n          try {\r\n            // Load from storage based on current mode\r\n            const products = await loadProducts();\r\n            const scenarios = await loadScenarios();\r\n            \r\n            // Clear the timeout since we loaded successfully\r\n            clearTimeout(safetyTimer);\r\n            \r\n            set({ \r\n              products, \r\n              scenarios,\r\n              isLoading: false\r\n            });\r\n            \r\n            // If we have a currentProductId in localStorage, use it\r\n            const currentId = localStorage.getItem('currentProductId');\r\n            if (currentId && products.some(p => p.info.id === currentId)) {\r\n              set({ currentProductId: currentId });\r\n            } else if (products.length > 0) {\r\n              set({ currentProductId: products[0].info.id });\r\n            }\r\n          } catch (error) {\r\n            // Clear the timeout since we're handling the error\r\n            clearTimeout(safetyTimer);\r\n            \r\n            console.error('Error initializing store:', error);\r\n            set({ \r\n              error: error instanceof Error ? error.message : 'Failed to initialize store',\r\n              isLoading: false,\r\n              // Initialize with empty arrays to ensure the UI can render\r\n              products: [],\r\n              scenarios: []\r\n            });\r\n          }\r\n        },\r\n\r\n        // Sync storage when mode changes\r\n        syncStorage: async (mode: StorageMode) => {\r\n          setStorageMode(mode);\r\n          return get().initializeStore();\r\n        },\r\n\r\n        addScenarioModel: (scenario: ScenarioModel) => {\r\n          // Generate ID if not present\r\n          const newScenario = {\r\n            ...scenario,\r\n            id: scenario.id || crypto.randomUUID(),\r\n            updatedAt: new Date().toISOString()\r\n          };\r\n          \r\n          set((state) => {\r\n            const newScenarios = [...state.scenarios, newScenario];\r\n            return { scenarios: newScenarios };\r\n          });\r\n          \r\n          // Save to storage (Firestore or localStorage)\r\n          saveScenario(newScenario);\r\n        },\r\n\r\n        updateScenarioModel: (scenario: ScenarioModel) => {\r\n          set((state) => {\r\n            const newScenarios = state.scenarios.map((s) => \r\n              s.id === scenario.id ? { ...scenario, updatedAt: new Date().toISOString() } : s\r\n            );\r\n            return { scenarios: newScenarios };\r\n          });\r\n          \r\n          // Save to storage (Firestore or localStorage)\r\n          saveScenario({\r\n            ...scenario,\r\n            updatedAt: new Date().toISOString()\r\n          });\r\n        },\r\n\r\n        deleteScenarioModel: (scenarioId: string) => {\r\n          set((state) => {\r\n            const newScenarios = state.scenarios.filter((s) => s.id !== scenarioId);\r\n            return { scenarios: newScenarios };\r\n          });\r\n          \r\n          // Delete from storage\r\n          deleteScenarioFromDB(scenarioId);\r\n        },\r\n\r\n        getScenariosByProduct: (productId: string) => {\r\n          return get().scenarios.filter((s) => s.productId === productId);\r\n        },\r\n\r\n        clearError: () => set({ error: null }),\r\n\r\n        addProduct: (product: Product) => {\r\n          // Generate ID if not present\r\n          const productId = product.info.id || crypto.randomUUID();\r\n          const newProduct = {\r\n            ...product,\r\n            info: {\r\n              ...product.info,\r\n              id: productId\r\n            },\r\n            growthMetrics: { ...DEFAULT_GROWTH_METRICS },\r\n            revenueMetrics: { ...DEFAULT_REVENUE_METRICS },\r\n            costMetrics: { ...DEFAULT_COST_METRICS },\r\n            customerMetrics: { ...DEFAULT_CUSTOMER_METRICS },\r\n            weeklyProjections: [],\r\n            actualMetrics: [],\r\n            actuals: [],  // Initialize as empty array instead of undefined\r\n            risks: [],\r\n            seasonalAnalysis: [...DEFAULT_SEASONAL_ANALYSIS],\r\n            scenarios: []\r\n          };\r\n          \r\n          set((state) => {\r\n            const newProducts = [...state.products, newProduct];\r\n            return {\r\n              products: newProducts,\r\n              currentProductId: productId\r\n            };\r\n          });\r\n          \r\n          // Save current product ID to localStorage for persistence between sessions\r\n          localStorage.setItem('currentProductId', productId);\r\n          \r\n          // Save to storage (Firestore or localStorage)\r\n          saveProduct(newProduct);\r\n        },\r\n\r\n        updateProduct: ((productIdOrProduct: string | Product, updates?: Partial<Product>) => {\r\n          // Check if first argument is a product object or a product ID\r\n          if (typeof productIdOrProduct === 'object') {\r\n            // First argument is a product object\r\n            const product = productIdOrProduct;\r\n            \r\n            set((state) => {\r\n              const newProducts = state.products.map((p: Product) => \r\n                p.id === product.id \r\n                  ? { ...product }\r\n                  : p\r\n              );\r\n              return { products: newProducts };\r\n            });\r\n            \r\n            // Save to storage\r\n            try {\r\n              saveProduct(product);\r\n            } catch (error) {\r\n              console.error('Error saving product:', error);\r\n            }\r\n          } else {\r\n            // First argument is a product ID\r\n            const productId = productIdOrProduct;\r\n            \r\n            set((state) => {\r\n              const newProducts = state.products.map((p: Product) => \r\n                p.info.id === productId \r\n                  ? { ...p, ...updates }\r\n                  : p\r\n              );\r\n              return { products: newProducts };\r\n            });\r\n            \r\n            // Save to storage\r\n            try {\r\n              const product = get().products.find(p => p.info.id === productId);\r\n              if (product) {\r\n                saveProduct({ ...product, ...updates! });\r\n              }\r\n            } catch (error) {\r\n              console.error('Error saving product:', error);\r\n            }\r\n          }\r\n        }) as any,\r\n\r\n        addRiskAssessment: (productId: string, risk: Omit<RiskAssessment, 'id'>) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId) {\r\n                const newRisk = {\r\n                  ...risk,\r\n                  id: crypto.randomUUID(),\r\n                  riskScore: calculateRiskScore(risk.likelihood, risk.impact)\r\n                };\r\n                return {\r\n                  ...p,\r\n                  risks: [...p.risks, newRisk]\r\n                };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        updateRiskAssessment: (productId: string, riskId: string, updates: Partial<RiskAssessment>) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId) {\r\n                const newRisks = p.risks.map((r: RiskAssessment) => {\r\n                  if (r.id === riskId) {\r\n                    const updatedRisk = { ...r, ...updates };\r\n                    if (updates.likelihood || updates.impact) {\r\n                      updatedRisk.riskScore = calculateRiskScore(\r\n                        updatedRisk.likelihood, \r\n                        updatedRisk.impact\r\n                      );\r\n                    }\r\n                    return updatedRisk;\r\n                  }\r\n                  return r;\r\n                });\r\n                return { ...p, risks: newRisks };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        deleteRiskAssessment: (productId: string, riskId: string) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId) {\r\n                return {\r\n                  ...p,\r\n                  risks: p.risks.filter((r: RiskAssessment) => r.id !== riskId)\r\n                };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        updateSeasonalAnalysis: (productId: string, seasonalAnalysis: SeasonalAnalysis[]) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId) {\r\n                return { ...p, seasonalAnalysis };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        addScenario: (productId: string, scenario: Omit<Scenario, 'id'>) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId) {\r\n                const newScenario = {\r\n                  ...scenario,\r\n                  id: crypto.randomUUID(),\r\n                  projectedProfit: (scenario.projectedRevenue || 0) - (scenario.projectedCosts || 0),\r\n                  createdAt: new Date(),\r\n                  updatedAt: new Date()\r\n                };\r\n                return {\r\n                  ...p,\r\n                  scenarios: p.scenarios ? [...p.scenarios, newScenario] : [newScenario]\r\n                };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        updateScenario: (productId: string, scenarioId: string, updates: Partial<Scenario>) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId && p.scenarios) {\r\n                const newScenarios = p.scenarios.map((s: Scenario) => {\r\n                  if (s.id === scenarioId) {\r\n                    // Calculate projected profit if revenue or costs are updated\r\n                    const projectedProfit = \r\n                      (updates.projectedRevenue !== undefined || updates.projectedCosts !== undefined) \r\n                        ? ((updates.projectedRevenue ?? (s.projectedRevenue || 0)) - \r\n                          (updates.projectedCosts ?? (s.projectedCosts || 0)))\r\n                        : s.projectedProfit;\r\n                    \r\n                    return { \r\n                      ...s, \r\n                      ...updates, \r\n                      projectedProfit,\r\n                      updatedAt: new Date() \r\n                    };\r\n                  }\r\n                  return s;\r\n                });\r\n                return { ...p, scenarios: newScenarios };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        deleteScenario: (productId: string, scenarioId: string) => {\r\n          set((state) => {\r\n            const newProducts = state.products.map((p: Product) => {\r\n              if (p.info.id === productId && p.scenarios) {\r\n                return {\r\n                  ...p,\r\n                  scenarios: p.scenarios.filter((s: Scenario) => s.id !== scenarioId)\r\n                };\r\n              }\r\n              return p;\r\n            });\r\n            return { products: newProducts };\r\n          });\r\n          \r\n          // Save the updated product\r\n          const product = get().products.find(p => p.info.id === productId);\r\n          if (product) {\r\n            saveProduct(product);\r\n          }\r\n        },\r\n\r\n        deleteProduct: (productId: string) => {\r\n          set((state) => {\r\n            const newProducts = state.products.filter((p: Product) => p.info.id !== productId);\r\n            return {\r\n              products: newProducts,\r\n              currentProductId: state.currentProductId === productId ? null : state.currentProductId\r\n            };\r\n          });\r\n          \r\n          // Delete from storage\r\n          deleteProductFromDB(productId);\r\n        },\r\n\r\n        setCurrentProduct: (productId: string | null) => {\r\n          set((state) => {\r\n            // Don't track if it's the same product or null\r\n            if (state.currentProductId === productId || productId === null) {\r\n              return { currentProductId: productId };\r\n            }\r\n            \r\n            // Remove the product if it's already in recently viewed to avoid duplicates\r\n            const filteredRecent = state.recentlyViewed.filter(id => id !== productId);\r\n            \r\n            // Add the new product ID to the beginning of the array and keep only the 5 most recent\r\n            return {\r\n              currentProductId: productId,\r\n              recentlyViewed: [productId, ...filteredRecent].slice(0, 5)\r\n            };\r\n          });\r\n          \r\n          // Save to localStorage for persistence\r\n          if (productId) {\r\n            localStorage.setItem('currentProductId', productId);\r\n          } else {\r\n            localStorage.removeItem('currentProductId');\r\n          }\r\n        }\r\n      }),\r\n      {\r\n        name: 'fortress-financial-store',\r\n        partialize: (state) => {\r\n          // Update to include recentlyViewed in persistence\r\n          const { isLoading, error, ...rest } = state;\r\n          return rest;\r\n        },\r\n      }\r\n    )\r\n  )\r\n);\r\n\r\n// Helper function to calculate risk score based on likelihood and impact\r\nconst calculateRiskScore = (\r\n  likelihood: LikelihoodLevel, \r\n  impact: ImpactLevel\r\n): number => {\r\n  const likelihoodScore = likelihood === 'Low' ? 1 : likelihood === 'Medium' ? 2 : 3;\r\n  const impactScore = impact === 'Low' ? 1 : impact === 'Medium' ? 2 : 3;\r\n  \r\n  return likelihoodScore * impactScore;\r\n};\r\n\r\n// Initialize the store when it's first imported\r\nconst store = useStore.getState();\r\nstore.initializeStore();\r\n\r\nexport default useStore;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\common-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\custom-types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[745,748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[745,748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Custom type definitions\r\n\r\nexport interface MarketingChannelItem {\r\n  id: string;\r\n  name: string;\r\n  platform: string;\r\n  budget?: number;\r\n  expectedROI?: number;\r\n  audienceSize?: number;\r\n  targetCPA?: number;\r\n  conversionRate?: number;\r\n  cpc?: number;\r\n  settings?: Record<string, unknown>;\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  salesVolume: number;\r\n  marketShare: number;\r\n  growthRate: number;\r\n}\r\n\r\nexport interface Scenario {\r\n  id: string;\r\n  name: string;\r\n  products: Product[];\r\n  timestamp?: number;\r\n}\r\n\r\nexport type StorageMode = 'local' | 'firebase';\r\n\r\nexport interface FirestoreOperation {\r\n  type: 'set' | 'delete';\r\n  collectionName: string;\r\n  docId: string;\r\n  data?: any;\r\n}\r\n\r\n// Other interface definitions\r\nexport interface WeeklyActuals {\r\n  weekNumber: number;\r\n  revenue: number;\r\n  costs: number;\r\n  profit: number;\r\n  date: number;\r\n  marketingPerformance: {\r\n    channelId: string;\r\n    spend: number;\r\n    impressions: number;\r\n    clicks: number;\r\n    conversions: number;\r\n  }[];\r\n}\r\n\r\n// Type definitions for chart data\r\nexport interface ChartEntry {\r\n  name: string;\r\n  value: number;\r\n  color?: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\n// Type definition for tooltip payload\r\nexport interface TooltipPayload {\r\n  value: number;\r\n  name: string;\r\n  payload: {\r\n    name: string;\r\n    value: number;\r\n    isFullTime?: boolean;\r\n    [key: string]: unknown;\r\n  };\r\n  color: string;\r\n  dataKey: string;\r\n  [key: string]: unknown;\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\custom.d.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FC' is defined but never used.","line":5,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2320,2323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2320,2323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FC' is defined but never used.","line":109,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FC' is defined but never used.","line":123,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Declaration file for modules without their own type declarations\r\n\r\n// Add declaration for lucide-react icons\r\ndeclare module 'lucide-react' {\r\n  import { FC, SVGProps } from 'react';\r\n  \r\n  export interface IconProps extends SVGProps<SVGSVGElement> {\r\n    size?: string | number;\r\n    color?: string;\r\n    strokeWidth?: string | number;\r\n    className?: string;\r\n  }\r\n  \r\n  export type Icon = React.ComponentType<IconProps>;\r\n  \r\n  export const PlusCircle: Icon;\r\n  export const Pencil: Icon;\r\n  export const Trash2: Icon;\r\n  export const Save: Icon;\r\n  export const X: Icon;\r\n  export const AlertTriangle: Icon;\r\n  export const Filter: Icon;\r\n  export const PieChart: Icon;\r\n  export const Edit: Icon;\r\n  export const ArrowLeft: Icon;\r\n  export const Download: Icon;\r\n  export const ChevronDown: Icon;\r\n  export const ChevronUp: Icon;\r\n  export const ExternalLink: Icon;\r\n  export const Calendar: Icon;\r\n  export const BarChart: Icon;\r\n  export const LineChart: Icon;\r\n  export const Pie: Icon;\r\n  export const Dollar: Icon;\r\n  export const DollarSign: Icon;\r\n  export const Users: Icon;\r\n  export const Clipboard: Icon;\r\n  export const ClipboardCheck: Icon;\r\n  export const CheckCircle: Icon;\r\n  export const Eye: Icon;\r\n  export const EyeOff: Icon;\r\n  export const Search: Icon;\r\n  export const Plus: Icon;\r\n  export const Minus: Icon;\r\n  export const Info: Icon;\r\n  export const HelpCircle: Icon;\r\n  export const Copy: Icon;\r\n  export const Award: Icon;\r\n  export const ArrowUpDown: Icon;\r\n  export const TrendingUp: Icon;\r\n  export const BarChart2: Icon;\r\n  export const FileText: Icon;\r\n  export const Check: Icon;\r\n  export const Network: Icon;\r\n  export const WifiOff: Icon;\r\n  export const AlertCircle: Icon;\r\n  export const Loader2: Icon;\r\n  export const RefreshCw: Icon;\r\n  export const TrendingDown: Icon;\r\n  export const Activity: Icon;\r\n  export const Wifi: Icon;\r\n  export const Upload: Icon;\r\n  export const GripVertical: Icon;\r\n  // Add other icons as needed\r\n}\r\n\r\n// Add declarations for react-router-dom components\r\ndeclare module 'react-router-dom' {\r\n  import { ComponentType, ReactNode } from 'react';\r\n\r\n  export interface RouteProps {\r\n    path?: string;\r\n    element?: ReactNode;\r\n    children?: ReactNode;\r\n  }\r\n\r\n  export interface RoutesProps {\r\n    children?: ReactNode;\r\n    location?: any;\r\n  }\r\n\r\n  export interface NavigateProps {\r\n    to: string;\r\n    replace?: boolean;\r\n  }\r\n\r\n  export const BrowserRouter: ComponentType<{ children?: ReactNode }>;\r\n  export const Routes: ComponentType<RoutesProps>;\r\n  export const Route: ComponentType<RouteProps>;\r\n  export const Navigate: ComponentType<NavigateProps>;\r\n}\r\n\r\n// Add declaration for ErrorBoundary component\r\ndeclare module './components/ui/error-boundary' {\r\n  import { ComponentType, ReactNode } from 'react';\r\n\r\n  export interface ErrorBoundaryProps {\r\n    fallback?: ReactNode;\r\n    children: ReactNode;\r\n    className?: string;\r\n  }\r\n\r\n  const ErrorBoundary: ComponentType<ErrorBoundaryProps>;\r\n  export default ErrorBoundary;\r\n}\r\n\r\n// Add module declarations for custom UI components\r\ndeclare module './ui/slider' {\r\n  import { FC, HTMLAttributes } from 'react';\r\n  \r\n  export interface SliderProps extends HTMLAttributes<HTMLDivElement> {\r\n    min?: number;\r\n    max?: number;\r\n    step?: number;\r\n    value?: number[];\r\n    onValueChange?: (value: number[]) => void;\r\n  }\r\n  \r\n  export const Slider: React.ComponentType<SliderProps>;\r\n}\r\n\r\ndeclare module './ui/spinner' {\r\n  import { FC, HTMLAttributes } from 'react';\r\n  \r\n  export interface SpinnerProps extends HTMLAttributes<HTMLDivElement> {\r\n    size?: 'sm' | 'md' | 'lg';\r\n  }\r\n  \r\n  export const Spinner: React.ComponentType<SpinnerProps>;\r\n}\r\n\r\n// Add declarations for any missing React components\r\ndeclare module 'react' {\r\n  // Extend the JSX namespace\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      // Add any custom elements if needed\r\n    }\r\n  }\r\n}\r\n\r\n// Add declarations for HTML element attributes\r\ninterface HTMLAttributes {\r\n  // Add any custom attributes if needed\r\n}\r\n\r\n// Declare module to make it properly importable\r\ndeclare module '../types/custom.d' {\r\n  export interface MarketingChannelItem {\r\n    id: string;\r\n    name: string;\r\n    platform: string;\r\n    budget?: number;\r\n    expectedROI?: number;\r\n    audienceSize?: number;\r\n    targetCPA?: number;\r\n    conversionRate?: number;\r\n    cpc?: number;\r\n    settings?: Record<string, unknown>;\r\n  }\r\n\r\n  export interface Product {\r\n    info: {\r\n      id: string;\r\n      name: string;\r\n      description: string;\r\n      category: string;\r\n      createdAt: number;\r\n      updatedAt: number;\r\n      forecastPeriod: number;\r\n      startDate: number;\r\n    };\r\n    marketingChannels: MarketingChannelItem[];\r\n    costMetrics: {\r\n      marketing: {\r\n        channels: MarketingChannelItem[];\r\n        // Other marketing properties\r\n        [key: string]: unknown;\r\n      };\r\n      [key: string]: unknown;\r\n    };\r\n    revenueMetrics: {\r\n      [key: string]: unknown;\r\n    };\r\n    actualMetrics: {\r\n      [key: string]: unknown;\r\n    };\r\n    [key: string]: unknown;\r\n  }\r\n\r\n  // Other interface definitions\r\n  export interface WeeklyActuals {\r\n    weekNumber: number;\r\n    revenue: number;\r\n    costs: number;\r\n    profit: number;\r\n    date: number;\r\n    marketingPerformance: {\r\n      channelId: string;\r\n      spend: number;\r\n      impressions: number;\r\n      clicks: number;\r\n      conversions: number;\r\n    }[];\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\eventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\react-types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[407,410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[407,410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":58,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// React-specific type declarations\r\nimport React from 'react';\r\n\r\n// Event types\r\nexport interface ChangeEvent<T = Element> {\r\n  target: EventTarget & T;\r\n  currentTarget: EventTarget & T;\r\n  preventDefault: () => void;\r\n  stopPropagation: () => void;\r\n  nativeEvent: Event;\r\n  type: string;\r\n  bubbles: boolean;\r\n  cancelable: boolean;\r\n}\r\n\r\nexport interface EventTarget {\r\n  checked?: boolean;\r\n  value: any;\r\n  name?: string;\r\n}\r\n\r\n// Commonly used HTML element interfaces for events\r\nexport interface HTMLInputElement extends HTMLElement {\r\n  value: string;\r\n  checked: boolean;\r\n  type: string;\r\n  name: string;\r\n  disabled: boolean;\r\n  placeholder: string;\r\n}\r\n\r\nexport interface HTMLSelectElement extends HTMLElement {\r\n  value: string;\r\n  name: string;\r\n  options: HTMLOptionsCollection;\r\n  selectedIndex: number;\r\n}\r\n\r\nexport interface HTMLElement {\r\n  id: string;\r\n  className: string;\r\n}\r\n\r\n// React Router types\r\nexport interface RouteParams {\r\n  [key: string]: string;\r\n}\r\n\r\n// Utility function to get route params\r\nexport function useParams<T extends RouteParams>(): T {\r\n  // This is just a type definition - the actual implementation comes from react-router-dom\r\n  return {} as T;\r\n}\r\n\r\n// Utility function for navigation\r\nexport function useNavigate(): (path: string) => void {\r\n  // This is just a type definition - the actual implementation comes from react-router-dom\r\n  return (path: string) => {};\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\react.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1667,1670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1667,1670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1672,1675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1672,1675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1842,1845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1842,1845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1888,1891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1888,1891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":121,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":124,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1926,1929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1926,1929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2069,2072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2069,2072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2074,2077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2074,2077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2123,2126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2123,2126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2128,2131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2128,2131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'react';\r\n\r\ndeclare module 'react' {\r\n  export interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\r\n    // Extend for custom attributes if needed\r\n  }\r\n\r\n  export interface FormEvent<T = Element> {\r\n    preventDefault(): void;\r\n    stopPropagation(): void;\r\n    target: EventTarget & T;\r\n    currentTarget: EventTarget & T;\r\n    bubbles: boolean;\r\n    cancelable: boolean;\r\n    defaultPrevented: boolean;\r\n    eventPhase: number;\r\n    isTrusted: boolean;\r\n    nativeEvent: Event;\r\n    timeStamp: number;\r\n    type: string;\r\n  }\r\n\r\n  export type FC<P = Record<string, never>> = FunctionComponent<P>;\r\n\r\n  export interface FunctionComponent<P = Record<string, never>> {\r\n    (props: P, context?: unknown): ReactElement<unknown, unknown> | null;\r\n    propTypes?: WeakValidationMap<P> | undefined;\r\n    contextTypes?: ValidationMap<unknown> | undefined;\r\n    defaultProps?: Partial<P> | undefined;\r\n    displayName?: string | undefined;\r\n  }\r\n\r\n  export type ForwardRefRenderFunction<T, P = Record<string, never>> = (\r\n    props: P,\r\n    ref: React.Ref<T>\r\n  ) => ReactElement<unknown, unknown> | null;\r\n\r\n  export interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\r\n    // Extend for custom SVG attributes if needed\r\n  }\r\n\r\n  export function forwardRef<T, P = unknown>(\r\n    render: ForwardRefRenderFunction<T, P>\r\n  ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\r\n\r\n  export function memo<P = unknown>(\r\n    Component: FunctionComponent<P>,\r\n    propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean\r\n  ): NamedExoticComponent<P>;\r\n\r\n  export type ReactNode = \r\n    | ReactElement<any, any> \r\n    | string \r\n    | number \r\n    | Iterable<ReactNode> \r\n    | ReactPortal \r\n    | boolean \r\n    | null \r\n    | undefined;\r\n\r\n  export interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\r\n    type: T;\r\n    props: P;\r\n    key: Key | null;\r\n  }\r\n\r\n  export type JSXElementConstructor<P> =\r\n    | ((props: P) => ReactElement<any, any> | null)\r\n    | (new (props: P) => Component<any, any>);\r\n\r\n  export type Key = string | number;\r\n\r\n  export interface ReactPortal {\r\n    key: Key | null;\r\n    children: ReactNode;\r\n  }\r\n\r\n  export interface WeakValidationMap<T> {\r\n    [key: string]: WeakValidator<T>;\r\n  }\r\n\r\n  export interface ValidationMap<T> {\r\n    [key: string]: Validator<T>;\r\n  }\r\n\r\n  export type Validator<T> = (object: T, key: string, componentName: string, ...rest: unknown[]) => Error | null;\r\n  export type WeakValidator<T> = (object: {[key: string]: T}, key: string, componentName: string, ...rest: unknown[]) => Error | null;\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\types\\recharts.d.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203,206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203,206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Type definitions for Recharts components to fix JSX component issues\r\ndeclare module 'recharts' {\r\n  import * as React from 'react';\r\n\r\n  export interface RechartsComponentProps {\r\n    [key: string]: any;\r\n  }\r\n\r\n  // Component types that work with JSX\r\n  export function LineChart(props: RechartsComponentProps): JSX.Element;\r\n  export function Line(props: RechartsComponentProps): JSX.Element;\r\n  export function BarChart(props: RechartsComponentProps): JSX.Element;\r\n  export function Bar(props: RechartsComponentProps): JSX.Element;\r\n  export function PieChart(props: RechartsComponentProps): JSX.Element;\r\n  export function Pie(props: RechartsComponentProps): JSX.Element;\r\n  export function AreaChart(props: RechartsComponentProps): JSX.Element;\r\n  export function Area(props: RechartsComponentProps): JSX.Element;\r\n  export function XAxis(props: RechartsComponentProps): JSX.Element;\r\n  export function YAxis(props: RechartsComponentProps): JSX.Element;\r\n  export function CartesianGrid(props: RechartsComponentProps): JSX.Element;\r\n  export function Tooltip(props: RechartsComponentProps): JSX.Element;\r\n  export function Legend(props: RechartsComponentProps): JSX.Element;\r\n  export function ComposedChart(props: RechartsComponentProps): JSX.Element;\r\n  export function ResponsiveContainer(props: RechartsComponentProps): JSX.Element;\r\n  export function ReferenceLine(props: RechartsComponentProps): JSX.Element;\r\n  export function ReferenceArea(props: RechartsComponentProps): JSX.Element;\r\n  export function RadarChart(props: RechartsComponentProps): JSX.Element;\r\n  export function Radar(props: RechartsComponentProps): JSX.Element;\r\n  export function PolarGrid(props: RechartsComponentProps): JSX.Element;\r\n  export function PolarAngleAxis(props: RechartsComponentProps): JSX.Element;\r\n  export function PolarRadiusAxis(props: RechartsComponentProps): JSX.Element;\r\n  export function Cell(props: RechartsComponentProps): JSX.Element;\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Stage\\OneDrive\\GitHub Builds\\latestprodmodel\\latestprodmodel\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]